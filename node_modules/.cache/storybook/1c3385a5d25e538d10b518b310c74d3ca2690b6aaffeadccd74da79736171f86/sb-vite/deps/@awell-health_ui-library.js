import {
  require_react_dom
} from "./chunk-EWOXH7Z4.js";
import {
  require_react
} from "./chunk-GPYMHV5P.js";
import {
  __commonJS
} from "./chunk-LK32TJAX.js";

// .yarn/__virtual__/@awell-health-ui-library-virtual-1031a5adc6/4/.yarn/berry/cache/@awell-health-ui-library-npm-0.1.65-a0b3fa4230-10c0.zip/node_modules/@awell-health/ui-library/dist/index.js
var require_dist = __commonJS({
  ".yarn/__virtual__/@awell-health-ui-library-virtual-1031a5adc6/4/.yarn/berry/cache/@awell-health-ui-library-npm-0.1.65-a0b3fa4230-10c0.zip/node_modules/@awell-health/ui-library/dist/index.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react(), require_react_dom()) : typeof define === "function" && define.amd ? define(["exports", "react", "react-dom"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2["@awell-health/ui-library"] = {}, global2.react, global2["react-dom"]));
    })(exports, function(exports2, React, reactDom) {
      "use strict";
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__default = _interopDefaultLegacy(React);
      var React__namespace = _interopNamespace(React);
      var __assign = function() {
        __assign = Object.assign || function __assign2(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      }
      function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      }
      function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
          if (op[0] & 5) throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      }
      function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
      }
      var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
      function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
      }
      function getAugmentedNamespace(n) {
        var f = n.default;
        if (typeof f == "function") {
          var a = function() {
            return f.apply(this, arguments);
          };
          a.prototype = f.prototype;
        } else a = {};
        Object.defineProperty(a, "__esModule", { value: true });
        Object.keys(n).forEach(function(k) {
          var d = Object.getOwnPropertyDescriptor(n, k);
          Object.defineProperty(a, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return n[k];
            }
          });
        });
        return a;
      }
      var jsxRuntime = { exports: {} };
      var reactJsxRuntime_production_min = {};
      var hasRequiredReactJsxRuntime_production_min;
      function requireReactJsxRuntime_production_min() {
        if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
        hasRequiredReactJsxRuntime_production_min = 1;
        var f = React__default["default"], k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p = { key: true, ref: true, __self: true, __source: true };
        function q(c, a, g) {
          var b, d = {}, e = null, h = null;
          void 0 !== g && (e = "" + g);
          void 0 !== a.key && (e = "" + a.key);
          void 0 !== a.ref && (h = a.ref);
          for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
          if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
          return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
        }
        reactJsxRuntime_production_min.Fragment = l;
        reactJsxRuntime_production_min.jsx = q;
        reactJsxRuntime_production_min.jsxs = q;
        return reactJsxRuntime_production_min;
      }
      var reactJsxRuntime_development = {};
      var hasRequiredReactJsxRuntime_development;
      function requireReactJsxRuntime_development() {
        if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
        hasRequiredReactJsxRuntime_development = 1;
        if (true) {
          (function() {
            var React2 = React__default["default"];
            var REACT_ELEMENT_TYPE = Symbol.for("react.element");
            var REACT_PORTAL_TYPE = Symbol.for("react.portal");
            var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
            var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
            var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
            var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
            var REACT_CONTEXT_TYPE = Symbol.for("react.context");
            var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
            var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
            var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
            var REACT_MEMO_TYPE = Symbol.for("react.memo");
            var REACT_LAZY_TYPE = Symbol.for("react.lazy");
            var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
            var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
            var FAUX_ITERATOR_SYMBOL = "@@iterator";
            function getIteratorFn(maybeIterable) {
              if (maybeIterable === null || typeof maybeIterable !== "object") {
                return null;
              }
              var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
              if (typeof maybeIterator === "function") {
                return maybeIterator;
              }
              return null;
            }
            var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            function error(format2) {
              {
                {
                  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                  }
                  printWarning("error", format2, args);
                }
              }
            }
            function printWarning(level, format2, args) {
              {
                var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
                var stack = ReactDebugCurrentFrame2.getStackAddendum();
                if (stack !== "") {
                  format2 += "%s";
                  args = args.concat([stack]);
                }
                var argsWithFormat = args.map(function(item) {
                  return String(item);
                });
                argsWithFormat.unshift("Warning: " + format2);
                Function.prototype.apply.call(console[level], console, argsWithFormat);
              }
            }
            var enableScopeAPI = false;
            var enableCacheElement = false;
            var enableTransitionTracing = false;
            var enableLegacyHidden = false;
            var enableDebugTracing = false;
            var REACT_MODULE_REFERENCE;
            {
              REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
            }
            function isValidElementType(type) {
              if (typeof type === "string" || typeof type === "function") {
                return true;
              }
              if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
                return true;
              }
              if (typeof type === "object" && type !== null) {
                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
                // types supported by any Flight configuration anywhere since
                // we don't know which Flight build this will end up being used
                // with.
                type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                  return true;
                }
              }
              return false;
            }
            function getWrappedName(outerType, innerType, wrapperName) {
              var displayName = outerType.displayName;
              if (displayName) {
                return displayName;
              }
              var functionName = innerType.displayName || innerType.name || "";
              return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
            }
            function getContextName(type) {
              return type.displayName || "Context";
            }
            function getComponentNameFromType(type) {
              if (type == null) {
                return null;
              }
              {
                if (typeof type.tag === "number") {
                  error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
                }
              }
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return "Fragment";
                case REACT_PORTAL_TYPE:
                  return "Portal";
                case REACT_PROFILER_TYPE:
                  return "Profiler";
                case REACT_STRICT_MODE_TYPE:
                  return "StrictMode";
                case REACT_SUSPENSE_TYPE:
                  return "Suspense";
                case REACT_SUSPENSE_LIST_TYPE:
                  return "SuspenseList";
              }
              if (typeof type === "object") {
                switch (type.$$typeof) {
                  case REACT_CONTEXT_TYPE:
                    var context = type;
                    return getContextName(context) + ".Consumer";
                  case REACT_PROVIDER_TYPE:
                    var provider = type;
                    return getContextName(provider._context) + ".Provider";
                  case REACT_FORWARD_REF_TYPE:
                    return getWrappedName(type, type.render, "ForwardRef");
                  case REACT_MEMO_TYPE:
                    var outerName = type.displayName || null;
                    if (outerName !== null) {
                      return outerName;
                    }
                    return getComponentNameFromType(type.type) || "Memo";
                  case REACT_LAZY_TYPE: {
                    var lazyComponent = type;
                    var payload = lazyComponent._payload;
                    var init = lazyComponent._init;
                    try {
                      return getComponentNameFromType(init(payload));
                    } catch (x) {
                      return null;
                    }
                  }
                }
              }
              return null;
            }
            var assign = Object.assign;
            var disabledDepth = 0;
            var prevLog;
            var prevInfo;
            var prevWarn;
            var prevError;
            var prevGroup;
            var prevGroupCollapsed;
            var prevGroupEnd;
            function disabledLog() {
            }
            disabledLog.__reactDisabledLog = true;
            function disableLogs() {
              {
                if (disabledDepth === 0) {
                  prevLog = console.log;
                  prevInfo = console.info;
                  prevWarn = console.warn;
                  prevError = console.error;
                  prevGroup = console.group;
                  prevGroupCollapsed = console.groupCollapsed;
                  prevGroupEnd = console.groupEnd;
                  var props = {
                    configurable: true,
                    enumerable: true,
                    value: disabledLog,
                    writable: true
                  };
                  Object.defineProperties(console, {
                    info: props,
                    log: props,
                    warn: props,
                    error: props,
                    group: props,
                    groupCollapsed: props,
                    groupEnd: props
                  });
                }
                disabledDepth++;
              }
            }
            function reenableLogs() {
              {
                disabledDepth--;
                if (disabledDepth === 0) {
                  var props = {
                    configurable: true,
                    enumerable: true,
                    writable: true
                  };
                  Object.defineProperties(console, {
                    log: assign({}, props, {
                      value: prevLog
                    }),
                    info: assign({}, props, {
                      value: prevInfo
                    }),
                    warn: assign({}, props, {
                      value: prevWarn
                    }),
                    error: assign({}, props, {
                      value: prevError
                    }),
                    group: assign({}, props, {
                      value: prevGroup
                    }),
                    groupCollapsed: assign({}, props, {
                      value: prevGroupCollapsed
                    }),
                    groupEnd: assign({}, props, {
                      value: prevGroupEnd
                    })
                  });
                }
                if (disabledDepth < 0) {
                  error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
                }
              }
            }
            var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
            var prefix;
            function describeBuiltInComponentFrame(name, source, ownerFn) {
              {
                if (prefix === void 0) {
                  try {
                    throw Error();
                  } catch (x) {
                    var match2 = x.stack.trim().match(/\n( *(at )?)/);
                    prefix = match2 && match2[1] || "";
                  }
                }
                return "\n" + prefix + name;
              }
            }
            var reentry = false;
            var componentFrameCache;
            {
              var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
              componentFrameCache = new PossiblyWeakMap();
            }
            function describeNativeComponentFrame(fn, construct) {
              if (!fn || reentry) {
                return "";
              }
              {
                var frame = componentFrameCache.get(fn);
                if (frame !== void 0) {
                  return frame;
                }
              }
              var control;
              reentry = true;
              var previousPrepareStackTrace = Error.prepareStackTrace;
              Error.prepareStackTrace = void 0;
              var previousDispatcher;
              {
                previousDispatcher = ReactCurrentDispatcher.current;
                ReactCurrentDispatcher.current = null;
                disableLogs();
              }
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  fn();
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  var sampleLines = sample.stack.split("\n");
                  var controlLines = control.stack.split("\n");
                  var s = sampleLines.length - 1;
                  var c = controlLines.length - 1;
                  while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                    c--;
                  }
                  for (; s >= 1 && c >= 0; s--, c--) {
                    if (sampleLines[s] !== controlLines[c]) {
                      if (s !== 1 || c !== 1) {
                        do {
                          s--;
                          c--;
                          if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                            if (fn.displayName && _frame.includes("<anonymous>")) {
                              _frame = _frame.replace("<anonymous>", fn.displayName);
                            }
                            {
                              if (typeof fn === "function") {
                                componentFrameCache.set(fn, _frame);
                              }
                            }
                            return _frame;
                          }
                        } while (s >= 1 && c >= 0);
                      }
                      break;
                    }
                  }
                }
              } finally {
                reentry = false;
                {
                  ReactCurrentDispatcher.current = previousDispatcher;
                  reenableLogs();
                }
                Error.prepareStackTrace = previousPrepareStackTrace;
              }
              var name = fn ? fn.displayName || fn.name : "";
              var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
              {
                if (typeof fn === "function") {
                  componentFrameCache.set(fn, syntheticFrame);
                }
              }
              return syntheticFrame;
            }
            function describeFunctionComponentFrame(fn, source, ownerFn) {
              {
                return describeNativeComponentFrame(fn, false);
              }
            }
            function shouldConstruct(Component) {
              var prototype = Component.prototype;
              return !!(prototype && prototype.isReactComponent);
            }
            function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
              if (type == null) {
                return "";
              }
              if (typeof type === "function") {
                {
                  return describeNativeComponentFrame(type, shouldConstruct(type));
                }
              }
              if (typeof type === "string") {
                return describeBuiltInComponentFrame(type);
              }
              switch (type) {
                case REACT_SUSPENSE_TYPE:
                  return describeBuiltInComponentFrame("Suspense");
                case REACT_SUSPENSE_LIST_TYPE:
                  return describeBuiltInComponentFrame("SuspenseList");
              }
              if (typeof type === "object") {
                switch (type.$$typeof) {
                  case REACT_FORWARD_REF_TYPE:
                    return describeFunctionComponentFrame(type.render);
                  case REACT_MEMO_TYPE:
                    return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                  case REACT_LAZY_TYPE: {
                    var lazyComponent = type;
                    var payload = lazyComponent._payload;
                    var init = lazyComponent._init;
                    try {
                      return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                    } catch (x) {
                    }
                  }
                }
              }
              return "";
            }
            var hasOwnProperty2 = Object.prototype.hasOwnProperty;
            var loggedTypeFailures = {};
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            function setCurrentlyValidatingElement(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame.setExtraStackFrame(null);
                }
              }
            }
            function checkPropTypes(typeSpecs, values, location, componentName, element) {
              {
                var has2 = Function.call.bind(hasOwnProperty2);
                for (var typeSpecName in typeSpecs) {
                  if (has2(typeSpecs, typeSpecName)) {
                    var error$1 = void 0;
                    try {
                      if (typeof typeSpecs[typeSpecName] !== "function") {
                        var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                        err.name = "Invariant Violation";
                        throw err;
                      }
                      error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                    } catch (ex) {
                      error$1 = ex;
                    }
                    if (error$1 && !(error$1 instanceof Error)) {
                      setCurrentlyValidatingElement(element);
                      error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                      setCurrentlyValidatingElement(null);
                    }
                    if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                      loggedTypeFailures[error$1.message] = true;
                      setCurrentlyValidatingElement(element);
                      error("Failed %s type: %s", location, error$1.message);
                      setCurrentlyValidatingElement(null);
                    }
                  }
                }
              }
            }
            var isArrayImpl = Array.isArray;
            function isArray(a) {
              return isArrayImpl(a);
            }
            function typeName(value) {
              {
                var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
                return type;
              }
            }
            function willCoercionThrow(value) {
              {
                try {
                  testStringCoercion(value);
                  return false;
                } catch (e) {
                  return true;
                }
              }
            }
            function testStringCoercion(value) {
              return "" + value;
            }
            function checkKeyStringCoercion(value) {
              {
                if (willCoercionThrow(value)) {
                  error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                  return testStringCoercion(value);
                }
              }
            }
            var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
            var RESERVED_PROPS = {
              key: true,
              ref: true,
              __self: true,
              __source: true
            };
            var specialPropKeyWarningShown;
            var specialPropRefWarningShown;
            var didWarnAboutStringRefs;
            {
              didWarnAboutStringRefs = {};
            }
            function hasValidRef(config) {
              {
                if (hasOwnProperty2.call(config, "ref")) {
                  var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.ref !== void 0;
            }
            function hasValidKey(config) {
              {
                if (hasOwnProperty2.call(config, "key")) {
                  var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                  if (getter && getter.isReactWarning) {
                    return false;
                  }
                }
              }
              return config.key !== void 0;
            }
            function warnIfStringRefCannotBeAutoConverted(config, self2) {
              {
                if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                  var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                  if (!didWarnAboutStringRefs[componentName]) {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
            }
            function defineKeyPropWarningGetter(props, displayName) {
              {
                var warnAboutAccessingKey = function() {
                  if (!specialPropKeyWarningShown) {
                    specialPropKeyWarningShown = true;
                    error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                  }
                };
                warnAboutAccessingKey.isReactWarning = true;
                Object.defineProperty(props, "key", {
                  get: warnAboutAccessingKey,
                  configurable: true
                });
              }
            }
            function defineRefPropWarningGetter(props, displayName) {
              {
                var warnAboutAccessingRef = function() {
                  if (!specialPropRefWarningShown) {
                    specialPropRefWarningShown = true;
                    error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                  }
                };
                warnAboutAccessingRef.isReactWarning = true;
                Object.defineProperty(props, "ref", {
                  get: warnAboutAccessingRef,
                  configurable: true
                });
              }
            }
            var ReactElement = function(type, key, ref, self2, source, owner, props) {
              var element = {
                // This tag allows us to uniquely identify this as a React Element
                $$typeof: REACT_ELEMENT_TYPE,
                // Built-in properties that belong on the element
                type,
                key,
                ref,
                props,
                // Record the component responsible for creating this element.
                _owner: owner
              };
              {
                element._store = {};
                Object.defineProperty(element._store, "validated", {
                  configurable: false,
                  enumerable: false,
                  writable: true,
                  value: false
                });
                Object.defineProperty(element, "_self", {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: self2
                });
                Object.defineProperty(element, "_source", {
                  configurable: false,
                  enumerable: false,
                  writable: false,
                  value: source
                });
                if (Object.freeze) {
                  Object.freeze(element.props);
                  Object.freeze(element);
                }
              }
              return element;
            };
            function jsxDEV(type, config, maybeKey, source, self2) {
              {
                var propName;
                var props = {};
                var key = null;
                var ref = null;
                if (maybeKey !== void 0) {
                  {
                    checkKeyStringCoercion(maybeKey);
                  }
                  key = "" + maybeKey;
                }
                if (hasValidKey(config)) {
                  {
                    checkKeyStringCoercion(config.key);
                  }
                  key = "" + config.key;
                }
                if (hasValidRef(config)) {
                  ref = config.ref;
                  warnIfStringRefCannotBeAutoConverted(config, self2);
                }
                for (propName in config) {
                  if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                    props[propName] = config[propName];
                  }
                }
                if (type && type.defaultProps) {
                  var defaultProps = type.defaultProps;
                  for (propName in defaultProps) {
                    if (props[propName] === void 0) {
                      props[propName] = defaultProps[propName];
                    }
                  }
                }
                if (key || ref) {
                  var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                  if (key) {
                    defineKeyPropWarningGetter(props, displayName);
                  }
                  if (ref) {
                    defineRefPropWarningGetter(props, displayName);
                  }
                }
                return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
              }
            }
            var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
            var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
            function setCurrentlyValidatingElement$1(element) {
              {
                if (element) {
                  var owner = element._owner;
                  var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                  ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
                } else {
                  ReactDebugCurrentFrame$1.setExtraStackFrame(null);
                }
              }
            }
            var propTypesMisspellWarningShown;
            {
              propTypesMisspellWarningShown = false;
            }
            function isValidElement(object) {
              {
                return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
              }
            }
            function getDeclarationErrorAddendum() {
              {
                if (ReactCurrentOwner$1.current) {
                  var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                  if (name) {
                    return "\n\nCheck the render method of `" + name + "`.";
                  }
                }
                return "";
              }
            }
            function getSourceInfoErrorAddendum(source) {
              {
                if (source !== void 0) {
                  var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                  var lineNumber = source.lineNumber;
                  return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
                }
                return "";
              }
            }
            var ownerHasKeyUseWarning = {};
            function getCurrentComponentErrorInfo(parentType) {
              {
                var info = getDeclarationErrorAddendum();
                if (!info) {
                  var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                  if (parentName) {
                    info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                  }
                }
                return info;
              }
            }
            function validateExplicitKey(element, parentType) {
              {
                if (!element._store || element._store.validated || element.key != null) {
                  return;
                }
                element._store.validated = true;
                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                  return;
                }
                ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
                var childOwner = "";
                if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                  childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
                }
                setCurrentlyValidatingElement$1(element);
                error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
                setCurrentlyValidatingElement$1(null);
              }
            }
            function validateChildKeys(node, parentType) {
              {
                if (typeof node !== "object") {
                  return;
                }
                if (isArray(node)) {
                  for (var i = 0; i < node.length; i++) {
                    var child = node[i];
                    if (isValidElement(child)) {
                      validateExplicitKey(child, parentType);
                    }
                  }
                } else if (isValidElement(node)) {
                  if (node._store) {
                    node._store.validated = true;
                  }
                } else if (node) {
                  var iteratorFn = getIteratorFn(node);
                  if (typeof iteratorFn === "function") {
                    if (iteratorFn !== node.entries) {
                      var iterator = iteratorFn.call(node);
                      var step;
                      while (!(step = iterator.next()).done) {
                        if (isValidElement(step.value)) {
                          validateExplicitKey(step.value, parentType);
                        }
                      }
                    }
                  }
                }
              }
            }
            function validatePropTypes(element) {
              {
                var type = element.type;
                if (type === null || type === void 0 || typeof type === "string") {
                  return;
                }
                var propTypes2;
                if (typeof type === "function") {
                  propTypes2 = type.propTypes;
                } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)) {
                  propTypes2 = type.propTypes;
                } else {
                  return;
                }
                if (propTypes2) {
                  var name = getComponentNameFromType(type);
                  checkPropTypes(propTypes2, element.props, "prop", name, element);
                } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                  propTypesMisspellWarningShown = true;
                  var _name = getComponentNameFromType(type);
                  error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
                }
                if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                  error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
                }
              }
            }
            function validateFragmentProps(fragment) {
              {
                var keys = Object.keys(fragment.props);
                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  if (key !== "children" && key !== "key") {
                    setCurrentlyValidatingElement$1(fragment);
                    error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                    setCurrentlyValidatingElement$1(null);
                    break;
                  }
                }
                if (fragment.ref !== null) {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid attribute `ref` supplied to `React.Fragment`.");
                  setCurrentlyValidatingElement$1(null);
                }
              }
            }
            function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
              {
                var validType = isValidElementType(type);
                if (!validType) {
                  var info = "";
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var sourceInfo = getSourceInfoErrorAddendum(source);
                  if (sourceInfo) {
                    info += sourceInfo;
                  } else {
                    info += getDeclarationErrorAddendum();
                  }
                  var typeString;
                  if (type === null) {
                    typeString = "null";
                  } else if (isArray(type)) {
                    typeString = "array";
                  } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                    typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                    info = " Did you accidentally export a JSX literal instead of a component?";
                  } else {
                    typeString = typeof type;
                  }
                  error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
                }
                var element = jsxDEV(type, props, key, source, self2);
                if (element == null) {
                  return element;
                }
                if (validType) {
                  var children = props.children;
                  if (children !== void 0) {
                    if (isStaticChildren) {
                      if (isArray(children)) {
                        for (var i = 0; i < children.length; i++) {
                          validateChildKeys(children[i], type);
                        }
                        if (Object.freeze) {
                          Object.freeze(children);
                        }
                      } else {
                        error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                      }
                    } else {
                      validateChildKeys(children, type);
                    }
                  }
                }
                if (type === REACT_FRAGMENT_TYPE) {
                  validateFragmentProps(element);
                } else {
                  validatePropTypes(element);
                }
                return element;
              }
            }
            function jsxWithValidationStatic(type, props, key) {
              {
                return jsxWithValidation(type, props, key, true);
              }
            }
            function jsxWithValidationDynamic(type, props, key) {
              {
                return jsxWithValidation(type, props, key, false);
              }
            }
            var jsx = jsxWithValidationDynamic;
            var jsxs = jsxWithValidationStatic;
            reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
            reactJsxRuntime_development.jsx = jsx;
            reactJsxRuntime_development.jsxs = jsxs;
          })();
        }
        return reactJsxRuntime_development;
      }
      (function(module2) {
        if (false) {
          module2.exports = requireReactJsxRuntime_production_min();
        } else {
          module2.exports = requireReactJsxRuntime_development();
        }
      })(jsxRuntime);
      var classes$v = { "awell_button": "awell__button_awell_button", "w_full": "awell__button_w_full", "primary": "awell__button_primary", "secondary": "awell__button_secondary", "tertiary": "awell__button_tertiary" };
      var Button = React.forwardRef(function(_a, ref) {
        var children = _a.children, onClick = _a.onClick, _b = _a.fullWidth, fullWidth = _b === void 0 ? false : _b, _c = _a.variant, variant = _c === void 0 ? "primary" : _c, props = __rest(_a, ["children", "onClick", "fullWidth", "variant"]);
        return jsxRuntime.exports.jsx("button", __assign({}, props, { className: "".concat(classes$v.awell_button, " ").concat(classes$v[variant], " ").concat(fullWidth ? classes$v["w_full"] : ""), onClick, ref }, { children }));
      });
      Button.displayName = "Button";
      const fr = "https://app.cal.com/embed/embed.js";
      function X(g = fr) {
        (function(d, h, _) {
          let R = function(c, v) {
            c.q.push(v);
          }, T = d.document;
          d.Cal = d.Cal || function() {
            let c = d.Cal, v = arguments;
            if (c.loaded || (c.ns = {}, c.q = c.q || [], T.head.appendChild(T.createElement("script")).src = h, c.loaded = true), v[0] === _) {
              const s = function() {
                R(s, arguments);
              }, m = v[1];
              s.q = s.q || [], typeof m == "string" ? (c.ns[m] = s) && R(s, v) : R(c, v);
              return;
            }
            R(c, v);
          };
        })(
          window,
          //! Replace it with "https://cal.com/embed.js" or the URL where you have embed.js installed
          g,
          "init"
        );
        return window.Cal;
      }
      X.toString();
      function cr(g) {
        const [d, h] = React.useState();
        return React.useEffect(() => {
          h(() => X(g));
        }, []), d;
      }
      var H = {}, dr = {
        get exports() {
          return H;
        },
        set exports(g) {
          H = g;
        }
      }, A = {};
      var Te;
      function vr() {
        if (Te)
          return A;
        Te = 1;
        var g = React__default["default"], d = Symbol.for("react.element"), h = Symbol.for("react.fragment"), _ = Object.prototype.hasOwnProperty, R = g.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, T = { key: true, ref: true, __self: true, __source: true };
        function c(v, s, m) {
          var p, C = {}, S = null, $ = null;
          m !== void 0 && (S = "" + m), s.key !== void 0 && (S = "" + s.key), s.ref !== void 0 && ($ = s.ref);
          for (p in s)
            _.call(s, p) && !T.hasOwnProperty(p) && (C[p] = s[p]);
          if (v && v.defaultProps)
            for (p in s = v.defaultProps, s)
              C[p] === void 0 && (C[p] = s[p]);
          return { $$typeof: d, type: v, key: S, ref: $, props: C, _owner: R.current };
        }
        return A.Fragment = h, A.jsx = c, A.jsxs = c, A;
      }
      var I = {};
      var we;
      function pr() {
        return we || (we = 1, function() {
          var g = React__default["default"], d = Symbol.for("react.element"), h = Symbol.for("react.portal"), _ = Symbol.for("react.fragment"), R = Symbol.for("react.strict_mode"), T = Symbol.for("react.profiler"), c = Symbol.for("react.provider"), v = Symbol.for("react.context"), s = Symbol.for("react.forward_ref"), m = Symbol.for("react.suspense"), p = Symbol.for("react.suspense_list"), C = Symbol.for("react.memo"), S = Symbol.for("react.lazy"), $ = Symbol.for("react.offscreen"), Z = Symbol.iterator, Pe = "@@iterator";
          function xe(e) {
            if (e === null || typeof e != "object")
              return null;
            var r = Z && e[Z] || e[Pe];
            return typeof r == "function" ? r : null;
          }
          var x = g.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function b(e) {
            {
              for (var r = arguments.length, t = new Array(r > 1 ? r - 1 : 0), n = 1; n < r; n++)
                t[n - 1] = arguments[n];
              je("error", e, t);
            }
          }
          function je(e, r, t) {
            {
              var n = x.ReactDebugCurrentFrame, o = n.getStackAddendum();
              o !== "" && (r += "%s", t = t.concat([o]));
              var u = t.map(function(i) {
                return String(i);
              });
              u.unshift("Warning: " + r), Function.prototype.apply.call(console[e], console, u);
            }
          }
          var ke = false, De = false, Fe = false, Ae = false, Ie = false, Q;
          Q = Symbol.for("react.module.reference");
          function $e(e) {
            return !!(typeof e == "string" || typeof e == "function" || e === _ || e === T || Ie || e === R || e === m || e === p || Ae || e === $ || ke || De || Fe || typeof e == "object" && e !== null && (e.$$typeof === S || e.$$typeof === C || e.$$typeof === c || e.$$typeof === v || e.$$typeof === s || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            e.$$typeof === Q || e.getModuleId !== void 0));
          }
          function We(e, r, t) {
            var n = e.displayName;
            if (n)
              return n;
            var o = r.displayName || r.name || "";
            return o !== "" ? t + "(" + o + ")" : t;
          }
          function ee(e) {
            return e.displayName || "Context";
          }
          function w(e) {
            if (e == null)
              return null;
            if (typeof e.tag == "number" && b("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof e == "function")
              return e.displayName || e.name || null;
            if (typeof e == "string")
              return e;
            switch (e) {
              case _:
                return "Fragment";
              case h:
                return "Portal";
              case T:
                return "Profiler";
              case R:
                return "StrictMode";
              case m:
                return "Suspense";
              case p:
                return "SuspenseList";
            }
            if (typeof e == "object")
              switch (e.$$typeof) {
                case v:
                  var r = e;
                  return ee(r) + ".Consumer";
                case c:
                  var t = e;
                  return ee(t._context) + ".Provider";
                case s:
                  return We(e, e.render, "ForwardRef");
                case C:
                  var n = e.displayName || null;
                  return n !== null ? n : w(e.type) || "Memo";
                case S: {
                  var o = e, u = o._payload, i = o._init;
                  try {
                    return w(i(u));
                  } catch {
                    return null;
                  }
                }
              }
            return null;
          }
          var P = Object.assign, D = 0, re, te, ne, ae, ie, oe, ue;
          function se() {
          }
          se.__reactDisabledLog = true;
          function Ye() {
            {
              if (D === 0) {
                re = console.log, te = console.info, ne = console.warn, ae = console.error, ie = console.group, oe = console.groupCollapsed, ue = console.groupEnd;
                var e = {
                  configurable: true,
                  enumerable: true,
                  value: se,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: e,
                  log: e,
                  warn: e,
                  error: e,
                  group: e,
                  groupCollapsed: e,
                  groupEnd: e
                });
              }
              D++;
            }
          }
          function Le() {
            {
              if (D--, D === 0) {
                var e = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: P({}, e, {
                    value: re
                  }),
                  info: P({}, e, {
                    value: te
                  }),
                  warn: P({}, e, {
                    value: ne
                  }),
                  error: P({}, e, {
                    value: ae
                  }),
                  group: P({}, e, {
                    value: ie
                  }),
                  groupCollapsed: P({}, e, {
                    value: oe
                  }),
                  groupEnd: P({}, e, {
                    value: ue
                  })
                });
              }
              D < 0 && b("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
          var V = x.ReactCurrentDispatcher, M;
          function W(e, r, t) {
            {
              if (M === void 0)
                try {
                  throw Error();
                } catch (o) {
                  var n = o.stack.trim().match(/\n( *(at )?)/);
                  M = n && n[1] || "";
                }
              return `
` + M + e;
            }
          }
          var q = false, Y;
          {
            var Ne = typeof WeakMap == "function" ? WeakMap : Map;
            Y = new Ne();
          }
          function le(e, r) {
            if (!e || q)
              return "";
            {
              var t = Y.get(e);
              if (t !== void 0)
                return t;
            }
            var n;
            q = true;
            var o = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var u;
            u = V.current, V.current = null, Ye();
            try {
              if (r) {
                var i = function() {
                  throw Error();
                };
                if (Object.defineProperty(i.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                }), typeof Reflect == "object" && Reflect.construct) {
                  try {
                    Reflect.construct(i, []);
                  } catch (O) {
                    n = O;
                  }
                  Reflect.construct(e, [], i);
                } else {
                  try {
                    i.call();
                  } catch (O) {
                    n = O;
                  }
                  e.call(i.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (O) {
                  n = O;
                }
                e();
              }
            } catch (O) {
              if (O && n && typeof O.stack == "string") {
                for (var a = O.stack.split(`
`), E = n.stack.split(`
`), l = a.length - 1, f = E.length - 1; l >= 1 && f >= 0 && a[l] !== E[f]; )
                  f--;
                for (; l >= 1 && f >= 0; l--, f--)
                  if (a[l] !== E[f]) {
                    if (l !== 1 || f !== 1)
                      do
                        if (l--, f--, f < 0 || a[l] !== E[f]) {
                          var y = `
` + a[l].replace(" at new ", " at ");
                          return e.displayName && y.includes("<anonymous>") && (y = y.replace("<anonymous>", e.displayName)), typeof e == "function" && Y.set(e, y), y;
                        }
                      while (l >= 1 && f >= 0);
                    break;
                  }
              }
            } finally {
              q = false, V.current = u, Le(), Error.prepareStackTrace = o;
            }
            var k = e ? e.displayName || e.name : "", _e = k ? W(k) : "";
            return typeof e == "function" && Y.set(e, _e), _e;
          }
          function Ue(e, r, t) {
            return le(e, false);
          }
          function Ve(e) {
            var r = e.prototype;
            return !!(r && r.isReactComponent);
          }
          function L(e, r, t) {
            if (e == null)
              return "";
            if (typeof e == "function")
              return le(e, Ve(e));
            if (typeof e == "string")
              return W(e);
            switch (e) {
              case m:
                return W("Suspense");
              case p:
                return W("SuspenseList");
            }
            if (typeof e == "object")
              switch (e.$$typeof) {
                case s:
                  return Ue(e.render);
                case C:
                  return L(e.type, r, t);
                case S: {
                  var n = e, o = n._payload, u = n._init;
                  try {
                    return L(u(o), r, t);
                  } catch {
                  }
                }
              }
            return "";
          }
          var N = Object.prototype.hasOwnProperty, fe = {}, ce = x.ReactDebugCurrentFrame;
          function U(e) {
            if (e) {
              var r = e._owner, t = L(e.type, e._source, r ? r.type : null);
              ce.setExtraStackFrame(t);
            } else
              ce.setExtraStackFrame(null);
          }
          function Me(e, r, t, n, o) {
            {
              var u = Function.call.bind(N);
              for (var i in e)
                if (u(e, i)) {
                  var a = void 0;
                  try {
                    if (typeof e[i] != "function") {
                      var E = Error((n || "React class") + ": " + t + " type `" + i + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof e[i] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      throw E.name = "Invariant Violation", E;
                    }
                    a = e[i](r, i, n, t, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (l) {
                    a = l;
                  }
                  a && !(a instanceof Error) && (U(o), b("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", n || "React class", t, i, typeof a), U(null)), a instanceof Error && !(a.message in fe) && (fe[a.message] = true, U(o), b("Failed %s type: %s", t, a.message), U(null));
                }
            }
          }
          var qe = Array.isArray;
          function B(e) {
            return qe(e);
          }
          function Be(e) {
            {
              var r = typeof Symbol == "function" && Symbol.toStringTag, t = r && e[Symbol.toStringTag] || e.constructor.name || "Object";
              return t;
            }
          }
          function Je(e) {
            try {
              return de(e), false;
            } catch {
              return true;
            }
          }
          function de(e) {
            return "" + e;
          }
          function ve(e) {
            if (Je(e))
              return b("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Be(e)), de(e);
          }
          var F = x.ReactCurrentOwner, Ge = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          }, pe, ge, J;
          J = {};
          function ze(e) {
            if (N.call(e, "ref")) {
              var r = Object.getOwnPropertyDescriptor(e, "ref").get;
              if (r && r.isReactWarning)
                return false;
            }
            return e.ref !== void 0;
          }
          function Ke(e) {
            if (N.call(e, "key")) {
              var r = Object.getOwnPropertyDescriptor(e, "key").get;
              if (r && r.isReactWarning)
                return false;
            }
            return e.key !== void 0;
          }
          function He(e, r) {
            if (typeof e.ref == "string" && F.current && r && F.current.stateNode !== r) {
              var t = w(F.current.type);
              J[t] || (b('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', w(F.current.type), e.ref), J[t] = true);
            }
          }
          function Xe(e, r) {
            {
              var t = function() {
                pe || (pe = true, b("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
              };
              t.isReactWarning = true, Object.defineProperty(e, "key", {
                get: t,
                configurable: true
              });
            }
          }
          function Ze(e, r) {
            {
              var t = function() {
                ge || (ge = true, b("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", r));
              };
              t.isReactWarning = true, Object.defineProperty(e, "ref", {
                get: t,
                configurable: true
              });
            }
          }
          var Qe = function(e, r, t, n, o, u, i) {
            var a = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: d,
              // Built-in properties that belong on the element
              type: e,
              key: r,
              ref: t,
              props: i,
              // Record the component responsible for creating this element.
              _owner: u
            };
            return a._store = {}, Object.defineProperty(a._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            }), Object.defineProperty(a, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: n
            }), Object.defineProperty(a, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: o
            }), Object.freeze && (Object.freeze(a.props), Object.freeze(a)), a;
          };
          function er(e, r, t, n, o) {
            {
              var u, i = {}, a = null, E = null;
              t !== void 0 && (ve(t), a = "" + t), Ke(r) && (ve(r.key), a = "" + r.key), ze(r) && (E = r.ref, He(r, o));
              for (u in r)
                N.call(r, u) && !Ge.hasOwnProperty(u) && (i[u] = r[u]);
              if (e && e.defaultProps) {
                var l = e.defaultProps;
                for (u in l)
                  i[u] === void 0 && (i[u] = l[u]);
              }
              if (a || E) {
                var f = typeof e == "function" ? e.displayName || e.name || "Unknown" : e;
                a && Xe(i, f), E && Ze(i, f);
              }
              return Qe(e, a, E, o, n, F.current, i);
            }
          }
          var G = x.ReactCurrentOwner, me = x.ReactDebugCurrentFrame;
          function j(e) {
            if (e) {
              var r = e._owner, t = L(e.type, e._source, r ? r.type : null);
              me.setExtraStackFrame(t);
            } else
              me.setExtraStackFrame(null);
          }
          var z;
          z = false;
          function K(e) {
            return typeof e == "object" && e !== null && e.$$typeof === d;
          }
          function be() {
            {
              if (G.current) {
                var e = w(G.current.type);
                if (e)
                  return `

Check the render method of \`` + e + "`.";
              }
              return "";
            }
          }
          function rr(e) {
            {
              if (e !== void 0) {
                var r = e.fileName.replace(/^.*[\\\/]/, ""), t = e.lineNumber;
                return `

Check your code at ` + r + ":" + t + ".";
              }
              return "";
            }
          }
          var Ee = {};
          function tr(e) {
            {
              var r = be();
              if (!r) {
                var t = typeof e == "string" ? e : e.displayName || e.name;
                t && (r = `

Check the top-level render call using <` + t + ">.");
              }
              return r;
            }
          }
          function he(e, r) {
            {
              if (!e._store || e._store.validated || e.key != null)
                return;
              e._store.validated = true;
              var t = tr(r);
              if (Ee[t])
                return;
              Ee[t] = true;
              var n = "";
              e && e._owner && e._owner !== G.current && (n = " It was passed a child from " + w(e._owner.type) + "."), j(e), b('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', t, n), j(null);
            }
          }
          function Re(e, r) {
            {
              if (typeof e != "object")
                return;
              if (B(e))
                for (var t = 0; t < e.length; t++) {
                  var n = e[t];
                  K(n) && he(n, r);
                }
              else if (K(e))
                e._store && (e._store.validated = true);
              else if (e) {
                var o = xe(e);
                if (typeof o == "function" && o !== e.entries)
                  for (var u = o.call(e), i; !(i = u.next()).done; )
                    K(i.value) && he(i.value, r);
              }
            }
          }
          function nr(e) {
            {
              var r = e.type;
              if (r == null || typeof r == "string")
                return;
              var t;
              if (typeof r == "function")
                t = r.propTypes;
              else if (typeof r == "object" && (r.$$typeof === s || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              r.$$typeof === C))
                t = r.propTypes;
              else
                return;
              if (t) {
                var n = w(r);
                Me(t, e.props, "prop", n, e);
              } else if (r.PropTypes !== void 0 && !z) {
                z = true;
                var o = w(r);
                b("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", o || "Unknown");
              }
              typeof r.getDefaultProps == "function" && !r.getDefaultProps.isReactClassApproved && b("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
          function ar(e) {
            {
              for (var r = Object.keys(e.props), t = 0; t < r.length; t++) {
                var n = r[t];
                if (n !== "children" && n !== "key") {
                  j(e), b("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", n), j(null);
                  break;
                }
              }
              e.ref !== null && (j(e), b("Invalid attribute `ref` supplied to `React.Fragment`."), j(null));
            }
          }
          function ye(e, r, t, n, o, u) {
            {
              var i = $e(e);
              if (!i) {
                var a = "";
                (e === void 0 || typeof e == "object" && e !== null && Object.keys(e).length === 0) && (a += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var E = rr(o);
                E ? a += E : a += be();
                var l;
                e === null ? l = "null" : B(e) ? l = "array" : e !== void 0 && e.$$typeof === d ? (l = "<" + (w(e.type) || "Unknown") + " />", a = " Did you accidentally export a JSX literal instead of a component?") : l = typeof e, b("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", l, a);
              }
              var f = er(e, r, t, o, u);
              if (f == null)
                return f;
              if (i) {
                var y = r.children;
                if (y !== void 0)
                  if (n) {
                    if (B(y)) {
                      for (var k = 0; k < y.length; k++)
                        Re(y[k], e);
                      Object.freeze && Object.freeze(y);
                    } else
                      b("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  } else
                    Re(y, e);
              }
              return e === _ ? ar(f) : nr(f), f;
            }
          }
          function ir(e, r, t) {
            return ye(e, r, t, true);
          }
          function or(e, r, t) {
            return ye(e, r, t, false);
          }
          var ur = or, sr = ir;
          I.Fragment = _, I.jsx = ur, I.jsxs = sr;
        }()), I;
      }
      (function(g) {
        false ? g.exports = vr() : g.exports = pr();
      })(dr);
      const gr = H.jsx, mr = function(d) {
        const {
          calLink: h,
          calOrigin: _,
          config: R,
          initConfig: T = {},
          embedJsUrl: c,
          ...v
        } = d;
        if (!h)
          throw new Error("calLink is required");
        const s = React.useRef(false), m = cr(c), p = React.useRef(null);
        return React.useEffect(() => {
          if (!m || s.current)
            return;
          s.current = true;
          const C = p.current;
          m("init", {
            ...T,
            origin: _
          }), m("inline", {
            elementOrSelector: C,
            calLink: h,
            config: R
          });
        }, [m, h, R, _, T]), m ? gr("div", {
          ref: p,
          ...v
        }) : null;
      }, Er = mr, hr = () => new Promise(function g(d) {
        X();
        const h = window.Cal;
        if (!h) {
          setTimeout(() => {
            g(d);
          }, 50);
          return;
        }
        d(h);
      });
      var DEFAULT_ACCENT_COLOR = "#004ac2";
      var useAccentColor = function() {
        var _a = React.useState(DEFAULT_ACCENT_COLOR), accentColor = _a[0], setAccentColor = _a[1];
        React.useEffect(function() {
          var newAccentColor = window.getComputedStyle(document.documentElement).getPropertyValue("--awell-accent-color");
          if (newAccentColor) {
            setAccentColor(newAccentColor);
          }
        }, []);
        return {
          accentColor
        };
      };
      var CalDotComScheduling = function(_a) {
        var calLink = _a.calLink, _b = _a.hideEventTypeDetails, hideEventTypeDetails = _b === void 0 ? false : _b, onBookingSuccessful = _a.onBookingSuccessful, metadata = _a.metadata;
        var accentColor = useAccentColor().accentColor;
        var initComponent = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var cal;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, hr()];
                case 1:
                  cal = _a2.sent();
                  if (cal) {
                    cal("ui", {
                      theme: "light",
                      styles: { branding: { brandColor: accentColor } },
                      hideEventTypeDetails
                    });
                    cal("on", {
                      action: "bookingSuccessful",
                      callback: function(e) {
                        var data = e.detail.data;
                        var confirmed = data.confirmed, eventType = data.eventType, date = data.date, booking = data.booking;
                        onBookingSuccessful({
                          confirmed,
                          eventType,
                          date,
                          booking
                        });
                      }
                    });
                  }
                  return [2];
              }
            });
          });
        };
        React.useEffect(function() {
          initComponent();
        }, []);
        var metadataString = "";
        if (metadata) {
          metadataString = Object.entries(metadata).map(function(_a2) {
            var key = _a2[0], value = _a2[1];
            return "metadata[".concat(key, "]=").concat(value);
          }).join("&");
        }
        var metadataSeparator = calLink.includes("?") ? "&" : "?";
        var composedCalLink = "".concat(calLink).concat(metadataString ? "".concat(metadataSeparator).concat(metadataString) : "");
        return jsxRuntime.exports.jsx(Er, { calLink: composedCalLink, style: { width: "100%", height: "100%", overflow: "hidden" } });
      };
      var classes$u = { "input_wrapper": "awell__checkboxButton_input_wrapper", "checkbox_wrapper": "awell__checkboxButton_checkbox_wrapper", "label_wrapper": "awell__checkboxButton_label_wrapper" };
      var CheckboxButton = function(_a) {
        var onChange = _a.onChange, label = _a.label, name = _a.name, props = __rest(_a, ["onChange", "label", "name"]);
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$u.input_wrapper }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$u.checkbox_wrapper }, { children: jsxRuntime.exports.jsx("input", __assign({}, props, { name, type: "checkbox", onChange })) })), jsxRuntime.exports.jsx("div", __assign({ className: classes$u.label_wrapper }, { children: jsxRuntime.exports.jsx("label", __assign({ htmlFor: props.id, id: "awell__question_checkbox" }, { children: label })) }))] }));
      };
      var classes$t = { "awell_circular_spinner": "awell__spinner_awell_circular_spinner", "size-base": "awell__spinner_size-base", "size-sm": "awell__spinner_size-sm", "awell_horizontal_spinner": "awell__spinner_awell_horizontal_spinner", "awell_horizontal_spinner1": "awell__spinner_awell_horizontal_spinner1", "awell_horizontal_spinner2": "awell__spinner_awell_horizontal_spinner2", "awell_horizontal_spinner3": "awell__spinner_awell_horizontal_spinner3" };
      var CircularSpinner = function(_a) {
        var _b = _a.size, size2 = _b === void 0 ? "base" : _b;
        return jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$t.awell_circular_spinner, " ").concat(classes$t["size-".concat(size2)]) }, { children: [jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {})] }));
      };
      var HorizontalSpinner = function() {
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$t.awell_horizontal_spinner }, { children: [jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx("div", {})] }));
      };
      var entry_nostyle = {};
      var DatePicker$1 = {};
      var propTypes$1 = { exports: {} };
      var reactIs = { exports: {} };
      var reactIs_production_min = {};
      var hasRequiredReactIs_production_min;
      function requireReactIs_production_min() {
        if (hasRequiredReactIs_production_min) return reactIs_production_min;
        hasRequiredReactIs_production_min = 1;
        var b = "function" === typeof Symbol && Symbol.for, c = b ? Symbol.for("react.element") : 60103, d = b ? Symbol.for("react.portal") : 60106, e = b ? Symbol.for("react.fragment") : 60107, f = b ? Symbol.for("react.strict_mode") : 60108, g = b ? Symbol.for("react.profiler") : 60114, h = b ? Symbol.for("react.provider") : 60109, k = b ? Symbol.for("react.context") : 60110, l = b ? Symbol.for("react.async_mode") : 60111, m = b ? Symbol.for("react.concurrent_mode") : 60111, n = b ? Symbol.for("react.forward_ref") : 60112, p = b ? Symbol.for("react.suspense") : 60113, q = b ? Symbol.for("react.suspense_list") : 60120, r = b ? Symbol.for("react.memo") : 60115, t = b ? Symbol.for("react.lazy") : 60116, v = b ? Symbol.for("react.block") : 60121, w = b ? Symbol.for("react.fundamental") : 60117, x = b ? Symbol.for("react.responder") : 60118, y = b ? Symbol.for("react.scope") : 60119;
        function z(a) {
          if ("object" === typeof a && null !== a) {
            var u = a.$$typeof;
            switch (u) {
              case c:
                switch (a = a.type, a) {
                  case l:
                  case m:
                  case e:
                  case g:
                  case f:
                  case p:
                    return a;
                  default:
                    switch (a = a && a.$$typeof, a) {
                      case k:
                      case n:
                      case t:
                      case r:
                      case h:
                        return a;
                      default:
                        return u;
                    }
                }
              case d:
                return u;
            }
          }
        }
        function A2(a) {
          return z(a) === m;
        }
        reactIs_production_min.AsyncMode = l;
        reactIs_production_min.ConcurrentMode = m;
        reactIs_production_min.ContextConsumer = k;
        reactIs_production_min.ContextProvider = h;
        reactIs_production_min.Element = c;
        reactIs_production_min.ForwardRef = n;
        reactIs_production_min.Fragment = e;
        reactIs_production_min.Lazy = t;
        reactIs_production_min.Memo = r;
        reactIs_production_min.Portal = d;
        reactIs_production_min.Profiler = g;
        reactIs_production_min.StrictMode = f;
        reactIs_production_min.Suspense = p;
        reactIs_production_min.isAsyncMode = function(a) {
          return A2(a) || z(a) === l;
        };
        reactIs_production_min.isConcurrentMode = A2;
        reactIs_production_min.isContextConsumer = function(a) {
          return z(a) === k;
        };
        reactIs_production_min.isContextProvider = function(a) {
          return z(a) === h;
        };
        reactIs_production_min.isElement = function(a) {
          return "object" === typeof a && null !== a && a.$$typeof === c;
        };
        reactIs_production_min.isForwardRef = function(a) {
          return z(a) === n;
        };
        reactIs_production_min.isFragment = function(a) {
          return z(a) === e;
        };
        reactIs_production_min.isLazy = function(a) {
          return z(a) === t;
        };
        reactIs_production_min.isMemo = function(a) {
          return z(a) === r;
        };
        reactIs_production_min.isPortal = function(a) {
          return z(a) === d;
        };
        reactIs_production_min.isProfiler = function(a) {
          return z(a) === g;
        };
        reactIs_production_min.isStrictMode = function(a) {
          return z(a) === f;
        };
        reactIs_production_min.isSuspense = function(a) {
          return z(a) === p;
        };
        reactIs_production_min.isValidElementType = function(a) {
          return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
        };
        reactIs_production_min.typeOf = z;
        return reactIs_production_min;
      }
      var reactIs_development = {};
      var hasRequiredReactIs_development;
      function requireReactIs_development() {
        if (hasRequiredReactIs_development) return reactIs_development;
        hasRequiredReactIs_development = 1;
        if (true) {
          (function() {
            var hasSymbol = typeof Symbol === "function" && Symbol.for;
            var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
            var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
            var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
            var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
            var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
            var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
            var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
            var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
            var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
            var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
            var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
            var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
            var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
            var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
            var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
            var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
            var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
            var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
            function isValidElementType(type) {
              return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
              type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
            }
            function typeOf(object) {
              if (typeof object === "object" && object !== null) {
                var $$typeof = object.$$typeof;
                switch ($$typeof) {
                  case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch (type) {
                      case REACT_ASYNC_MODE_TYPE:
                      case REACT_CONCURRENT_MODE_TYPE:
                      case REACT_FRAGMENT_TYPE:
                      case REACT_PROFILER_TYPE:
                      case REACT_STRICT_MODE_TYPE:
                      case REACT_SUSPENSE_TYPE:
                        return type;
                      default:
                        var $$typeofType = type && type.$$typeof;
                        switch ($$typeofType) {
                          case REACT_CONTEXT_TYPE:
                          case REACT_FORWARD_REF_TYPE:
                          case REACT_LAZY_TYPE:
                          case REACT_MEMO_TYPE:
                          case REACT_PROVIDER_TYPE:
                            return $$typeofType;
                          default:
                            return $$typeof;
                        }
                    }
                  case REACT_PORTAL_TYPE:
                    return $$typeof;
                }
              }
              return void 0;
            }
            var AsyncMode = REACT_ASYNC_MODE_TYPE;
            var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
            var ContextConsumer = REACT_CONTEXT_TYPE;
            var ContextProvider = REACT_PROVIDER_TYPE;
            var Element2 = REACT_ELEMENT_TYPE;
            var ForwardRef2 = REACT_FORWARD_REF_TYPE;
            var Fragment = REACT_FRAGMENT_TYPE;
            var Lazy = REACT_LAZY_TYPE;
            var Memo = REACT_MEMO_TYPE;
            var Portal = REACT_PORTAL_TYPE;
            var Profiler = REACT_PROFILER_TYPE;
            var StrictMode = REACT_STRICT_MODE_TYPE;
            var Suspense = REACT_SUSPENSE_TYPE;
            var hasWarnedAboutDeprecatedIsAsyncMode = false;
            function isAsyncMode(object) {
              {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                  hasWarnedAboutDeprecatedIsAsyncMode = true;
                  console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
                }
              }
              return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
            }
            function isConcurrentMode(object) {
              return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
            }
            function isContextConsumer(object) {
              return typeOf(object) === REACT_CONTEXT_TYPE;
            }
            function isContextProvider(object) {
              return typeOf(object) === REACT_PROVIDER_TYPE;
            }
            function isElement2(object) {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
            function isForwardRef(object) {
              return typeOf(object) === REACT_FORWARD_REF_TYPE;
            }
            function isFragment(object) {
              return typeOf(object) === REACT_FRAGMENT_TYPE;
            }
            function isLazy(object) {
              return typeOf(object) === REACT_LAZY_TYPE;
            }
            function isMemo(object) {
              return typeOf(object) === REACT_MEMO_TYPE;
            }
            function isPortal(object) {
              return typeOf(object) === REACT_PORTAL_TYPE;
            }
            function isProfiler(object) {
              return typeOf(object) === REACT_PROFILER_TYPE;
            }
            function isStrictMode(object) {
              return typeOf(object) === REACT_STRICT_MODE_TYPE;
            }
            function isSuspense(object) {
              return typeOf(object) === REACT_SUSPENSE_TYPE;
            }
            reactIs_development.AsyncMode = AsyncMode;
            reactIs_development.ConcurrentMode = ConcurrentMode;
            reactIs_development.ContextConsumer = ContextConsumer;
            reactIs_development.ContextProvider = ContextProvider;
            reactIs_development.Element = Element2;
            reactIs_development.ForwardRef = ForwardRef2;
            reactIs_development.Fragment = Fragment;
            reactIs_development.Lazy = Lazy;
            reactIs_development.Memo = Memo;
            reactIs_development.Portal = Portal;
            reactIs_development.Profiler = Profiler;
            reactIs_development.StrictMode = StrictMode;
            reactIs_development.Suspense = Suspense;
            reactIs_development.isAsyncMode = isAsyncMode;
            reactIs_development.isConcurrentMode = isConcurrentMode;
            reactIs_development.isContextConsumer = isContextConsumer;
            reactIs_development.isContextProvider = isContextProvider;
            reactIs_development.isElement = isElement2;
            reactIs_development.isForwardRef = isForwardRef;
            reactIs_development.isFragment = isFragment;
            reactIs_development.isLazy = isLazy;
            reactIs_development.isMemo = isMemo;
            reactIs_development.isPortal = isPortal;
            reactIs_development.isProfiler = isProfiler;
            reactIs_development.isStrictMode = isStrictMode;
            reactIs_development.isSuspense = isSuspense;
            reactIs_development.isValidElementType = isValidElementType;
            reactIs_development.typeOf = typeOf;
          })();
        }
        return reactIs_development;
      }
      var hasRequiredReactIs;
      function requireReactIs() {
        if (hasRequiredReactIs) return reactIs.exports;
        hasRequiredReactIs = 1;
        (function(module2) {
          if (false) {
            module2.exports = requireReactIs_production_min();
          } else {
            module2.exports = requireReactIs_development();
          }
        })(reactIs);
        return reactIs.exports;
      }
      function _extends$e() {
        _extends$e = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$e.apply(this, arguments);
      }
      var objectAssign;
      var hasRequiredObjectAssign;
      function requireObjectAssign() {
        if (hasRequiredObjectAssign) return objectAssign;
        hasRequiredObjectAssign = 1;
        var getOwnPropertySymbols = Object.getOwnPropertySymbols;
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var propIsEnumerable = Object.prototype.propertyIsEnumerable;
        function toObject(val) {
          if (val === null || val === void 0) {
            throw new TypeError("Object.assign cannot be called with null or undefined");
          }
          return Object(val);
        }
        function shouldUseNative() {
          try {
            if (!Object.assign) {
              return false;
            }
            var test1 = new String("abc");
            test1[5] = "de";
            if (Object.getOwnPropertyNames(test1)[0] === "5") {
              return false;
            }
            var test2 = {};
            for (var i = 0; i < 10; i++) {
              test2["_" + String.fromCharCode(i)] = i;
            }
            var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
              return test2[n];
            });
            if (order2.join("") !== "0123456789") {
              return false;
            }
            var test3 = {};
            "abcdefghijklmnopqrst".split("").forEach(function(letter) {
              test3[letter] = letter;
            });
            if (Object.keys(_extends$e({}, test3)).join("") !== "abcdefghijklmnopqrst") {
              return false;
            }
            return true;
          } catch (err) {
            return false;
          }
        }
        objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
          var from;
          var to = toObject(target);
          var symbols;
          for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
              if (hasOwnProperty2.call(from, key)) {
                to[key] = from[key];
              }
            }
            if (getOwnPropertySymbols) {
              symbols = getOwnPropertySymbols(from);
              for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                  to[symbols[i]] = from[symbols[i]];
                }
              }
            }
          }
          return to;
        };
        return objectAssign;
      }
      var ReactPropTypesSecret_1;
      var hasRequiredReactPropTypesSecret;
      function requireReactPropTypesSecret() {
        if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
        hasRequiredReactPropTypesSecret = 1;
        var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        ReactPropTypesSecret_1 = ReactPropTypesSecret;
        return ReactPropTypesSecret_1;
      }
      var has;
      var hasRequiredHas;
      function requireHas() {
        if (hasRequiredHas) return has;
        hasRequiredHas = 1;
        has = Function.call.bind(Object.prototype.hasOwnProperty);
        return has;
      }
      var checkPropTypes_1;
      var hasRequiredCheckPropTypes;
      function requireCheckPropTypes() {
        if (hasRequiredCheckPropTypes) return checkPropTypes_1;
        hasRequiredCheckPropTypes = 1;
        var printWarning = function() {
        };
        if (true) {
          var ReactPropTypesSecret = requireReactPropTypesSecret();
          var loggedTypeFailures = {};
          var has2 = requireHas();
          printWarning = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
              console.error(message);
            }
            try {
              throw new Error(message);
            } catch (x) {
            }
          };
        }
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
          if (true) {
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error(
                      (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                    );
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                } catch (ex) {
                  error = ex;
                }
                if (error && !(error instanceof Error)) {
                  printWarning(
                    (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                  );
                }
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                  loggedTypeFailures[error.message] = true;
                  var stack = getStack ? getStack() : "";
                  printWarning(
                    "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                  );
                }
              }
            }
          }
        }
        checkPropTypes.resetWarningCache = function() {
          if (true) {
            loggedTypeFailures = {};
          }
        };
        checkPropTypes_1 = checkPropTypes;
        return checkPropTypes_1;
      }
      var factoryWithTypeCheckers;
      var hasRequiredFactoryWithTypeCheckers;
      function requireFactoryWithTypeCheckers() {
        if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
        hasRequiredFactoryWithTypeCheckers = 1;
        var ReactIs2 = requireReactIs();
        var assign = requireObjectAssign();
        var ReactPropTypesSecret = requireReactPropTypesSecret();
        var has2 = requireHas();
        var checkPropTypes = requireCheckPropTypes();
        var printWarning = function() {
        };
        if (true) {
          printWarning = function(text) {
            var message = "Warning: " + text;
            if (typeof console !== "undefined") {
              console.error(message);
            }
            try {
              throw new Error(message);
            } catch (x) {
            }
          };
        }
        function emptyFunctionThatReturnsNull() {
          return null;
        }
        factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
          var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") {
              return iteratorFn;
            }
          }
          var ANONYMOUS = "<<anonymous>>";
          var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bigint: createPrimitiveTypeChecker("bigint"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),
            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            elementType: createElementTypeTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker,
            exact: createStrictShapeTypeChecker
          };
          function is(x, y) {
            if (x === y) {
              return x !== 0 || 1 / x === 1 / y;
            } else {
              return x !== x && y !== y;
            }
          }
          function PropTypeError(message, data) {
            this.message = message;
            this.data = data && typeof data === "object" ? data : {};
            this.stack = "";
          }
          PropTypeError.prototype = Error.prototype;
          function createChainableTypeChecker(validate) {
            if (true) {
              var manualPropTypeCallCache = {};
              var manualPropTypeWarningCount = 0;
            }
            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;
              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess2) {
                  var err = new Error(
                    "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                  );
                  err.name = "Invariant Violation";
                  throw err;
                } else if (typeof console !== "undefined") {
                  var cacheKey = componentName + ":" + propName;
                  if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                  manualPropTypeWarningCount < 3) {
                    printWarning(
                      "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }
              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null) {
                    return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                  }
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                }
                return null;
              } else {
                return validate(props, propName, componentName, location, propFullName);
              }
            }
            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);
            return chainedCheckType;
          }
          function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== expectedType) {
                var preciseType = getPreciseType(propValue);
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                  { expectedType }
                );
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunctionThatReturnsNull);
          }
          function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
              }
              var propValue = props[propName];
              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
              }
              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createElementTypeTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!ReactIs2.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              if (true) {
                if (arguments.length > 1) {
                  printWarning(
                    "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                  );
                } else {
                  printWarning("Invalid argument supplied to oneOf, expected an array.");
                }
              }
              return emptyFunctionThatReturnsNull;
            }
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                  return null;
                }
              }
              var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === "symbol") {
                  return String(value);
                }
                return value;
              });
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
            }
            return createChainableTypeChecker(validate);
          }
          function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
              }
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object") {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
              }
              for (var key in propValue) {
                if (has2(propValue, key)) {
                  var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error instanceof Error) {
                    return error;
                  }
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
              return emptyFunctionThatReturnsNull;
            }
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];
              if (typeof checker !== "function") {
                printWarning(
                  "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
                );
                return emptyFunctionThatReturnsNull;
              }
            }
            function validate(props, propName, componentName, location, propFullName) {
              var expectedTypes = [];
              for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                var checker2 = arrayOfTypeCheckers[i2];
                var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) {
                  return null;
                }
                if (checkerResult.data && has2(checkerResult.data, "expectedType")) {
                  expectedTypes.push(checkerResult.data.expectedType);
                }
              }
              var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
            }
            return createChainableTypeChecker(validate);
          }
          function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              if (!isNode(props[propName])) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function invalidValidatorError(componentName, location, propFullName, key, type) {
            return new PropTypeError(
              (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
            );
          }
          function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object") {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
              }
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (typeof checker !== "function") {
                  return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createStrictShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object") {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
              }
              var allKeys = assign({}, props[propName], shapeTypes);
              for (var key in allKeys) {
                var checker = shapeTypes[key];
                if (has2(shapeTypes, key) && typeof checker !== "function") {
                  return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                if (!checker) {
                  return new PropTypeError(
                    "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                  );
                }
                var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function isNode(propValue) {
            switch (typeof propValue) {
              case "number":
              case "string":
              case "undefined":
                return true;
              case "boolean":
                return !propValue;
              case "object":
                if (Array.isArray(propValue)) {
                  return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                  return true;
                }
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                  var iterator = iteratorFn.call(propValue);
                  var step;
                  if (iteratorFn !== propValue.entries) {
                    while (!(step = iterator.next()).done) {
                      if (!isNode(step.value)) {
                        return false;
                      }
                    }
                  } else {
                    while (!(step = iterator.next()).done) {
                      var entry = step.value;
                      if (entry) {
                        if (!isNode(entry[1])) {
                          return false;
                        }
                      }
                    }
                  }
                } else {
                  return false;
                }
                return true;
              default:
                return false;
            }
          }
          function isSymbol(propType, propValue) {
            if (propType === "symbol") {
              return true;
            }
            if (!propValue) {
              return false;
            }
            if (propValue["@@toStringTag"] === "Symbol") {
              return true;
            }
            if (typeof Symbol === "function" && propValue instanceof Symbol) {
              return true;
            }
            return false;
          }
          function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
              return "array";
            }
            if (propValue instanceof RegExp) {
              return "object";
            }
            if (isSymbol(propType, propValue)) {
              return "symbol";
            }
            return propType;
          }
          function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) {
              return "" + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === "object") {
              if (propValue instanceof Date) {
                return "date";
              } else if (propValue instanceof RegExp) {
                return "regexp";
              }
            }
            return propType;
          }
          function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
              case "array":
              case "object":
                return "an " + type;
              case "boolean":
              case "date":
              case "regexp":
                return "a " + type;
              default:
                return type;
            }
          }
          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
              return ANONYMOUS;
            }
            return propValue.constructor.name;
          }
          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
        return factoryWithTypeCheckers;
      }
      var factoryWithThrowingShims;
      var hasRequiredFactoryWithThrowingShims;
      function requireFactoryWithThrowingShims() {
        if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
        hasRequiredFactoryWithThrowingShims = 1;
        var ReactPropTypesSecret = requireReactPropTypesSecret();
        function emptyFunction() {
        }
        function emptyFunctionWithReset() {
        }
        emptyFunctionWithReset.resetWarningCache = emptyFunction;
        factoryWithThrowingShims = function() {
          function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret) {
              return;
            }
            var err = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
            );
            err.name = "Invariant Violation";
            throw err;
          }
          shim.isRequired = shim;
          function getShim() {
            return shim;
          }
          var ReactPropTypes = {
            array: shim,
            bigint: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            elementType: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim,
            exact: getShim,
            checkPropTypes: emptyFunctionWithReset,
            resetWarningCache: emptyFunction
          };
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
        return factoryWithThrowingShims;
      }
      if (true) {
        var ReactIs = requireReactIs();
        var throwOnDirectAccess = true;
        propTypes$1.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        propTypes$1.exports = requireFactoryWithThrowingShims()();
      }
      var clipboardEvents = ["onCopy", "onCut", "onPaste"];
      var compositionEvents = ["onCompositionEnd", "onCompositionStart", "onCompositionUpdate"];
      var keyboardEvents = ["onKeyDown", "onKeyPress", "onKeyUp"];
      var focusEvents = ["onFocus", "onBlur"];
      var formEvents = ["onChange", "onInput", "onInvalid", "onReset", "onSubmit"];
      var genericEvents = ["onError", "onLoad"];
      var mouseEvents = ["onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp"];
      var pointerEvents = ["onPointerDown", "onPointerMove", "onPointerUp", "onPointerCancel", "onGotPointerCapture", "onLostPointerCapture", "onPointerEnter", "onPointerLeave", "onPointerOver", "onPointerOut"];
      var selectionEvents = ["onSelect"];
      var touchEvents = ["onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart"];
      var uiEvents = ["onScroll"];
      var wheelEvents = ["onWheel"];
      var mediaEvents = ["onAbort", "onCanPlay", "onCanPlayThrough", "onDurationChange", "onEmptied", "onEncrypted", "onEnded", "onError", "onLoadedData", "onLoadedMetadata", "onLoadStart", "onPause", "onPlay", "onPlaying", "onProgress", "onRateChange", "onSeeked", "onSeeking", "onStalled", "onSuspend", "onTimeUpdate", "onVolumeChange", "onWaiting"];
      var imageEvents = ["onLoad", "onError"];
      var animationEvents = ["onAnimationStart", "onAnimationEnd", "onAnimationIteration"];
      var transitionEvents = ["onTransitionEnd"];
      var otherEvents = ["onToggle"];
      var allEvents = [].concat(clipboardEvents, compositionEvents, keyboardEvents, focusEvents, formEvents, genericEvents, mouseEvents, pointerEvents, selectionEvents, touchEvents, uiEvents, wheelEvents, mediaEvents, imageEvents, animationEvents, transitionEvents, otherEvents);
      var makeEventProps = function makeEventProps2(props, getArgs) {
        var eventProps = {};
        allEvents.forEach(function(eventName) {
          if (!(eventName in props)) {
            return;
          }
          if (!getArgs) {
            eventProps[eventName] = props[eventName];
            return;
          }
          eventProps[eventName] = function(event) {
            return props[eventName](event, getArgs(eventName));
          };
        });
        return eventProps;
      };
      var esm$6 = Object.freeze({
        __proto__: null,
        clipboardEvents,
        compositionEvents,
        keyboardEvents,
        focusEvents,
        formEvents,
        genericEvents,
        mouseEvents,
        pointerEvents,
        selectionEvents,
        touchEvents,
        uiEvents,
        wheelEvents,
        mediaEvents,
        imageEvents,
        animationEvents,
        transitionEvents,
        otherEvents,
        allEvents,
        "default": makeEventProps
      });
      var require$$2$1 = getAugmentedNamespace(esm$6);
      function mergeClassNames() {
        return Array.prototype.slice.call(arguments).reduce(function(classList, arg) {
          return classList.concat(arg);
        }, []).filter(function(arg) {
          return typeof arg === "string";
        }).join(" ");
      }
      var esm$5 = Object.freeze({
        __proto__: null,
        "default": mergeClassNames
      });
      var require$$3$1 = getAugmentedNamespace(esm$5);
      var FUNC_ERROR_TEXT = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var funcTag = "[object Function]", genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function getValue$3(object, key) {
        return object == null ? void 0 : object[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e) {
          }
        }
        return result;
      }
      var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var splice = arrayProto.splice;
      var Map$1 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index = assocIndexOf(data, key);
        return index < 0 ? void 0 : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map$1 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseIsNative(value) {
        if (!isObject$1(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction$1(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue$3(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function memoize(func, resolver2) {
        if (typeof func != "function" || resolver2 && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result);
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isFunction$1(value) {
        var tag = isObject$1(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject$1(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      var lodash_memoize = memoize;
      var memoize$1 = lodash_memoize;
      function resolver(options) {
        return JSON.stringify(options);
      }
      function uniqDefined(arr) {
        return arr.filter(function(el, index) {
          return el && arr.indexOf(el) === index;
        });
      }
      function normalizeLocales(arr) {
        return arr.map(function(el) {
          if (!el || el.indexOf("-") === -1 || el.toLowerCase() !== el) {
            return el;
          }
          var splitEl = el.split("-");
          return splitEl[0] + "-" + splitEl[1].toUpperCase();
        });
      }
      function getUserLocalesInternal(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$useFallbackLocal = _ref.useFallbackLocale, useFallbackLocale = _ref$useFallbackLocal === void 0 ? true : _ref$useFallbackLocal, _ref$fallbackLocale = _ref.fallbackLocale, fallbackLocale = _ref$fallbackLocale === void 0 ? "en-US" : _ref$fallbackLocale;
        var languageList = [];
        if (typeof window !== "undefined") {
          var _window = window, navigator2 = _window.navigator;
          languageList = languageList.concat(navigator2.languages, navigator2.language, navigator2.userLanguage, navigator2.browserLanguage, navigator2.systemLanguage);
        }
        if (useFallbackLocale) {
          languageList.push(fallbackLocale);
        }
        return normalizeLocales(uniqDefined(languageList));
      }
      var getUserLocales = memoize$1(getUserLocalesInternal, resolver);
      function getUserLocaleInternal(options) {
        return getUserLocales(options)[0] || null;
      }
      var getUserLocale = memoize$1(getUserLocaleInternal, resolver);
      var esm$4 = Object.freeze({
        __proto__: null,
        getUserLocales,
        getUserLocale,
        "default": getUserLocale
      });
      function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var previousPeriod = getPeriod(date) + offset;
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function makeGetEnd(getBeginOfNextPeriod) {
        return function makeGetEndInternal(date) {
          return new Date(getBeginOfNextPeriod(date).getTime() - 1);
        };
      }
      function makeGetRange(functions) {
        return function makeGetRangeInternal(date) {
          return functions.map(function(fn) {
            return fn(date);
          });
        };
      }
      function getYear(date) {
        if (date instanceof Date) {
          return date.getFullYear();
        }
        if (typeof date === "number") {
          return date;
        }
        var year = parseInt(date, 10);
        if (typeof date === "string" && !isNaN(year)) {
          return year;
        }
        throw new Error("Failed to get year from date: ".concat(date, "."));
      }
      function getMonth(date) {
        if (date instanceof Date) {
          return date.getMonth();
        }
        throw new Error("Failed to get month from date: ".concat(date, "."));
      }
      function getMonthHuman(date) {
        if (date instanceof Date) {
          return date.getMonth() + 1;
        }
        throw new Error("Failed to get human-readable month from date: ".concat(date, "."));
      }
      function getDate(date) {
        if (date instanceof Date) {
          return date.getDate();
        }
        throw new Error("Failed to get year from date: ".concat(date, "."));
      }
      function getHours(date) {
        if (date instanceof Date) {
          return date.getHours();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var hoursString = datePieces[0];
            var hours = parseInt(hoursString, 10);
            if (!isNaN(hours)) {
              return hours;
            }
          }
        }
        throw new Error("Failed to get hours from date: ".concat(date, "."));
      }
      function getMinutes(date) {
        if (date instanceof Date) {
          return date.getMinutes();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var minutesString = datePieces[1] || 0;
            var minutes = parseInt(minutesString, 10);
            if (!isNaN(minutes)) {
              return minutes;
            }
          }
        }
        throw new Error("Failed to get minutes from date: ".concat(date, "."));
      }
      function getSeconds(date) {
        if (date instanceof Date) {
          return date.getSeconds();
        }
        if (typeof date === "string") {
          var datePieces = date.split(":");
          if (datePieces.length >= 2) {
            var secondsString = datePieces[2] || 0;
            var seconds = parseInt(secondsString, 10);
            if (!isNaN(seconds)) {
              return seconds;
            }
          }
        }
        throw new Error("Failed to get seconds from date: ".concat(date, "."));
      }
      function getCenturyStart(date) {
        var year = getYear(date);
        var centuryStartYear = year + (-year + 1) % 100;
        var centuryStartDate = /* @__PURE__ */ new Date();
        centuryStartDate.setFullYear(centuryStartYear, 0, 1);
        centuryStartDate.setHours(0, 0, 0, 0);
        return centuryStartDate;
      }
      var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);
      var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);
      var getCenturyEnd = makeGetEnd(getNextCenturyStart);
      var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, -100);
      var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, 100);
      var getCenturyRange = makeGetRange([getCenturyStart, getCenturyEnd]);
      function getDecadeStart(date) {
        var year = getYear(date);
        var decadeStartYear = year + (-year + 1) % 10;
        var decadeStartDate = /* @__PURE__ */ new Date();
        decadeStartDate.setFullYear(decadeStartYear, 0, 1);
        decadeStartDate.setHours(0, 0, 0, 0);
        return decadeStartDate;
      }
      var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);
      var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);
      var getDecadeEnd = makeGetEnd(getNextDecadeStart);
      var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, -10);
      var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, 10);
      var getDecadeRange = makeGetRange([getDecadeStart, getDecadeEnd]);
      function getYearStart(date) {
        var year = getYear(date);
        var yearStartDate = /* @__PURE__ */ new Date();
        yearStartDate.setFullYear(year, 0, 1);
        yearStartDate.setHours(0, 0, 0, 0);
        return yearStartDate;
      }
      var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);
      var getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);
      var getYearEnd = makeGetEnd(getNextYearStart);
      var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, -1);
      var getNextYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, 1);
      var getYearRange = makeGetRange([getYearStart, getYearEnd]);
      function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborMonthInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var year = getYear(date);
          var month = getMonth(date) + offset;
          var previousPeriod = /* @__PURE__ */ new Date();
          previousPeriod.setFullYear(year, month, 1);
          previousPeriod.setHours(0, 0, 0, 0);
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function getMonthStart(date) {
        var year = getYear(date);
        var month = getMonth(date);
        var monthStartDate = /* @__PURE__ */ new Date();
        monthStartDate.setFullYear(year, month, 1);
        monthStartDate.setHours(0, 0, 0, 0);
        return monthStartDate;
      }
      var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
      var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
      var getMonthEnd = makeGetEnd(getNextMonthStart);
      var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);
      var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);
      var getMonthRange = makeGetRange([getMonthStart, getMonthEnd]);
      function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
        return function makeGetEdgeOfNeighborDayInternal(date) {
          var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOffset;
          var year = getYear(date);
          var month = getMonth(date);
          var day = getDate(date) + offset;
          var previousPeriod = /* @__PURE__ */ new Date();
          previousPeriod.setFullYear(year, month, day);
          previousPeriod.setHours(0, 0, 0, 0);
          return getEdgeOfPeriod(previousPeriod);
        };
      }
      function getDayStart(date) {
        var year = getYear(date);
        var month = getMonth(date);
        var day = getDate(date);
        var dayStartDate = /* @__PURE__ */ new Date();
        dayStartDate.setFullYear(year, month, day);
        dayStartDate.setHours(0, 0, 0, 0);
        return dayStartDate;
      }
      var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
      var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
      var getDayEnd = makeGetEnd(getNextDayStart);
      var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);
      var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);
      var getDayRange = makeGetRange([getDayStart, getDayEnd]);
      function getDaysInMonth(date) {
        return getDate(getMonthEnd(date));
      }
      function padStart(num) {
        var val = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
        var numStr = "".concat(num);
        if (numStr.length >= val) {
          return num;
        }
        return "0000".concat(numStr).slice(-val);
      }
      function getHoursMinutes(date) {
        var hours = padStart(getHours(date));
        var minutes = padStart(getMinutes(date));
        return "".concat(hours, ":").concat(minutes);
      }
      function getHoursMinutesSeconds(date) {
        var hours = padStart(getHours(date));
        var minutes = padStart(getMinutes(date));
        var seconds = padStart(getSeconds(date));
        return "".concat(hours, ":").concat(minutes, ":").concat(seconds);
      }
      function getISOLocalMonth(date) {
        var year = padStart(getYear(date), 4);
        var month = padStart(getMonthHuman(date));
        return "".concat(year, "-").concat(month);
      }
      function getISOLocalDate(date) {
        var year = padStart(getYear(date), 4);
        var month = padStart(getMonthHuman(date));
        var day = padStart(getDate(date));
        return "".concat(year, "-").concat(month, "-").concat(day);
      }
      function getISOLocalDateTime(date) {
        return "".concat(getISOLocalDate(date), "T").concat(getHoursMinutesSeconds(date));
      }
      var esm$3 = Object.freeze({
        __proto__: null,
        getYear,
        getMonth,
        getMonthHuman,
        getDate,
        getHours,
        getMinutes,
        getSeconds,
        getCenturyStart,
        getPreviousCenturyStart,
        getNextCenturyStart,
        getCenturyEnd,
        getPreviousCenturyEnd,
        getNextCenturyEnd,
        getCenturyRange,
        getDecadeStart,
        getPreviousDecadeStart,
        getNextDecadeStart,
        getDecadeEnd,
        getPreviousDecadeEnd,
        getNextDecadeEnd,
        getDecadeRange,
        getYearStart,
        getPreviousYearStart,
        getNextYearStart,
        getYearEnd,
        getPreviousYearEnd,
        getNextYearEnd,
        getYearRange,
        getMonthStart,
        getPreviousMonthStart,
        getNextMonthStart,
        getMonthEnd,
        getPreviousMonthEnd,
        getNextMonthEnd,
        getMonthRange,
        getDayStart,
        getPreviousDayStart,
        getNextDayStart,
        getDayEnd,
        getPreviousDayEnd,
        getNextDayEnd,
        getDayRange,
        getDaysInMonth,
        getHoursMinutes,
        getHoursMinutesSeconds,
        getISOLocalMonth,
        getISOLocalDate,
        getISOLocalDateTime
      });
      var _CALENDAR_TYPE_LOCALE;
      function _toConsumableArray$4(arr) {
        return _arrayWithoutHoles$4(arr) || _iterableToArray$4(arr) || _unsupportedIterableToArray$4(arr) || _nonIterableSpread$4();
      }
      function _nonIterableSpread$4() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray$4(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$4(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen);
      }
      function _iterableToArray$4(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _arrayWithoutHoles$4(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray$4(arr);
      }
      function _arrayLikeToArray$4(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function _defineProperty$M(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var CALENDAR_TYPES = {
        ARABIC: "Arabic",
        HEBREW: "Hebrew",
        ISO_8601: "ISO 8601",
        US: "US"
      };
      var CALENDAR_TYPE_LOCALES = (_CALENDAR_TYPE_LOCALE = {}, _defineProperty$M(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.US, ["en-CA", "en-US", "es-AR", "es-BO", "es-CL", "es-CO", "es-CR", "es-DO", "es-EC", "es-GT", "es-HN", "es-MX", "es-NI", "es-PA", "es-PE", "es-PR", "es-SV", "es-VE", "pt-BR"]), _defineProperty$M(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.ARABIC, [
        // ar-LB, ar-MA intentionally missing
        "ar",
        "ar-AE",
        "ar-BH",
        "ar-DZ",
        "ar-EG",
        "ar-IQ",
        "ar-JO",
        "ar-KW",
        "ar-LY",
        "ar-OM",
        "ar-QA",
        "ar-SA",
        "ar-SD",
        "ar-SY",
        "ar-YE",
        "dv",
        "dv-MV",
        "ps",
        "ps-AR"
      ]), _defineProperty$M(_CALENDAR_TYPE_LOCALE, CALENDAR_TYPES.HEBREW, ["he", "he-IL"]), _CALENDAR_TYPE_LOCALE);
      var WEEKDAYS = _toConsumableArray$4(Array(7)).map(function(el, index) {
        return index;
      });
      var formatterCache$1 = /* @__PURE__ */ new Map();
      function getFormatter$1(options) {
        return function(locale2, date) {
          var localeWithDefault = locale2 || getUserLocale();
          if (!formatterCache$1.has(localeWithDefault)) {
            formatterCache$1.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache$1.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      function toSafeHour$1(date) {
        var safeDate = new Date(date);
        return new Date(safeDate.setHours(12));
      }
      function getSafeFormatter$1(options) {
        return function(locale2, date) {
          return getFormatter$1(options)(locale2, toSafeHour$1(date));
        };
      }
      var formatDayOptions = {
        day: "numeric"
      };
      var formatLongDateOptions = {
        day: "numeric",
        month: "long",
        year: "numeric"
      };
      var formatMonthOptions$1 = {
        month: "long"
      };
      var formatMonthYearOptions = {
        month: "long",
        year: "numeric"
      };
      var formatShortWeekdayOptions = {
        weekday: "short"
      };
      var formatWeekdayOptions = {
        weekday: "long"
      };
      var formatYearOptions = {
        year: "numeric"
      };
      var formatDay = getSafeFormatter$1(formatDayOptions);
      var formatLongDate = getSafeFormatter$1(formatLongDateOptions);
      var formatMonth$1 = getSafeFormatter$1(formatMonthOptions$1);
      var formatMonthYear = getSafeFormatter$1(formatMonthYearOptions);
      var formatShortWeekday = getSafeFormatter$1(formatShortWeekdayOptions);
      var formatWeekday = getSafeFormatter$1(formatWeekdayOptions);
      var formatYear = getSafeFormatter$1(formatYearOptions);
      var SUNDAY = WEEKDAYS[0];
      var FRIDAY = WEEKDAYS[5];
      var SATURDAY = WEEKDAYS[6];
      function getDayOfWeek(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CALENDAR_TYPES.ISO_8601;
        var weekday = date.getDay();
        switch (calendarType) {
          case CALENDAR_TYPES.ISO_8601:
            return (weekday + 6) % 7;
          case CALENDAR_TYPES.ARABIC:
            return (weekday + 1) % 7;
          case CALENDAR_TYPES.HEBREW:
          case CALENDAR_TYPES.US:
            return weekday;
          default:
            throw new Error("Unsupported calendar type.");
        }
      }
      function getBeginOfCenturyYear(date) {
        var beginOfCentury = getCenturyStart(date);
        return getYear(beginOfCentury);
      }
      function getBeginOfDecadeYear(date) {
        var beginOfDecade = getDecadeStart(date);
        return getYear(beginOfDecade);
      }
      function getBeginOfWeek(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CALENDAR_TYPES.ISO_8601;
        var year = getYear(date);
        var monthIndex = getMonth(date);
        var day = date.getDate() - getDayOfWeek(date, calendarType);
        return new Date(year, monthIndex, day);
      }
      function getWeekNumber(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CALENDAR_TYPES.ISO_8601;
        var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.US ? CALENDAR_TYPES.US : CALENDAR_TYPES.ISO_8601;
        var beginOfWeek = getBeginOfWeek(date, calendarType);
        var year = getYear(date) + 1;
        var dayInWeekOne;
        var beginOfFirstWeek;
        do {
          dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);
          beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);
          year -= 1;
        } while (date < beginOfFirstWeek);
        return Math.round((beginOfWeek - beginOfFirstWeek) / (864e5 * 7)) + 1;
      }
      function getBegin$1(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getCenturyStart(date);
          case "decade":
            return getDecadeStart(date);
          case "year":
            return getYearStart(date);
          case "month":
            return getMonthStart(date);
          case "day":
            return getDayStart(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getBeginPrevious(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getPreviousCenturyStart(date);
          case "decade":
            return getPreviousDecadeStart(date);
          case "year":
            return getPreviousYearStart(date);
          case "month":
            return getPreviousMonthStart(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getBeginNext(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getNextCenturyStart(date);
          case "decade":
            return getNextDecadeStart(date);
          case "year":
            return getNextYearStart(date);
          case "month":
            return getNextMonthStart(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      var getBeginPrevious2 = function getBeginPrevious22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return getPreviousDecadeStart(date, -100);
          case "year":
            return getPreviousYearStart(date, -10);
          case "month":
            return getPreviousMonthStart(date, -12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      var getBeginNext2 = function getBeginNext22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return getNextDecadeStart(date, 100);
          case "year":
            return getNextYearStart(date, 10);
          case "month":
            return getNextMonthStart(date, 12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      function getEnd$1(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getCenturyEnd(date);
          case "decade":
            return getDecadeEnd(date);
          case "year":
            return getYearEnd(date);
          case "month":
            return getMonthEnd(date);
          case "day":
            return getDayEnd(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getEndPrevious(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getPreviousCenturyEnd(date);
          case "decade":
            return getPreviousDecadeEnd(date);
          case "year":
            return getPreviousYearEnd(date);
          case "month":
            return getPreviousMonthEnd(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      var getEndPrevious2 = function getEndPrevious22(rangeType, date) {
        switch (rangeType) {
          case "decade":
            return getPreviousDecadeEnd(date, -100);
          case "year":
            return getPreviousYearEnd(date, -10);
          case "month":
            return getPreviousMonthEnd(date, -12);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      };
      function getRange(rangeType, date) {
        switch (rangeType) {
          case "century":
            return getCenturyRange(date);
          case "decade":
            return getDecadeRange(date);
          case "year":
            return getYearRange(date);
          case "month":
            return getMonthRange(date);
          case "day":
            return getDayRange(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getValueRange(rangeType, date1, date2) {
        var rawNextValue = [date1, date2].sort(function(a, b) {
          return a - b;
        });
        return [getBegin$1(rangeType, rawNextValue[0]), getEnd$1(rangeType, rawNextValue[1])];
      }
      function toYearLabel(locale2) {
        var formatYear$1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : formatYear;
        var dates2 = arguments.length > 2 ? arguments[2] : void 0;
        return dates2.map(function(date) {
          return formatYear$1(locale2, date);
        }).join(" – ");
      }
      function getCenturyLabel(locale2, formatYear2, date) {
        return toYearLabel(locale2, formatYear2, getCenturyRange(date));
      }
      function getDecadeLabel(locale2, formatYear2, date) {
        return toYearLabel(locale2, formatYear2, getDecadeRange(date));
      }
      function isWeekend(date) {
        var calendarType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : CALENDAR_TYPES.ISO_8601;
        var weekday = date.getDay();
        switch (calendarType) {
          case CALENDAR_TYPES.ARABIC:
          case CALENDAR_TYPES.HEBREW:
            return weekday === FRIDAY || weekday === SATURDAY;
          case CALENDAR_TYPES.ISO_8601:
          case CALENDAR_TYPES.US:
            return weekday === SATURDAY || weekday === SUNDAY;
          default:
            throw new Error("Unsupported calendar type.");
        }
      }
      function _typeof$4(obj) {
        "@babel/helpers - typeof";
        return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof$4(obj);
      }
      var calendarTypes = Object.values(CALENDAR_TYPES);
      var allViews$2 = ["century", "decade", "year", "month"];
      var isCalendarType = propTypes$1.exports.oneOf(calendarTypes);
      var isClassName = propTypes$1.exports.oneOfType([propTypes$1.exports.string, propTypes$1.exports.arrayOf(propTypes$1.exports.string)]);
      var isMinDate$1 = function isMinDate2(props, propName, componentName) {
        var minDate = props[propName];
        if (!minDate) {
          return null;
        }
        if (!(minDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$4(minDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props.maxDate;
        if (maxDate && minDate > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$4(minDate), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      var isMaxDate$1 = function isMaxDate2(props, propName, componentName) {
        var maxDate = props[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$4(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate = props.minDate;
        if (minDate && maxDate < minDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof$4(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      var isRef$1 = propTypes$1.exports.oneOfType([propTypes$1.exports.func, propTypes$1.exports.shape({
        current: propTypes$1.exports.any
      })]);
      var isValue = propTypes$1.exports.oneOfType([propTypes$1.exports.instanceOf(Date), propTypes$1.exports.arrayOf(propTypes$1.exports.instanceOf(Date))]);
      var isViews = propTypes$1.exports.arrayOf(propTypes$1.exports.oneOf(allViews$2));
      var isView = function isView2(props, propName, componentName) {
        var view = props[propName];
        var views = props.views;
        var allowedViews = views || allViews$2;
        if (view !== void 0 && allowedViews.indexOf(view) === -1) {
          return new Error("Invalid prop `".concat(propName, "` of value `").concat(view, "` supplied to `").concat(componentName, "`, expected one of [").concat(allowedViews.map(function(a) {
            return '"'.concat(a, '"');
          }).join(", "), "]."));
        }
        return null;
      };
      isView.isRequired = function(props, propName, componentName) {
        var view = props[propName];
        if (!view) {
          return new Error("The prop `".concat(propName, "` is marked as required in `").concat(componentName, "`, but its value is `").concat(view, "`."));
        }
        return isView(props, propName, componentName);
      };
      var tileGroupProps = {
        activeStartDate: propTypes$1.exports.instanceOf(Date).isRequired,
        hover: propTypes$1.exports.instanceOf(Date),
        locale: propTypes$1.exports.string,
        maxDate: isMaxDate$1,
        minDate: isMinDate$1,
        onClick: propTypes$1.exports.func,
        onMouseOver: propTypes$1.exports.func,
        tileClassName: propTypes$1.exports.oneOfType([propTypes$1.exports.func, isClassName]),
        tileContent: propTypes$1.exports.oneOfType([propTypes$1.exports.func, propTypes$1.exports.node]),
        value: isValue,
        valueType: propTypes$1.exports.string
      };
      var tileProps = {
        activeStartDate: propTypes$1.exports.instanceOf(Date).isRequired,
        classes: propTypes$1.exports.arrayOf(propTypes$1.exports.string).isRequired,
        date: propTypes$1.exports.instanceOf(Date).isRequired,
        locale: propTypes$1.exports.string,
        maxDate: isMaxDate$1,
        minDate: isMinDate$1,
        onClick: propTypes$1.exports.func,
        onMouseOver: propTypes$1.exports.func,
        style: propTypes$1.exports.objectOf(propTypes$1.exports.oneOfType([propTypes$1.exports.string, propTypes$1.exports.number])),
        tileClassName: propTypes$1.exports.oneOfType([propTypes$1.exports.func, isClassName]),
        tileContent: propTypes$1.exports.oneOfType([propTypes$1.exports.func, propTypes$1.exports.node]),
        tileDisabled: propTypes$1.exports.func
      };
      var className$6 = "react-calendar__navigation";
      function Navigation(_ref) {
        var activeStartDate = _ref.activeStartDate, drillUp = _ref.drillUp, _ref$formatMonthYear = _ref.formatMonthYear, formatMonthYear$1 = _ref$formatMonthYear === void 0 ? formatMonthYear : _ref$formatMonthYear, _ref$formatYear = _ref.formatYear, formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear, locale2 = _ref.locale, maxDate = _ref.maxDate, minDate = _ref.minDate, _ref$navigationAriaLa = _ref.navigationAriaLabel, navigationAriaLabel = _ref$navigationAriaLa === void 0 ? "" : _ref$navigationAriaLa, navigationAriaLive = _ref.navigationAriaLive, navigationLabel = _ref.navigationLabel, _ref$next2AriaLabel = _ref.next2AriaLabel, next2AriaLabel = _ref$next2AriaLabel === void 0 ? "" : _ref$next2AriaLabel, _ref$next2Label = _ref.next2Label, next2Label = _ref$next2Label === void 0 ? "»" : _ref$next2Label, _ref$nextAriaLabel = _ref.nextAriaLabel, nextAriaLabel = _ref$nextAriaLabel === void 0 ? "" : _ref$nextAriaLabel, _ref$nextLabel = _ref.nextLabel, nextLabel = _ref$nextLabel === void 0 ? "›" : _ref$nextLabel, _ref$prev2AriaLabel = _ref.prev2AriaLabel, prev2AriaLabel = _ref$prev2AriaLabel === void 0 ? "" : _ref$prev2AriaLabel, _ref$prev2Label = _ref.prev2Label, prev2Label = _ref$prev2Label === void 0 ? "«" : _ref$prev2Label, _ref$prevAriaLabel = _ref.prevAriaLabel, prevAriaLabel = _ref$prevAriaLabel === void 0 ? "" : _ref$prevAriaLabel, _ref$prevLabel = _ref.prevLabel, prevLabel = _ref$prevLabel === void 0 ? "‹" : _ref$prevLabel, setActiveStartDate = _ref.setActiveStartDate, showDoubleView = _ref.showDoubleView, view = _ref.view, views = _ref.views;
        var drillUpAvailable = views.indexOf(view) > 0;
        var shouldShowPrevNext2Buttons = view !== "century";
        var previousActiveStartDate = getBeginPrevious(view, activeStartDate);
        var previousActiveStartDate2 = shouldShowPrevNext2Buttons && getBeginPrevious2(view, activeStartDate);
        var nextActiveStartDate = getBeginNext(view, activeStartDate);
        var nextActiveStartDate2 = shouldShowPrevNext2Buttons && getBeginNext2(view, activeStartDate);
        var prevButtonDisabled = function() {
          if (previousActiveStartDate.getFullYear() < 0) {
            return true;
          }
          var previousActiveEndDate = getEndPrevious(view, activeStartDate);
          return minDate && minDate >= previousActiveEndDate;
        }();
        var prev2ButtonDisabled = shouldShowPrevNext2Buttons && function() {
          if (previousActiveStartDate2.getFullYear() < 0) {
            return true;
          }
          var previousActiveEndDate = getEndPrevious2(view, activeStartDate);
          return minDate && minDate >= previousActiveEndDate;
        }();
        var nextButtonDisabled = maxDate && maxDate < nextActiveStartDate;
        var next2ButtonDisabled = shouldShowPrevNext2Buttons && maxDate && maxDate < nextActiveStartDate2;
        function onClickPrevious() {
          setActiveStartDate(previousActiveStartDate, "prev");
        }
        function onClickPrevious2() {
          setActiveStartDate(previousActiveStartDate2, "prev2");
        }
        function onClickNext() {
          setActiveStartDate(nextActiveStartDate, "next");
        }
        function onClickNext2() {
          setActiveStartDate(nextActiveStartDate2, "next2");
        }
        function renderLabel(date) {
          var label = function() {
            switch (view) {
              case "century":
                return getCenturyLabel(locale2, formatYear$1, date);
              case "decade":
                return getDecadeLabel(locale2, formatYear$1, date);
              case "year":
                return formatYear$1(locale2, date);
              case "month":
                return formatMonthYear$1(locale2, date);
              default:
                throw new Error("Invalid view: ".concat(view, "."));
            }
          }();
          return navigationLabel ? navigationLabel({
            date,
            label,
            locale: locale2 || getUserLocale(),
            view
          }) : label;
        }
        function renderButton() {
          var labelClassName = "".concat(className$6, "__label");
          return React__default["default"].createElement(
            "button",
            {
              "aria-label": navigationAriaLabel,
              "aria-live": navigationAriaLive,
              className: labelClassName,
              disabled: !drillUpAvailable,
              onClick: drillUp,
              style: {
                flexGrow: 1
              },
              type: "button"
            },
            React__default["default"].createElement(
              "span",
              {
                className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--from")
              },
              renderLabel(activeStartDate)
            ),
            showDoubleView && React__default["default"].createElement(React__default["default"].Fragment, null, React__default["default"].createElement(
              "span",
              {
                className: "".concat(labelClassName, "__divider")
              },
              " – "
            ), React__default["default"].createElement(
              "span",
              {
                className: "".concat(labelClassName, "__labelText ").concat(labelClassName, "__labelText--to")
              },
              renderLabel(nextActiveStartDate)
            ))
          );
        }
        return React__default["default"].createElement(
          "div",
          {
            className: className$6
          },
          prev2Label !== null && shouldShowPrevNext2Buttons && React__default["default"].createElement(
            "button",
            {
              "aria-label": prev2AriaLabel,
              className: "".concat(className$6, "__arrow ").concat(className$6, "__prev2-button"),
              disabled: prev2ButtonDisabled,
              onClick: onClickPrevious2,
              type: "button"
            },
            prev2Label
          ),
          prevLabel !== null && React__default["default"].createElement(
            "button",
            {
              "aria-label": prevAriaLabel,
              className: "".concat(className$6, "__arrow ").concat(className$6, "__prev-button"),
              disabled: prevButtonDisabled,
              onClick: onClickPrevious,
              type: "button"
            },
            prevLabel
          ),
          renderButton(),
          nextLabel !== null && React__default["default"].createElement(
            "button",
            {
              "aria-label": nextAriaLabel,
              className: "".concat(className$6, "__arrow ").concat(className$6, "__next-button"),
              disabled: nextButtonDisabled,
              onClick: onClickNext,
              type: "button"
            },
            nextLabel
          ),
          next2Label !== null && shouldShowPrevNext2Buttons && React__default["default"].createElement(
            "button",
            {
              "aria-label": next2AriaLabel,
              className: "".concat(className$6, "__arrow ").concat(className$6, "__next2-button"),
              disabled: next2ButtonDisabled,
              onClick: onClickNext2,
              type: "button"
            },
            next2Label
          )
        );
      }
      Navigation.propTypes = {
        activeStartDate: propTypes$1.exports.instanceOf(Date).isRequired,
        drillUp: propTypes$1.exports.func.isRequired,
        formatMonthYear: propTypes$1.exports.func,
        formatYear: propTypes$1.exports.func,
        locale: propTypes$1.exports.string,
        maxDate: propTypes$1.exports.instanceOf(Date),
        minDate: propTypes$1.exports.instanceOf(Date),
        navigationAriaLabel: propTypes$1.exports.string,
        navigationAriaLive: propTypes$1.exports.string,
        navigationLabel: propTypes$1.exports.func,
        next2AriaLabel: propTypes$1.exports.string,
        next2Label: propTypes$1.exports.node,
        nextAriaLabel: propTypes$1.exports.string,
        nextLabel: propTypes$1.exports.node,
        prev2AriaLabel: propTypes$1.exports.string,
        prev2Label: propTypes$1.exports.node,
        prevAriaLabel: propTypes$1.exports.string,
        prevLabel: propTypes$1.exports.node,
        setActiveStartDate: propTypes$1.exports.func.isRequired,
        showDoubleView: propTypes$1.exports.bool,
        view: isView.isRequired,
        views: isViews.isRequired
      };
      var _excluded$a = ["children", "className", "direction", "count", "offset", "style", "wrap"];
      function _extends$d() {
        _extends$d = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$d.apply(this, arguments);
      }
      function ownKeys$d(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$d(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$d(Object(source), true).forEach(function(key) {
            _defineProperty$L(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$L(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties$a(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$a(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$a(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function toPercent(num) {
        return "".concat(num, "%");
      }
      function Flex(_ref) {
        var children = _ref.children, className2 = _ref.className, direction = _ref.direction, count = _ref.count, offset = _ref.offset, style = _ref.style, wrap = _ref.wrap, otherProps = _objectWithoutProperties$a(_ref, _excluded$a);
        return React__default["default"].createElement("div", _extends$d(
          {
            className: className2,
            style: _objectSpread$d(
              {
                display: "flex",
                flexDirection: direction,
                flexWrap: wrap ? "wrap" : "no-wrap"
              },
              style
            )
          },
          otherProps
        ), React__default["default"].Children.map(children, function(child, index) {
          return React__default["default"].cloneElement(child, _objectSpread$d(_objectSpread$d({}, child.props), {}, {
            style: {
              flexBasis: toPercent(100 / count),
              flexShrink: 0,
              flexGrow: 0,
              overflow: "hidden",
              marginLeft: offset && index === 0 ? toPercent(100 * offset / count) : null
            }
          }));
        }));
      }
      Flex.propTypes = {
        children: propTypes$1.exports.node,
        className: propTypes$1.exports.string,
        count: propTypes$1.exports.number.isRequired,
        direction: propTypes$1.exports.string,
        offset: propTypes$1.exports.number,
        style: propTypes$1.exports.objectOf(propTypes$1.exports.oneOfType([propTypes$1.exports.string, propTypes$1.exports.number])),
        wrap: propTypes$1.exports.bool
      };
      function _toConsumableArray$3(arr) {
        return _arrayWithoutHoles$3(arr) || _iterableToArray$3(arr) || _unsupportedIterableToArray$3(arr) || _nonIterableSpread$3();
      }
      function _nonIterableSpread$3() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray$3(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$3(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);
      }
      function _iterableToArray$3(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _arrayWithoutHoles$3(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray$3(arr);
      }
      function _arrayLikeToArray$3(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function between$1(value, min, max) {
        if (min && min > value) {
          return min;
        }
        if (max && max < value) {
          return max;
        }
        return value;
      }
      function isValueWithinRange(value, range) {
        return range[0] <= value && range[1] >= value;
      }
      function isRangeWithinRange(greaterRange, smallerRange) {
        return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];
      }
      function doRangesOverlap(range1, range2) {
        return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);
      }
      function getRangeClassNames(valueRange, dateRange, baseClassName2) {
        var isRange = doRangesOverlap(dateRange, valueRange);
        var classes2 = [];
        if (isRange) {
          classes2.push(baseClassName2);
          var isRangeStart = isValueWithinRange(valueRange[0], dateRange);
          var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);
          if (isRangeStart) {
            classes2.push("".concat(baseClassName2, "Start"));
          }
          if (isRangeEnd) {
            classes2.push("".concat(baseClassName2, "End"));
          }
          if (isRangeStart && isRangeEnd) {
            classes2.push("".concat(baseClassName2, "BothEnds"));
          }
        }
        return classes2;
      }
      function getTileClasses() {
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, value = _ref.value, valueType = _ref.valueType, date = _ref.date, dateType = _ref.dateType, hover = _ref.hover;
        var className2 = "react-calendar__tile";
        var classes2 = [className2];
        if (!date) {
          return classes2;
        }
        if (!Array.isArray(date) && !dateType) {
          throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");
        }
        var now2 = /* @__PURE__ */ new Date();
        var dateRange = Array.isArray(date) ? date : getRange(dateType, date);
        if (isValueWithinRange(now2, dateRange)) {
          classes2.push("".concat(className2, "--now"));
        }
        if (!value) {
          return classes2;
        }
        if (!Array.isArray(value) && !valueType) {
          throw new Error("getTileClasses(): Unable to get tile activity classes because one or more required arguments were not passed.");
        }
        var valueRange = Array.isArray(value) ? value : getRange(valueType, value);
        if (isRangeWithinRange(valueRange, dateRange)) {
          classes2.push("".concat(className2, "--active"));
        } else if (doRangesOverlap(valueRange, dateRange)) {
          classes2.push("".concat(className2, "--hasActive"));
        }
        var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, "".concat(className2, "--range"));
        classes2.push.apply(classes2, _toConsumableArray$3(valueRangeClassNames));
        var valueArray = [].concat(value);
        if (hover && valueArray.length === 1) {
          var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];
          var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, "".concat(className2, "--hover"));
          classes2.push.apply(classes2, _toConsumableArray$3(hoverRangeClassNames));
        }
        return classes2;
      }
      var _excluded$9 = ["className", "count", "dateTransform", "dateType", "end", "hover", "offset", "start", "step", "tile", "value", "valueType"];
      function ownKeys$c(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$c(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
            _defineProperty$K(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$K(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$c() {
        _extends$c = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$c.apply(this, arguments);
      }
      function _objectWithoutProperties$9(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$9(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$9(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function TileGroup(_ref) {
        var className2 = _ref.className, _ref$count = _ref.count, count = _ref$count === void 0 ? 3 : _ref$count, dateTransform = _ref.dateTransform, dateType = _ref.dateType, end = _ref.end, hover = _ref.hover, offset = _ref.offset, start = _ref.start, _ref$step = _ref.step, step = _ref$step === void 0 ? 1 : _ref$step, Tile2 = _ref.tile, value = _ref.value, valueType = _ref.valueType, tileProps2 = _objectWithoutProperties$9(_ref, _excluded$9);
        var tiles = [];
        for (var point = start; point <= end; point += step) {
          var date = dateTransform(point);
          tiles.push(React__default["default"].createElement(Tile2, _extends$c(
            {
              key: date.getTime(),
              classes: getTileClasses({
                value,
                valueType,
                date,
                dateType,
                hover
              }),
              date,
              point
            },
            tileProps2
          )));
        }
        return React__default["default"].createElement(
          Flex,
          {
            className: className2,
            count,
            offset,
            wrap: true
          },
          tiles
        );
      }
      TileGroup.propTypes = _objectSpread$c(_objectSpread$c({}, tileGroupProps), {}, {
        activeStartDate: propTypes$1.exports.instanceOf(Date),
        count: propTypes$1.exports.number,
        dateTransform: propTypes$1.exports.func.isRequired,
        dateType: propTypes$1.exports.string,
        offset: propTypes$1.exports.number,
        step: propTypes$1.exports.number,
        tile: propTypes$1.exports.func.isRequired
      });
      function _typeof$3(obj) {
        "@babel/helpers - typeof";
        return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof$3(obj);
      }
      function ownKeys$b(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$b(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
            _defineProperty$J(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _classCallCheck$2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties$2(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass$2(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$2(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits$2(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass) _setPrototypeOf$3(subClass, superClass);
      }
      function _setPrototypeOf$3(o, p) {
        _setPrototypeOf$3 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf$3(o, p);
      }
      function _createSuper$2(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf$2(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf$2(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn$2(this, result);
        };
      }
      function _possibleConstructorReturn$2(self2, call) {
        if (call && (_typeof$3(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized$3(self2);
      }
      function _assertThisInitialized$3(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct$2() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf$2(o) {
        _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf$2(o);
      }
      function _defineProperty$J(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function datesAreDifferent(date1, date2) {
        return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
      }
      function getValue$2(nextProps, prop) {
        var activeStartDate = nextProps.activeStartDate, date = nextProps.date, view = nextProps.view;
        return typeof prop === "function" ? prop({
          activeStartDate,
          date,
          view
        }) : prop;
      }
      var Tile = function(_Component) {
        _inherits$2(Tile2, _Component);
        var _super = _createSuper$2(Tile2);
        function Tile2() {
          var _this;
          _classCallCheck$2(this, Tile2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty$J(_assertThisInitialized$3(_this), "state", {});
          return _this;
        }
        _createClass$2(
          Tile2,
          [{
            key: "render",
            value: function render() {
              var _this$props = this.props, activeStartDate = _this$props.activeStartDate, children = _this$props.children, classes2 = _this$props.classes, date = _this$props.date, formatAbbr = _this$props.formatAbbr, locale2 = _this$props.locale, maxDate = _this$props.maxDate, maxDateTransform = _this$props.maxDateTransform, minDate = _this$props.minDate, minDateTransform = _this$props.minDateTransform, onClick = _this$props.onClick, onMouseOver = _this$props.onMouseOver, style = _this$props.style, tileDisabled = _this$props.tileDisabled, view = _this$props.view;
              var _this$state = this.state, tileClassName = _this$state.tileClassName, tileContent = _this$state.tileContent;
              return React__default["default"].createElement(
                "button",
                {
                  className: mergeClassNames(classes2, tileClassName),
                  disabled: minDate && minDateTransform(minDate) > date || maxDate && maxDateTransform(maxDate) < date || tileDisabled && tileDisabled({
                    activeStartDate,
                    date,
                    view
                  }),
                  onClick: onClick && function(event) {
                    return onClick(date, event);
                  },
                  onFocus: onMouseOver && function() {
                    return onMouseOver(date);
                  },
                  onMouseOver: onMouseOver && function() {
                    return onMouseOver(date);
                  },
                  style,
                  type: "button"
                },
                formatAbbr ? React__default["default"].createElement(
                  "abbr",
                  {
                    "aria-label": formatAbbr(locale2, date)
                  },
                  children
                ) : children,
                tileContent
              );
            }
          }],
          [{
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(nextProps, prevState) {
              var activeStartDate = nextProps.activeStartDate, tileClassName = nextProps.tileClassName, tileContent = nextProps.tileContent;
              var nextState = {};
              if (tileClassName !== prevState.tileClassNameProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {
                nextState.tileClassName = getValue$2(nextProps, tileClassName);
                nextState.tileClassNameProps = tileClassName;
              }
              if (tileContent !== prevState.tileContentProps || datesAreDifferent(activeStartDate, prevState.activeStartDateProps)) {
                nextState.tileContent = getValue$2(nextProps, tileContent);
                nextState.tileContentProps = tileContent;
              }
              nextState.activeStartDateProps = activeStartDate;
              return nextState;
            }
          }]
        );
        return Tile2;
      }(React.Component);
      Tile.propTypes = _objectSpread$b(_objectSpread$b({}, tileProps), {}, {
        children: propTypes$1.exports.node.isRequired,
        formatAbbr: propTypes$1.exports.func,
        maxDateTransform: propTypes$1.exports.func.isRequired,
        minDateTransform: propTypes$1.exports.func.isRequired
      });
      var _excluded$8 = ["classes", "formatYear"];
      function ownKeys$a(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$a(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
            _defineProperty$I(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$I(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$b() {
        _extends$b = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$b.apply(this, arguments);
      }
      function _objectWithoutProperties$8(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$8(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$8(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      var className$5 = "react-calendar__century-view__decades__decade";
      function Decade(_ref) {
        var classes2 = _ref.classes, _ref$formatYear = _ref.formatYear, formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear, otherProps = _objectWithoutProperties$8(_ref, _excluded$8);
        var date = otherProps.date, locale2 = otherProps.locale;
        return React__default["default"].createElement(
          Tile,
          _extends$b({}, otherProps, {
            classes: [].concat(classes2, className$5),
            maxDateTransform: getDecadeEnd,
            minDateTransform: getDecadeStart,
            view: "century"
          }),
          getDecadeLabel(locale2, formatYear$1, date)
        );
      }
      Decade.propTypes = _objectSpread$a(_objectSpread$a({}, tileProps), {}, {
        formatYear: propTypes$1.exports.func
      });
      function ownKeys$9(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$9(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
            _defineProperty$H(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$H(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$a() {
        _extends$a = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$a.apply(this, arguments);
      }
      function Decades(props) {
        var activeStartDate = props.activeStartDate;
        var start = getBeginOfCenturyYear(activeStartDate);
        var end = start + 99;
        return React__default["default"].createElement(TileGroup, _extends$a({}, props, {
          className: "react-calendar__century-view__decades",
          dateTransform: getDecadeStart,
          dateType: "decade",
          end,
          start,
          step: 10,
          tile: Decade
        }));
      }
      Decades.propTypes = _objectSpread$9({}, tileGroupProps);
      function CenturyView(props) {
        function renderDecades() {
          return React__default["default"].createElement(Decades, props);
        }
        return React__default["default"].createElement(
          "div",
          {
            className: "react-calendar__century-view"
          },
          renderDecades()
        );
      }
      var _excluded$7 = ["classes", "formatYear"];
      function ownKeys$8(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$8(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
            _defineProperty$G(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$G(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$9() {
        _extends$9 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$9.apply(this, arguments);
      }
      function _objectWithoutProperties$7(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$7(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$7(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      var className$4 = "react-calendar__decade-view__years__year";
      function Year(_ref) {
        var classes2 = _ref.classes, _ref$formatYear = _ref.formatYear, formatYear$1 = _ref$formatYear === void 0 ? formatYear : _ref$formatYear, otherProps = _objectWithoutProperties$7(_ref, _excluded$7);
        var date = otherProps.date, locale2 = otherProps.locale;
        return React__default["default"].createElement(
          Tile,
          _extends$9({}, otherProps, {
            classes: [].concat(classes2, className$4),
            maxDateTransform: getYearEnd,
            minDateTransform: getYearStart,
            view: "decade"
          }),
          formatYear$1(locale2, date)
        );
      }
      Year.propTypes = _objectSpread$8(_objectSpread$8({}, tileProps), {}, {
        formatYear: propTypes$1.exports.func
      });
      function ownKeys$7(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$7(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
            _defineProperty$F(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$F(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$8() {
        _extends$8 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$8.apply(this, arguments);
      }
      function Years(props) {
        var activeStartDate = props.activeStartDate;
        var start = getBeginOfDecadeYear(activeStartDate);
        var end = start + 9;
        return React__default["default"].createElement(TileGroup, _extends$8({}, props, {
          className: "react-calendar__decade-view__years",
          dateTransform: function dateTransform(year) {
            var date = /* @__PURE__ */ new Date();
            date.setFullYear(year, 0, 1);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "year",
          end,
          start,
          tile: Year
        }));
      }
      Years.propTypes = _objectSpread$7({}, tileGroupProps);
      function DecadeView(props) {
        function renderYears() {
          return React__default["default"].createElement(Years, props);
        }
        return React__default["default"].createElement(
          "div",
          {
            className: "react-calendar__decade-view"
          },
          renderYears()
        );
      }
      var _excluded$6 = ["classes", "formatMonth", "formatMonthYear"];
      function ownKeys$6(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$6(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
            _defineProperty$E(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$E(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$7() {
        _extends$7 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$7.apply(this, arguments);
      }
      function _objectWithoutProperties$6(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$6(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$6(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      var className$3 = "react-calendar__year-view__months__month";
      function Month(_ref) {
        var classes2 = _ref.classes, _ref$formatMonth = _ref.formatMonth, formatMonth2 = _ref$formatMonth === void 0 ? formatMonth$1 : _ref$formatMonth, _ref$formatMonthYear = _ref.formatMonthYear, formatMonthYear$1 = _ref$formatMonthYear === void 0 ? formatMonthYear : _ref$formatMonthYear, otherProps = _objectWithoutProperties$6(_ref, _excluded$6);
        var date = otherProps.date, locale2 = otherProps.locale;
        return React__default["default"].createElement(
          Tile,
          _extends$7({}, otherProps, {
            classes: [].concat(classes2, className$3),
            formatAbbr: formatMonthYear$1,
            maxDateTransform: getMonthEnd,
            minDateTransform: getMonthStart,
            view: "year"
          }),
          formatMonth2(locale2, date)
        );
      }
      Month.propTypes = _objectSpread$6(_objectSpread$6({}, tileProps), {}, {
        formatMonth: propTypes$1.exports.func,
        formatMonthYear: propTypes$1.exports.func
      });
      function ownKeys$5(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$5(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
            _defineProperty$D(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$D(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$6() {
        _extends$6 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$6.apply(this, arguments);
      }
      function Months(props) {
        var activeStartDate = props.activeStartDate;
        var start = 0;
        var end = 11;
        var year = getYear(activeStartDate);
        return React__default["default"].createElement(TileGroup, _extends$6({}, props, {
          className: "react-calendar__year-view__months",
          dateTransform: function dateTransform(monthIndex) {
            var date = /* @__PURE__ */ new Date();
            date.setFullYear(year, monthIndex, 1);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "month",
          end,
          start,
          tile: Month
        }));
      }
      Months.propTypes = _objectSpread$5(_objectSpread$5({}, tileGroupProps), {}, {
        locale: propTypes$1.exports.string
      });
      function YearView(props) {
        function renderMonths() {
          return React__default["default"].createElement(Months, props);
        }
        return React__default["default"].createElement(
          "div",
          {
            className: "react-calendar__year-view"
          },
          renderMonths()
        );
      }
      var _excluded$5 = ["formatDay", "formatLongDate", "calendarType", "classes", "currentMonthIndex"];
      function ownKeys$4(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$4(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
            _defineProperty$C(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$C(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$5() {
        _extends$5 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$5.apply(this, arguments);
      }
      function _objectWithoutProperties$5(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$5(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$5(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      var className$2 = "react-calendar__month-view__days__day";
      function Day(_ref) {
        var _ref$formatDay = _ref.formatDay, formatDay$1 = _ref$formatDay === void 0 ? formatDay : _ref$formatDay, _ref$formatLongDate = _ref.formatLongDate, formatLongDate$1 = _ref$formatLongDate === void 0 ? formatLongDate : _ref$formatLongDate, calendarType = _ref.calendarType, classes2 = _ref.classes, currentMonthIndex = _ref.currentMonthIndex, otherProps = _objectWithoutProperties$5(_ref, _excluded$5);
        var date = otherProps.date, locale2 = otherProps.locale;
        return React__default["default"].createElement(
          Tile,
          _extends$5({}, otherProps, {
            classes: [].concat(classes2, className$2, isWeekend(date, calendarType) ? "".concat(className$2, "--weekend") : null, date.getMonth() !== currentMonthIndex ? "".concat(className$2, "--neighboringMonth") : null),
            formatAbbr: formatLongDate$1,
            maxDateTransform: getDayEnd,
            minDateTransform: getDayStart,
            view: "month"
          }),
          formatDay$1(locale2, date)
        );
      }
      Day.propTypes = _objectSpread$4(_objectSpread$4({}, tileProps), {}, {
        currentMonthIndex: propTypes$1.exports.number.isRequired,
        formatDay: propTypes$1.exports.func,
        formatLongDate: propTypes$1.exports.func
      });
      var _excluded$4 = ["showFixedNumberOfWeeks", "showNeighboringMonth"];
      function ownKeys$3(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$3(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
            _defineProperty$B(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$B(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _extends$4() {
        _extends$4 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$4.apply(this, arguments);
      }
      function _objectWithoutProperties$4(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$4(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$4(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function Days(props) {
        var activeStartDate = props.activeStartDate, calendarType = props.calendarType;
        var showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, showNeighboringMonth = props.showNeighboringMonth, otherProps = _objectWithoutProperties$4(props, _excluded$4);
        var year = getYear(activeStartDate);
        var monthIndex = getMonth(activeStartDate);
        var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;
        var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);
        var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;
        var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;
        var end = function() {
          if (showFixedNumberOfWeeks) {
            return start + 6 * 7 - 1;
          }
          var daysInMonth = getDaysInMonth(activeStartDate);
          if (showNeighboringMonth) {
            var activeEndDate = /* @__PURE__ */ new Date();
            activeEndDate.setFullYear(year, monthIndex, daysInMonth);
            activeEndDate.setHours(0, 0, 0, 0);
            var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;
            return daysInMonth + daysUntilEndOfTheWeek;
          }
          return daysInMonth;
        }();
        return React__default["default"].createElement(TileGroup, _extends$4({}, otherProps, {
          className: "react-calendar__month-view__days",
          count: 7,
          currentMonthIndex: monthIndex,
          dateTransform: function dateTransform(day) {
            var date = /* @__PURE__ */ new Date();
            date.setFullYear(year, monthIndex, day);
            date.setHours(0, 0, 0, 0);
            return date;
          },
          dateType: "day",
          end,
          offset,
          start,
          tile: Day
        }));
      }
      Days.propTypes = _objectSpread$3(
        {
          calendarType: isCalendarType.isRequired,
          showFixedNumberOfWeeks: propTypes$1.exports.bool,
          showNeighboringMonth: propTypes$1.exports.bool
        },
        tileGroupProps
      );
      var className$1 = "react-calendar__month-view__weekdays";
      function Weekdays(props) {
        var calendarType = props.calendarType, _props$formatShortWee = props.formatShortWeekday, formatShortWeekday$1 = _props$formatShortWee === void 0 ? formatShortWeekday : _props$formatShortWee, locale2 = props.locale, onMouseLeave = props.onMouseLeave;
        var anyDate = /* @__PURE__ */ new Date();
        var beginOfMonth = getMonthStart(anyDate);
        var year = getYear(beginOfMonth);
        var monthIndex = getMonth(beginOfMonth);
        var weekdays = [];
        for (var weekday = 1; weekday <= 7; weekday += 1) {
          var weekdayDate = new Date(year, monthIndex, weekday - getDayOfWeek(beginOfMonth, calendarType));
          var abbr = formatWeekday(locale2, weekdayDate);
          weekdays.push(React__default["default"].createElement(
            "div",
            {
              key: weekday,
              className: "".concat(className$1, "__weekday")
            },
            React__default["default"].createElement(
              "abbr",
              {
                "aria-label": abbr,
                title: abbr
              },
              formatShortWeekday$1(locale2, weekdayDate).replace(".", "")
            )
          ));
        }
        return React__default["default"].createElement(
          Flex,
          {
            className: className$1,
            count: 7,
            onFocus: onMouseLeave,
            onMouseOver: onMouseLeave
          },
          weekdays
        );
      }
      Weekdays.propTypes = {
        calendarType: isCalendarType.isRequired,
        formatShortWeekday: propTypes$1.exports.func,
        locale: propTypes$1.exports.string,
        onMouseLeave: propTypes$1.exports.func
      };
      var _excluded$3 = ["date", "onClickWeekNumber", "weekNumber"];
      function _extends$3() {
        _extends$3 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$3.apply(this, arguments);
      }
      function ownKeys$2(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
            _defineProperty$A(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$A(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties$3(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$3(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$3(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      var className = "react-calendar__tile";
      function WeekNumber(_ref) {
        var date = _ref.date, onClickWeekNumber = _ref.onClickWeekNumber, weekNumber = _ref.weekNumber, otherProps = _objectWithoutProperties$3(_ref, _excluded$3);
        var props = _objectSpread$2(
          {
            className
          },
          otherProps
        );
        var children = React__default["default"].createElement("span", null, weekNumber);
        return onClickWeekNumber ? React__default["default"].createElement(
          "button",
          _extends$3({}, props, {
            onClick: function onClick(event) {
              return onClickWeekNumber(weekNumber, date, event);
            },
            type: "button"
          }),
          children
        ) : React__default["default"].createElement("div", props, children);
      }
      WeekNumber.propTypes = {
        date: propTypes$1.exports.instanceOf(Date).isRequired,
        onClickWeekNumber: propTypes$1.exports.func,
        weekNumber: propTypes$1.exports.node.isRequired
      };
      function WeekNumbers(props) {
        var activeStartDate = props.activeStartDate, calendarType = props.calendarType, onClickWeekNumber = props.onClickWeekNumber, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
        var numberOfWeeks = function() {
          if (showFixedNumberOfWeeks) {
            return 6;
          }
          var numberOfDays = getDaysInMonth(activeStartDate);
          var startWeekday = getDayOfWeek(activeStartDate, calendarType);
          var days = numberOfDays - (7 - startWeekday);
          return 1 + Math.ceil(days / 7);
        }();
        var dates2 = function() {
          var year = getYear(activeStartDate);
          var monthIndex = getMonth(activeStartDate);
          var day = getDate(activeStartDate);
          var result = [];
          for (var index = 0; index < numberOfWeeks; index += 1) {
            result.push(getBeginOfWeek(new Date(year, monthIndex, day + index * 7), calendarType));
          }
          return result;
        }();
        var weekNumbers = dates2.map(function(date) {
          return getWeekNumber(date, calendarType);
        });
        return React__default["default"].createElement(
          Flex,
          {
            className: "react-calendar__month-view__weekNumbers",
            count: numberOfWeeks,
            direction: "column",
            onFocus: onMouseLeave,
            onMouseOver: onMouseLeave,
            style: {
              flexBasis: "calc(100% * (1 / 8)",
              flexShrink: 0
            }
          },
          weekNumbers.map(function(weekNumber, weekIndex) {
            return React__default["default"].createElement(WeekNumber, {
              key: weekNumber,
              date: dates2[weekIndex],
              onClickWeekNumber,
              weekNumber
            });
          })
        );
      }
      WeekNumbers.propTypes = {
        activeStartDate: propTypes$1.exports.instanceOf(Date).isRequired,
        calendarType: isCalendarType.isRequired,
        onClickWeekNumber: propTypes$1.exports.func,
        onMouseLeave: propTypes$1.exports.func,
        showFixedNumberOfWeeks: propTypes$1.exports.bool
      };
      var _excluded$2 = ["calendarType", "formatShortWeekday", "onClickWeekNumber", "showWeekNumbers"];
      function _extends$2() {
        _extends$2 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$2.apply(this, arguments);
      }
      function _objectWithoutProperties$2(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$2(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$2(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function getCalendarTypeFromLocale(locale2) {
        return Object.keys(CALENDAR_TYPE_LOCALES).find(function(calendarType) {
          return CALENDAR_TYPE_LOCALES[calendarType].includes(locale2);
        }) || CALENDAR_TYPES.ISO_8601;
      }
      function MonthView(props) {
        var activeStartDate = props.activeStartDate, locale2 = props.locale, onMouseLeave = props.onMouseLeave, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;
        var _props$calendarType = props.calendarType, calendarType = _props$calendarType === void 0 ? getCalendarTypeFromLocale(locale2) : _props$calendarType, formatShortWeekday2 = props.formatShortWeekday, onClickWeekNumber = props.onClickWeekNumber, showWeekNumbers = props.showWeekNumbers, childProps = _objectWithoutProperties$2(props, _excluded$2);
        function renderWeekdays() {
          return React__default["default"].createElement(Weekdays, {
            calendarType,
            formatShortWeekday: formatShortWeekday2,
            locale: locale2,
            onMouseLeave
          });
        }
        function renderWeekNumbers() {
          if (!showWeekNumbers) {
            return null;
          }
          return React__default["default"].createElement(WeekNumbers, {
            activeStartDate,
            calendarType,
            onClickWeekNumber,
            onMouseLeave,
            showFixedNumberOfWeeks
          });
        }
        function renderDays() {
          return React__default["default"].createElement(Days, _extends$2(
            {
              calendarType
            },
            childProps
          ));
        }
        var className2 = "react-calendar__month-view";
        return React__default["default"].createElement(
          "div",
          {
            className: mergeClassNames(className2, showWeekNumbers ? "".concat(className2, "--weekNumbers") : "")
          },
          React__default["default"].createElement(
            "div",
            {
              style: {
                display: "flex",
                alignItems: "flex-end"
              }
            },
            renderWeekNumbers(),
            React__default["default"].createElement(
              "div",
              {
                style: {
                  flexGrow: 1,
                  width: "100%"
                }
              },
              renderWeekdays(),
              renderDays()
            )
          )
        );
      }
      MonthView.propTypes = {
        activeStartDate: propTypes$1.exports.instanceOf(Date).isRequired,
        calendarType: isCalendarType,
        formatShortWeekday: propTypes$1.exports.func,
        locale: propTypes$1.exports.string,
        onClickWeekNumber: propTypes$1.exports.func,
        onMouseLeave: propTypes$1.exports.func,
        showFixedNumberOfWeeks: propTypes$1.exports.bool,
        showWeekNumbers: propTypes$1.exports.bool
      };
      var _excluded$1 = ["activeStartDate", "defaultActiveStartDate", "defaultValue", "defaultView", "maxDetail", "minDetail", "value", "view"];
      function _extends$1() {
        _extends$1 = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends$1.apply(this, arguments);
      }
      function _typeof$2(obj) {
        "@babel/helpers - typeof";
        return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof$2(obj);
      }
      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties$1(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass$1(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$1(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", { writable: false });
        return Constructor;
      }
      function _inherits$1(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        Object.defineProperty(subClass, "prototype", { writable: false });
        if (superClass) _setPrototypeOf$2(subClass, superClass);
      }
      function _setPrototypeOf$2(o, p) {
        _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf$2(o, p);
      }
      function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf$1(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf$1(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn$1(this, result);
        };
      }
      function _possibleConstructorReturn$1(self2, call) {
        if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized$2(self2);
      }
      function _assertThisInitialized$2(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf$1(o) {
        _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf$1(o);
      }
      function ownKeys$1(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })), keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread$1(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = null != arguments[i] ? arguments[i] : {};
          i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
            _defineProperty$z(target, key, source[key]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
        return target;
      }
      function _defineProperty$z(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _objectWithoutProperties$1(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose$1(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose$1(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function _toConsumableArray$2(arr) {
        return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2();
      }
      function _nonIterableSpread$2() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray$2(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
      }
      function _iterableToArray$2(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _arrayWithoutHoles$2(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
      }
      function _arrayLikeToArray$2(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var defaultMinDate = /* @__PURE__ */ new Date();
      defaultMinDate.setFullYear(1, 0, 1);
      defaultMinDate.setHours(0, 0, 0, 0);
      var defaultMaxDate = /* @__PURE__ */ new Date(864e13);
      var baseClassName = "react-calendar";
      var allViews$1 = ["century", "decade", "year", "month"];
      var allValueTypes$1 = [].concat(_toConsumableArray$2(allViews$1.slice(1)), ["day"]);
      function toDate$1(value) {
        if (value instanceof Date) {
          return value;
        }
        return new Date(value);
      }
      function getLimitedViews(minDetail, maxDetail) {
        return allViews$1.slice(allViews$1.indexOf(minDetail), allViews$1.indexOf(maxDetail) + 1);
      }
      function isViewAllowed(view, minDetail, maxDetail) {
        var views = getLimitedViews(minDetail, maxDetail);
        return views.indexOf(view) !== -1;
      }
      function getView(view, minDetail, maxDetail) {
        if (isViewAllowed(view, minDetail, maxDetail)) {
          return view;
        }
        return maxDetail;
      }
      function getValueType(maxDetail) {
        return allValueTypes$1[allViews$1.indexOf(maxDetail)];
      }
      function getValue$1(value, index) {
        if (!value) {
          return null;
        }
        var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;
        if (!rawValue) {
          return null;
        }
        var valueDate = toDate$1(rawValue);
        if (isNaN(valueDate.getTime())) {
          throw new Error("Invalid date: ".concat(value));
        }
        return valueDate;
      }
      function getDetailValue(_ref, index) {
        var value = _ref.value, minDate = _ref.minDate, maxDate = _ref.maxDate, maxDetail = _ref.maxDetail;
        var valuePiece = getValue$1(value, index);
        if (!valuePiece) {
          return null;
        }
        var valueType = getValueType(maxDetail);
        var detailValueFrom = [getBegin$1, getEnd$1][index](valueType, valuePiece);
        return between$1(detailValueFrom, minDate, maxDate);
      }
      var getDetailValueFrom = function getDetailValueFrom2(args) {
        return getDetailValue(args, 0);
      };
      var getDetailValueTo = function getDetailValueTo2(args) {
        return getDetailValue(args, 1);
      };
      var getDetailValueArray = function getDetailValueArray2(args) {
        var value = args.value;
        if (Array.isArray(value)) {
          return value;
        }
        return [getDetailValueFrom, getDetailValueTo].map(function(fn) {
          return fn(args);
        });
      };
      function getActiveStartDate(props) {
        var maxDate = props.maxDate, maxDetail = props.maxDetail, minDate = props.minDate, minDetail = props.minDetail, value = props.value, view = props.view;
        var rangeType = getView(view, minDetail, maxDetail);
        var valueFrom = getDetailValueFrom({
          value,
          minDate,
          maxDate,
          maxDetail
        }) || /* @__PURE__ */ new Date();
        return getBegin$1(rangeType, valueFrom);
      }
      function getInitialActiveStartDate(props) {
        var activeStartDate = props.activeStartDate, defaultActiveStartDate = props.defaultActiveStartDate, defaultValue = props.defaultValue, defaultView = props.defaultView, maxDetail = props.maxDetail, minDetail = props.minDetail, value = props.value, view = props.view, otherProps = _objectWithoutProperties$1(props, _excluded$1);
        var rangeType = getView(view, minDetail, maxDetail);
        var valueFrom = activeStartDate || defaultActiveStartDate;
        if (valueFrom) {
          return getBegin$1(rangeType, valueFrom);
        }
        return getActiveStartDate(_objectSpread$1(
          {
            maxDetail,
            minDetail,
            value: value || defaultValue,
            view: view || defaultView
          },
          otherProps
        ));
      }
      var getIsSingleValue = function getIsSingleValue2(value) {
        return value && [].concat(value).length === 1;
      };
      var Calendar = function(_Component) {
        _inherits$1(Calendar2, _Component);
        var _super = _createSuper$1(Calendar2);
        function Calendar2() {
          var _this;
          _classCallCheck$1(this, Calendar2);
          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(_args));
          _defineProperty$z(_assertThisInitialized$2(_this), "state", {
            activeStartDate: _this.props.defaultActiveStartDate,
            value: _this.props.defaultValue,
            view: _this.props.defaultView
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "setStateAndCallCallbacks", function(nextState, event, callback) {
            var _assertThisInitialize = _assertThisInitialized$2(_this), previousActiveStartDate = _assertThisInitialize.activeStartDate, previousView = _assertThisInitialize.view;
            var _this$props = _this.props, allowPartialRange = _this$props.allowPartialRange, onActiveStartDateChange = _this$props.onActiveStartDateChange, onChange = _this$props.onChange, onViewChange = _this$props.onViewChange, selectRange = _this$props.selectRange;
            var prevArgs = {
              activeStartDate: previousActiveStartDate,
              view: previousView
            };
            _this.setState(nextState, function() {
              var args = {
                action: nextState.action,
                activeStartDate: nextState.activeStartDate || _this.activeStartDate,
                value: nextState.value || _this.value,
                view: nextState.view || _this.view
              };
              function shouldUpdate(key) {
                return (
                  // Key must exist, and…
                  key in nextState && // …key changed from undefined to defined or the other way around, or…
                  (_typeof$2(nextState[key]) !== _typeof$2(prevArgs[key]) || // …value changed.
                  (nextState[key] instanceof Date ? nextState[key].getTime() !== prevArgs[key].getTime() : nextState[key] !== prevArgs[key]))
                );
              }
              if (shouldUpdate("activeStartDate")) {
                if (onActiveStartDateChange) onActiveStartDateChange(args);
              }
              if (shouldUpdate("view")) {
                if (onViewChange) onViewChange(args);
              }
              if (shouldUpdate("value")) {
                if (onChange) {
                  if (selectRange) {
                    var isSingleValue = getIsSingleValue(nextState.value);
                    if (!isSingleValue) {
                      onChange(nextState.value, event);
                    } else if (allowPartialRange) {
                      onChange([nextState.value], event);
                    }
                  } else {
                    onChange(nextState.value, event);
                  }
                }
              }
              if (callback) callback(args);
            });
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "setActiveStartDate", function(nextActiveStartDate, action) {
            _this.setStateAndCallCallbacks({
              action,
              activeStartDate: nextActiveStartDate
            });
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "drillDown", function(nextActiveStartDate, event) {
            if (!_this.drillDownAvailable) {
              return;
            }
            _this.onClickTile(nextActiveStartDate, event);
            var _assertThisInitialize2 = _assertThisInitialized$2(_this), view = _assertThisInitialize2.view, views = _assertThisInitialize2.views;
            var onDrillDown = _this.props.onDrillDown;
            var nextView = views[views.indexOf(view) + 1];
            _this.setStateAndCallCallbacks(
              {
                action: "drillDown",
                activeStartDate: nextActiveStartDate,
                view: nextView
              },
              void 0,
              onDrillDown
            );
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "drillUp", function() {
            if (!_this.drillUpAvailable) {
              return;
            }
            var _assertThisInitialize3 = _assertThisInitialized$2(_this), activeStartDate = _assertThisInitialize3.activeStartDate, view = _assertThisInitialize3.view, views = _assertThisInitialize3.views;
            var onDrillUp = _this.props.onDrillUp;
            var nextView = views[views.indexOf(view) - 1];
            var nextActiveStartDate = getBegin$1(nextView, activeStartDate);
            _this.setStateAndCallCallbacks(
              {
                action: "drillUp",
                activeStartDate: nextActiveStartDate,
                view: nextView
              },
              void 0,
              onDrillUp
            );
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "onChange", function(value, event) {
            var selectRange = _this.props.selectRange;
            _this.onClickTile(value, event);
            var nextValue;
            if (selectRange) {
              var _assertThisInitialize4 = _assertThisInitialized$2(_this), previousValue = _assertThisInitialize4.value, valueType = _assertThisInitialize4.valueType;
              if (!getIsSingleValue(previousValue)) {
                nextValue = getBegin$1(valueType, value);
              } else {
                nextValue = getValueRange(valueType, previousValue, value);
              }
            } else {
              nextValue = _this.getProcessedValue(value);
            }
            var nextActiveStartDate = getActiveStartDate(_objectSpread$1(_objectSpread$1({}, _this.props), {}, {
              value: nextValue
            }));
            event.persist();
            _this.setStateAndCallCallbacks(
              {
                action: "onChange",
                activeStartDate: nextActiveStartDate,
                value: nextValue
              },
              event
            );
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "onClickTile", function(value, event) {
            var _assertThisInitialize5 = _assertThisInitialized$2(_this), view = _assertThisInitialize5.view;
            var _this$props2 = _this.props, onClickDay = _this$props2.onClickDay, onClickDecade = _this$props2.onClickDecade, onClickMonth = _this$props2.onClickMonth, onClickYear = _this$props2.onClickYear;
            var callback = function() {
              switch (view) {
                case "century":
                  return onClickDecade;
                case "decade":
                  return onClickYear;
                case "year":
                  return onClickMonth;
                case "month":
                  return onClickDay;
                default:
                  throw new Error("Invalid view: ".concat(view, "."));
              }
            }();
            if (callback) callback(value, event);
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "onMouseOver", function(value) {
            _this.setState(function(prevState) {
              if (prevState.hover && prevState.hover.getTime() === value.getTime()) {
                return null;
              }
              return {
                hover: value
              };
            });
          });
          _defineProperty$z(_assertThisInitialized$2(_this), "onMouseLeave", function() {
            _this.setState({
              hover: null
            });
          });
          return _this;
        }
        _createClass$1(Calendar2, [
          {
            key: "activeStartDate",
            get: function get2() {
              var activeStartDateProps = this.props.activeStartDate;
              var activeStartDateState = this.state.activeStartDate;
              return activeStartDateProps || activeStartDateState || getInitialActiveStartDate(this.props);
            }
          },
          {
            key: "value",
            get: function get2() {
              var _this$props3 = this.props, selectRange = _this$props3.selectRange, valueProps = _this$props3.value;
              var valueState = this.state.value;
              if (selectRange && getIsSingleValue(valueState)) {
                return valueState;
              }
              return valueProps !== void 0 ? valueProps : valueState;
            }
          },
          {
            key: "valueType",
            get: function get2() {
              var maxDetail = this.props.maxDetail;
              return getValueType(maxDetail);
            }
          },
          {
            key: "view",
            get: function get2() {
              var _this$props4 = this.props, minDetail = _this$props4.minDetail, maxDetail = _this$props4.maxDetail, viewProps = _this$props4.view;
              var viewState = this.state.view;
              return getView(viewProps || viewState, minDetail, maxDetail);
            }
          },
          {
            key: "views",
            get: function get2() {
              var _this$props5 = this.props, minDetail = _this$props5.minDetail, maxDetail = _this$props5.maxDetail;
              return getLimitedViews(minDetail, maxDetail);
            }
          },
          {
            key: "hover",
            get: function get2() {
              var selectRange = this.props.selectRange;
              var hover = this.state.hover;
              return selectRange ? hover : null;
            }
          },
          {
            key: "drillDownAvailable",
            get: function get2() {
              var view = this.view, views = this.views;
              return views.indexOf(view) < views.length - 1;
            }
          },
          {
            key: "drillUpAvailable",
            get: function get2() {
              var view = this.view, views = this.views;
              return views.indexOf(view) > 0;
            }
            /**
             * Gets current value in a desired format.
             */
          },
          {
            key: "getProcessedValue",
            value: function getProcessedValue(value) {
              var _this$props6 = this.props, minDate = _this$props6.minDate, maxDate = _this$props6.maxDate, maxDetail = _this$props6.maxDetail, returnValue = _this$props6.returnValue;
              var processFunction = function() {
                switch (returnValue) {
                  case "start":
                    return getDetailValueFrom;
                  case "end":
                    return getDetailValueTo;
                  case "range":
                    return getDetailValueArray;
                  default:
                    throw new Error("Invalid returnValue.");
                }
              }();
              return processFunction({
                value,
                minDate,
                maxDate,
                maxDetail
              });
            }
          },
          {
            key: "renderContent",
            value: function renderContent(next) {
              var currentActiveStartDate = this.activeStartDate, onMouseOver = this.onMouseOver, valueType = this.valueType, value = this.value, view = this.view;
              var _this$props7 = this.props, calendarType = _this$props7.calendarType, locale2 = _this$props7.locale, maxDate = _this$props7.maxDate, minDate = _this$props7.minDate, selectRange = _this$props7.selectRange, tileClassName = _this$props7.tileClassName, tileContent = _this$props7.tileContent, tileDisabled = _this$props7.tileDisabled;
              var hover = this.hover;
              var activeStartDate = next ? getBeginNext(view, currentActiveStartDate) : getBegin$1(view, currentActiveStartDate);
              var onClick = this.drillDownAvailable ? this.drillDown : this.onChange;
              var commonProps = {
                activeStartDate,
                hover,
                locale: locale2,
                maxDate,
                minDate,
                onClick,
                onMouseOver: selectRange ? onMouseOver : null,
                tileClassName,
                tileContent,
                tileDisabled,
                value,
                valueType
              };
              switch (view) {
                case "century": {
                  var formatYear2 = this.props.formatYear;
                  return React__default["default"].createElement(CenturyView, _extends$1(
                    {
                      formatYear: formatYear2
                    },
                    commonProps
                  ));
                }
                case "decade": {
                  var _formatYear = this.props.formatYear;
                  return React__default["default"].createElement(DecadeView, _extends$1(
                    {
                      formatYear: _formatYear
                    },
                    commonProps
                  ));
                }
                case "year": {
                  var _this$props8 = this.props, formatMonth2 = _this$props8.formatMonth, formatMonthYear2 = _this$props8.formatMonthYear;
                  return React__default["default"].createElement(YearView, _extends$1(
                    {
                      formatMonth: formatMonth2,
                      formatMonthYear: formatMonthYear2
                    },
                    commonProps
                  ));
                }
                case "month": {
                  var _this$props9 = this.props, formatDay2 = _this$props9.formatDay, formatLongDate2 = _this$props9.formatLongDate, formatShortWeekday2 = _this$props9.formatShortWeekday, onClickWeekNumber = _this$props9.onClickWeekNumber, showDoubleView = _this$props9.showDoubleView, showFixedNumberOfWeeks = _this$props9.showFixedNumberOfWeeks, showNeighboringMonth = _this$props9.showNeighboringMonth, showWeekNumbers = _this$props9.showWeekNumbers;
                  var onMouseLeave = this.onMouseLeave;
                  return React__default["default"].createElement(MonthView, _extends$1(
                    {
                      calendarType,
                      formatDay: formatDay2,
                      formatLongDate: formatLongDate2,
                      formatShortWeekday: formatShortWeekday2,
                      onClickWeekNumber,
                      onMouseLeave: selectRange ? onMouseLeave : null,
                      showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== "undefined" ? showFixedNumberOfWeeks : showDoubleView,
                      showNeighboringMonth,
                      showWeekNumbers
                    },
                    commonProps
                  ));
                }
                default:
                  throw new Error("Invalid view: ".concat(view, "."));
              }
            }
          },
          {
            key: "renderNavigation",
            value: function renderNavigation() {
              var showNavigation = this.props.showNavigation;
              if (!showNavigation) {
                return null;
              }
              var activeStartDate = this.activeStartDate, view = this.view, views = this.views;
              var _this$props10 = this.props, formatMonthYear2 = _this$props10.formatMonthYear, formatYear2 = _this$props10.formatYear, locale2 = _this$props10.locale, maxDate = _this$props10.maxDate, minDate = _this$props10.minDate, navigationAriaLabel = _this$props10.navigationAriaLabel, navigationAriaLive = _this$props10.navigationAriaLive, navigationLabel = _this$props10.navigationLabel, next2AriaLabel = _this$props10.next2AriaLabel, next2Label = _this$props10.next2Label, nextAriaLabel = _this$props10.nextAriaLabel, nextLabel = _this$props10.nextLabel, prev2AriaLabel = _this$props10.prev2AriaLabel, prev2Label = _this$props10.prev2Label, prevAriaLabel = _this$props10.prevAriaLabel, prevLabel = _this$props10.prevLabel, showDoubleView = _this$props10.showDoubleView;
              return React__default["default"].createElement(Navigation, {
                activeStartDate,
                drillUp: this.drillUp,
                formatMonthYear: formatMonthYear2,
                formatYear: formatYear2,
                locale: locale2,
                maxDate,
                minDate,
                navigationAriaLabel,
                navigationAriaLive,
                navigationLabel,
                next2AriaLabel,
                next2Label,
                nextAriaLabel,
                nextLabel,
                prev2AriaLabel,
                prev2Label,
                prevAriaLabel,
                prevLabel,
                setActiveStartDate: this.setActiveStartDate,
                showDoubleView,
                view,
                views
              });
            }
          },
          {
            key: "render",
            value: function render() {
              var _this$props11 = this.props, className2 = _this$props11.className, inputRef = _this$props11.inputRef, selectRange = _this$props11.selectRange, showDoubleView = _this$props11.showDoubleView;
              var onMouseLeave = this.onMouseLeave, value = this.value;
              var valueArray = [].concat(value);
              return React__default["default"].createElement(
                "div",
                {
                  className: mergeClassNames(baseClassName, selectRange && valueArray.length === 1 && "".concat(baseClassName, "--selectRange"), showDoubleView && "".concat(baseClassName, "--doubleView"), className2),
                  ref: inputRef
                },
                this.renderNavigation(),
                React__default["default"].createElement(
                  "div",
                  {
                    className: "".concat(baseClassName, "__viewContainer"),
                    onBlur: selectRange ? onMouseLeave : null,
                    onMouseLeave: selectRange ? onMouseLeave : null
                  },
                  this.renderContent(),
                  showDoubleView && this.renderContent(true)
                )
              );
            }
          }
        ]);
        return Calendar2;
      }(React.Component);
      Calendar.defaultProps = {
        maxDate: defaultMaxDate,
        maxDetail: "month",
        minDate: defaultMinDate,
        minDetail: "century",
        returnValue: "start",
        showNavigation: true,
        showNeighboringMonth: true
      };
      var isActiveStartDate = propTypes$1.exports.instanceOf(Date);
      var isLooseValue = propTypes$1.exports.oneOfType([propTypes$1.exports.string, isValue]);
      Calendar.propTypes = {
        activeStartDate: isActiveStartDate,
        allowPartialRange: propTypes$1.exports.bool,
        calendarType: isCalendarType,
        className: isClassName,
        defaultActiveStartDate: isActiveStartDate,
        defaultValue: isLooseValue,
        defaultView: isView,
        formatDay: propTypes$1.exports.func,
        formatLongDate: propTypes$1.exports.func,
        formatMonth: propTypes$1.exports.func,
        formatMonthYear: propTypes$1.exports.func,
        formatShortWeekday: propTypes$1.exports.func,
        formatYear: propTypes$1.exports.func,
        inputRef: isRef$1,
        locale: propTypes$1.exports.string,
        maxDate: isMaxDate$1,
        maxDetail: propTypes$1.exports.oneOf(allViews$1),
        minDate: isMinDate$1,
        minDetail: propTypes$1.exports.oneOf(allViews$1),
        navigationAriaLabel: propTypes$1.exports.string,
        navigationAriaLive: propTypes$1.exports.oneOf(["off", "polite", "assertive"]),
        navigationLabel: propTypes$1.exports.func,
        next2AriaLabel: propTypes$1.exports.string,
        next2Label: propTypes$1.exports.node,
        nextAriaLabel: propTypes$1.exports.string,
        nextLabel: propTypes$1.exports.node,
        onActiveStartDateChange: propTypes$1.exports.func,
        onChange: propTypes$1.exports.func,
        onClickDay: propTypes$1.exports.func,
        onClickDecade: propTypes$1.exports.func,
        onClickMonth: propTypes$1.exports.func,
        onClickWeekNumber: propTypes$1.exports.func,
        onClickYear: propTypes$1.exports.func,
        onDrillDown: propTypes$1.exports.func,
        onDrillUp: propTypes$1.exports.func,
        onViewChange: propTypes$1.exports.func,
        prev2AriaLabel: propTypes$1.exports.string,
        prev2Label: propTypes$1.exports.node,
        prevAriaLabel: propTypes$1.exports.string,
        prevLabel: propTypes$1.exports.node,
        returnValue: propTypes$1.exports.oneOf(["start", "end", "range"]),
        selectRange: propTypes$1.exports.bool,
        showDoubleView: propTypes$1.exports.bool,
        showFixedNumberOfWeeks: propTypes$1.exports.bool,
        showNavigation: propTypes$1.exports.bool,
        showNeighboringMonth: propTypes$1.exports.bool,
        showWeekNumbers: propTypes$1.exports.bool,
        tileClassName: propTypes$1.exports.oneOfType([propTypes$1.exports.func, isClassName]),
        tileContent: propTypes$1.exports.oneOfType([propTypes$1.exports.func, propTypes$1.exports.node]),
        tileDisabled: propTypes$1.exports.func,
        value: isLooseValue,
        view: isView
      };
      var esm$2 = Object.freeze({
        __proto__: null,
        "default": Calendar,
        Calendar,
        CenturyView,
        DecadeView,
        YearView,
        MonthView
      });
      var require$$4$1 = getAugmentedNamespace(esm$2);
      var getRect = function getRect2(element) {
        return element.getBoundingClientRect();
      };
      var detectElementOverflow = function detectElementOverflow2(element, container) {
        return {
          get collidedTop() {
            return getRect(element).top < getRect(container).top;
          },
          get collidedBottom() {
            return getRect(element).bottom > getRect(container).bottom;
          },
          get collidedLeft() {
            return getRect(element).left < getRect(container).left;
          },
          get collidedRight() {
            return getRect(element).right > getRect(container).right;
          },
          get overflowTop() {
            return getRect(container).top - getRect(element).top;
          },
          get overflowBottom() {
            return getRect(element).bottom - getRect(container).bottom;
          },
          get overflowLeft() {
            return getRect(container).left - getRect(element).left;
          },
          get overflowRight() {
            return getRect(element).right - getRect(container).right;
          }
        };
      };
      var isProduction = false;
      function warning(condition, message) {
        if (!isProduction) {
          if (condition) {
            return;
          }
          var text = "Warning: " + message;
          if (typeof console !== "undefined") {
            console.warn(text);
          }
          try {
            throw Error(text);
          } catch (x) {
          }
        }
      }
      var _excluded = ["invertAxis", "invertSecondaryAxis"];
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
        if (superClass) _setPrototypeOf$1(subClass, superClass);
      }
      function _setPrototypeOf$1(o, p) {
        _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf$1(o, p);
      }
      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived), result;
          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }
          return _possibleConstructorReturn(this, result);
        };
      }
      function _possibleConstructorReturn(self2, call) {
        if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }
        return _assertThisInitialized$1(self2);
      }
      function _assertThisInitialized$1(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
          }));
          return true;
        } catch (e) {
          return false;
        }
      }
      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
          return o2.__proto__ || Object.getPrototypeOf(o2);
        };
        return _getPrototypeOf(o);
      }
      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {};
        var target = _objectWithoutPropertiesLoose(source, excluded);
        var key, i;
        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }
        return target;
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys.push.apply(keys, symbols);
        }
        return keys;
      }
      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty$y(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      function _defineProperty$y(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _typeof$1(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof$1 = function _typeof2(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof$1 = function _typeof2(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof$1(obj);
      }
      var isBrowser = typeof window !== "undefined";
      var isDisplayContentsSupported = isBrowser && "CSS" in window && "supports" in window.CSS && CSS.supports("display", "contents");
      var isMutationObserverSupported = isBrowser && "MutationObserver" in window;
      function capitalize(a) {
        return a[0].toUpperCase() + a.slice(1);
      }
      function findScrollContainer(element) {
        if (!element) {
          return void 0;
        }
        var parent = element.parentElement;
        while (parent) {
          var _window$getComputedSt = window.getComputedStyle(parent), overflow = _window$getComputedSt.overflow;
          if (overflow.split(" ").every(function(o) {
            return o === "auto" || o === "scroll";
          })) {
            return parent;
          }
          parent = parent.parentElement;
        }
        return document.documentElement;
      }
      function alignAxis(_ref) {
        var axis = _ref.axis, container = _ref.container, element = _ref.element, invertAxis = _ref.invertAxis, secondary = _ref.secondary, scrollContainer = _ref.scrollContainer, spacing = _ref.spacing;
        var style = window.getComputedStyle(element);
        var parent = container.parentElement;
        var scrollContainerCollisions = detectElementOverflow(parent, scrollContainer);
        var documentCollisions = detectElementOverflow(parent, document.documentElement);
        var isX = axis === "x";
        var startProperty = isX ? "left" : "top";
        var endProperty = isX ? "right" : "bottom";
        var sizeProperty = isX ? "width" : "height";
        var overflowStartProperty = "overflow".concat(capitalize(startProperty));
        var overflowEndProperty = "overflow".concat(capitalize(endProperty));
        var scrollProperty = "scroll".concat(capitalize(startProperty));
        var uppercasedSizeProperty = capitalize(sizeProperty);
        var offsetSizeProperty = "offset".concat(uppercasedSizeProperty);
        var clientSizeProperty = "client".concat(uppercasedSizeProperty);
        var minSizeProperty = "min-".concat(sizeProperty);
        var scrollbarWidth = scrollContainer[offsetSizeProperty] - scrollContainer[clientSizeProperty];
        var startSpacing = _typeof$1(spacing) === "object" ? spacing[startProperty] : spacing;
        var availableStartSpace = -Math.max(scrollContainerCollisions[overflowStartProperty], documentCollisions[overflowStartProperty] + document.documentElement[scrollProperty]) - startSpacing;
        var endSpacing = _typeof$1(spacing) === "object" ? spacing[endProperty] : spacing;
        var availableEndSpace = -Math.max(scrollContainerCollisions[overflowEndProperty], documentCollisions[overflowEndProperty] - document.documentElement[scrollProperty]) - endSpacing - scrollbarWidth;
        if (secondary) {
          availableStartSpace += parent[clientSizeProperty];
          availableEndSpace += parent[clientSizeProperty];
        }
        var offsetSize = element[offsetSizeProperty];
        function displayStart() {
          element.style[startProperty] = "auto";
          element.style[endProperty] = secondary ? "0" : "100%";
        }
        function displayEnd() {
          element.style[startProperty] = secondary ? "0" : "100%";
          element.style[endProperty] = "auto";
        }
        function displayIfFits(availableSpace, display) {
          var fits2 = offsetSize <= availableSpace;
          if (fits2) {
            display();
          }
          return fits2;
        }
        function displayStartIfFits() {
          return displayIfFits(availableStartSpace, displayStart);
        }
        function displayEndIfFits() {
          return displayIfFits(availableEndSpace, displayEnd);
        }
        function displayWhereverShrinkedFits() {
          var moreSpaceStart = availableStartSpace > availableEndSpace;
          var minSize = style[minSizeProperty] && parseInt(style[minSizeProperty], 10);
          function shrinkToSize(size2) {
            warning(!minSize || size2 >= minSize, "<Fit />'s child will not fit anywhere with its current ".concat(minSizeProperty, " of ").concat(minSize, "px."));
            var newSize = Math.max(size2, minSize || 0);
            warning(false, "<Fit />'s child needed to have its ".concat(sizeProperty, " decreased to ").concat(newSize, "px."));
            element.style[sizeProperty] = "".concat(newSize, "px");
          }
          if (moreSpaceStart) {
            shrinkToSize(availableStartSpace);
            displayStart();
          } else {
            shrinkToSize(availableEndSpace);
            displayEnd();
          }
        }
        var fits;
        if (invertAxis) {
          fits = displayStartIfFits() || displayEndIfFits();
        } else {
          fits = displayEndIfFits() || displayStartIfFits();
        }
        if (!fits) {
          displayWhereverShrinkedFits();
        }
      }
      function alignMainAxis(args) {
        alignAxis(args);
      }
      function alignSecondaryAxis(args) {
        alignAxis(_objectSpread(_objectSpread({}, args), {}, {
          axis: args.axis === "x" ? "y" : "x",
          secondary: true
        }));
      }
      function alignBothAxis(args) {
        var invertAxis = args.invertAxis, invertSecondaryAxis = args.invertSecondaryAxis, commonArgs = _objectWithoutProperties(args, _excluded);
        alignMainAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
          invertAxis
        }));
        alignSecondaryAxis(_objectSpread(_objectSpread({}, commonArgs), {}, {
          invertAxis: invertSecondaryAxis
        }));
      }
      var Fit = function(_Component) {
        _inherits(Fit2, _Component);
        var _super = _createSuper(Fit2);
        function Fit2() {
          var _this;
          _classCallCheck(this, Fit2);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _defineProperty$y(_assertThisInitialized$1(_this), "onMutation", function() {
            _this.fit();
          });
          _defineProperty$y(_assertThisInitialized$1(_this), "mutationObserver", isMutationObserverSupported && new MutationObserver(_this.onMutation));
          _defineProperty$y(_assertThisInitialized$1(_this), "fit", function() {
            var _assertThisInitialize = _assertThisInitialized$1(_this), scrollContainer = _assertThisInitialize.scrollContainer, container = _assertThisInitialize.container, element = _assertThisInitialize.element;
            if (!element) {
              return;
            }
            var elementWidth = element.clientWidth;
            var elementHeight = element.clientHeight;
            if (_this.elementWidth === elementWidth && _this.elementHeight === elementHeight) {
              return;
            }
            _this.elementWidth = elementWidth;
            _this.elementHeight = elementHeight;
            var parent = container.parentElement;
            if (!parent) {
              return;
            }
            var style = window.getComputedStyle(element);
            var position = style.position;
            if (position !== "absolute") {
              warning(false, "<Fit />'s child does not have absolute position. You should apply `position: absolute` to it.");
              element.style.position = "absolute";
            }
            var parentStyle = window.getComputedStyle(parent);
            var parentPosition = parentStyle.position;
            if (parentPosition !== "relative" && parentPosition !== "absolute") {
              warning(false, "<Fit />'s parent does not have relative position. You should apply `position: relative` to it.");
              parent.style.position = "relative";
            }
            var _this$props = _this.props, invertAxis = _this$props.invertAxis, invertSecondaryAxis = _this$props.invertSecondaryAxis, mainAxis = _this$props.mainAxis, spacing = _this$props.spacing;
            alignBothAxis({
              container,
              element,
              invertAxis,
              invertSecondaryAxis,
              axis: mainAxis,
              scrollContainer,
              spacing
            });
          });
          return _this;
        }
        _createClass(Fit2, [
          {
            key: "componentDidMount",
            value: function componentDidMount() {
              if (!isDisplayContentsSupported) {
                var element = reactDom.findDOMNode(this);
                this.container = element;
                this.element = element;
                this.scrollContainer = findScrollContainer(element);
              }
              this.fit();
              if (isMutationObserverSupported) {
                this.mutationObserver.observe(this.element, {
                  attributes: true,
                  attributeFilter: ["class", "style"]
                });
              }
            }
          },
          {
            key: "render",
            value: function render() {
              var _this2 = this;
              var children = this.props.children;
              var child = React__default["default"].Children.only(children);
              if (isDisplayContentsSupported) {
                return React__default["default"].createElement(
                  "span",
                  {
                    ref: function ref(container) {
                      _this2.container = container;
                      var element = container && container.firstChild;
                      _this2.element = element;
                      _this2.scrollContainer = findScrollContainer(element);
                    },
                    style: {
                      display: "contents"
                    }
                  },
                  child
                );
              }
              return child;
            }
          }
        ]);
        return Fit2;
      }(React.Component);
      Fit.propTypes = {
        children: propTypes$1.exports.node,
        invertAxis: propTypes$1.exports.bool,
        invertSecondaryAxis: propTypes$1.exports.bool,
        mainAxis: propTypes$1.exports.oneOf(["x", "y"]),
        spacing: propTypes$1.exports.oneOfType([propTypes$1.exports.number, propTypes$1.exports.shape({
          bottom: propTypes$1.exports.number.isRequired,
          left: propTypes$1.exports.number.isRequired,
          right: propTypes$1.exports.number.isRequired,
          top: propTypes$1.exports.number.isRequired
        })])
      };
      Fit.defaultProps = {
        mainAxis: "y",
        spacing: 8
      };
      var Fit$1 = Object.freeze({
        __proto__: null,
        "default": Fit
      });
      var require$$5 = getAugmentedNamespace(Fit$1);
      var DateInput = {};
      var require$$2 = getAugmentedNamespace(esm$3);
      var Divider = {};
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = Divider2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function Divider2(_ref) {
          var children = _ref.children;
          return _react["default"].createElement(
            "span",
            {
              className: "react-date-picker__inputGroup__divider"
            },
            children
          );
        }
        Divider2.propTypes = {
          children: _propTypes2["default"].node
        };
      })(Divider);
      var DayInput = {};
      var Input = {};
      function mergeRefs() {
        for (var _len = arguments.length, inputRefs = new Array(_len), _key = 0; _key < _len; _key++) {
          inputRefs[_key] = arguments[_key];
        }
        var filteredInputRefs = inputRefs.filter(Boolean);
        if (filteredInputRefs.length <= 1) {
          return filteredInputRefs[0];
        }
        return function mergedRefs(ref) {
          filteredInputRefs.forEach(function(inputRef) {
            if (typeof inputRef === "function") {
              inputRef(ref);
            } else {
              inputRef.current = ref;
            }
          });
        };
      }
      var esm$1 = Object.freeze({
        __proto__: null,
        "default": mergeRefs
      });
      var require$$3 = getAugmentedNamespace(esm$1);
      var allowedVariants = ["normal", "small-caps"];
      function getFontShorthand(element) {
        if (!element) {
          return "";
        }
        var style = window.getComputedStyle(element);
        if (style.font) {
          return style.font;
        }
        var isFontDefined = style["font-family"] !== "";
        if (!isFontDefined) {
          return "";
        }
        var fontVariant = allowedVariants.includes(style["font-variant"]) ? style["font-variant"] : "normal";
        return "".concat(style["font-style"], " ").concat(fontVariant, " ").concat(style["font-weight"], " ").concat(style["font-size"], " / ").concat(style["line-height"], " ").concat(style["font-family"]);
      }
      function measureText(text, font) {
        var canvas = measureText.canvas || (measureText.canvas = document.createElement("canvas"));
        var context = canvas.getContext("2d");
        if (!context) {
          return null;
        }
        context.font = font;
        var _context$measureText = context.measureText(text), width = _context$measureText.width;
        return Math.ceil(width);
      }
      function updateInputWidth(element) {
        if (typeof window === "undefined" || !element) {
          return null;
        }
        var font = getFontShorthand(element);
        var text = element.value || element.placeholder;
        var width = measureText(text, font);
        if (width === null) {
          return null;
        }
        element.style.width = "".concat(width, "px");
        return width;
      }
      var esm = Object.freeze({
        __proto__: null,
        getFontShorthand,
        measureText,
        updateInputWidth,
        "default": updateInputWidth
      });
      var require$$4 = getAugmentedNamespace(esm);
      var propTypes = {};
      Object.defineProperty(propTypes, "__esModule", {
        value: true
      });
      propTypes.isValueType = propTypes.isRef = propTypes.isMinDate = propTypes.isMaxDate = void 0;
      var _propTypes = _interopRequireDefault$1(propTypes$1.exports);
      function _interopRequireDefault$1(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, _typeof(obj);
      }
      function _toConsumableArray$1(arr) {
        return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
      }
      function _nonIterableSpread$1() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray$1(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
      }
      function _iterableToArray$1(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _arrayWithoutHoles$1(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
      }
      function _arrayLikeToArray$1(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      var allViews = ["century", "decade", "year", "month"];
      var allValueTypes = [].concat(_toConsumableArray$1(allViews.slice(1)), ["day"]);
      var isValueType = _propTypes["default"].oneOf(allValueTypes);
      propTypes.isValueType = isValueType;
      var isMinDate = function isMinDate2(props, propName, componentName) {
        var minDate = props[propName];
        if (!minDate) {
          return null;
        }
        if (!(minDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var maxDate = props.maxDate;
        if (maxDate && minDate > maxDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(minDate), "` supplied to `").concat(componentName, "`, minDate cannot be larger than maxDate."));
        }
        return null;
      };
      propTypes.isMinDate = isMinDate;
      var isMaxDate = function isMaxDate2(props, propName, componentName) {
        var maxDate = props[propName];
        if (!maxDate) {
          return null;
        }
        if (!(maxDate instanceof Date)) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, expected instance of `Date`."));
        }
        var minDate = props.minDate;
        if (minDate && maxDate < minDate) {
          return new Error("Invalid prop `".concat(propName, "` of type `").concat(_typeof(maxDate), "` supplied to `").concat(componentName, "`, maxDate cannot be smaller than minDate."));
        }
        return null;
      };
      propTypes.isMaxDate = isMaxDate;
      var isRef = _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
        current: _propTypes["default"].any
      })]);
      propTypes.isRef = isRef;
      (function(exports3) {
        function _typeof2(obj) {
          "@babel/helpers - typeof";
          return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof2(obj);
        }
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = Input2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _mergeClassNames = _interopRequireDefault2(require$$3$1);
        var _mergeRefs = _interopRequireDefault2(require$$3);
        var _updateInputWidth = _interopRequireWildcard(require$$4);
        var _propTypes22 = propTypes;
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
          var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
            return { "default": obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj["default"] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        var isIEOrEdgeLegacy = typeof window !== "undefined" && /(MSIE|Trident\/|Edge\/)/.test(window.navigator.userAgent);
        var isFirefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
        function onFocus(event) {
          var target = event.target;
          if (isIEOrEdgeLegacy) {
            requestAnimationFrame(function() {
              return target.select();
            });
          } else {
            target.select();
          }
        }
        function updateInputWidthOnFontLoad(element) {
          if (!document.fonts) {
            return;
          }
          var font = (0, _updateInputWidth.getFontShorthand)(element);
          if (!font) {
            return;
          }
          var isFontLoaded = document.fonts.check(font);
          if (isFontLoaded) {
            return;
          }
          function onLoadingDone() {
            (0, _updateInputWidth["default"])(element);
          }
          document.fonts.addEventListener("loadingdone", onLoadingDone);
        }
        function getSelectionString(input) {
          if (input && "selectionStart" in input && input.selectionStart !== null) {
            return input.value.slice(input.selectionStart, input.selectionEnd);
          }
          if ("getSelection" in window) {
            return window.getSelection().toString();
          }
          return null;
        }
        function makeOnKeyPress(maxLength) {
          return function onKeyPress(event) {
            if (isFirefox) {
              return;
            }
            var key = event.key, input = event.target;
            var value = input.value;
            var isNumberKey = key.length === 1 && /\d/.test(key);
            var selection = getSelectionString(input);
            if (!isNumberKey || !(selection || value.length < maxLength)) {
              event.preventDefault();
            }
          };
        }
        function Input2(_ref) {
          var ariaLabel = _ref.ariaLabel, autoFocus = _ref.autoFocus, className2 = _ref.className, disabled = _ref.disabled, inputRef = _ref.inputRef, max = _ref.max, min = _ref.min, name = _ref.name, nameForClass = _ref.nameForClass, onChange = _ref.onChange, onKeyDown = _ref.onKeyDown, _onKeyUp = _ref.onKeyUp, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "--" : _ref$placeholder, required = _ref.required, showLeadingZeros = _ref.showLeadingZeros, step = _ref.step, value = _ref.value;
          var hasLeadingZero = showLeadingZeros && value && value < 10 && (value === "0" || !value.toString().startsWith("0"));
          var maxLength = max ? max.toString().length : null;
          return [hasLeadingZero && _react["default"].createElement(
            "span",
            {
              key: "leadingZero",
              className: "".concat(className2, "__leadingZero")
            },
            "0"
          ), _react["default"].createElement("input", {
            key: "input",
            "aria-label": ariaLabel,
            autoComplete: "off",
            autoFocus,
            className: (0, _mergeClassNames["default"])("".concat(className2, "__input"), "".concat(className2, "__").concat(nameForClass || name), hasLeadingZero && "".concat(className2, "__input--hasLeadingZero")),
            "data-input": "true",
            disabled,
            inputMode: "numeric",
            max,
            min,
            name,
            onChange,
            onFocus,
            onKeyDown,
            onKeyPress: makeOnKeyPress(maxLength),
            onKeyUp: function onKeyUp(event) {
              (0, _updateInputWidth["default"])(event.target);
              if (_onKeyUp) {
                _onKeyUp(event);
              }
            },
            placeholder,
            ref: (0, _mergeRefs["default"])(_updateInputWidth["default"], updateInputWidthOnFontLoad, inputRef),
            required,
            step,
            type: "number",
            value: value !== null ? value : ""
          })];
        }
        Input2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          autoFocus: _propTypes2["default"].bool,
          className: _propTypes2["default"].string.isRequired,
          disabled: _propTypes2["default"].bool,
          inputRef: _propTypes22.isRef,
          max: _propTypes2["default"].number,
          min: _propTypes2["default"].number,
          name: _propTypes2["default"].string,
          nameForClass: _propTypes2["default"].string,
          onChange: _propTypes2["default"].func,
          onKeyDown: _propTypes2["default"].func,
          onKeyUp: _propTypes2["default"].func,
          placeholder: _propTypes2["default"].string,
          required: _propTypes2["default"].bool,
          showLeadingZeros: _propTypes2["default"].bool,
          step: _propTypes2["default"].number,
          value: _propTypes2["default"].string
        };
      })(Input);
      var utils = {};
      Object.defineProperty(utils, "__esModule", {
        value: true
      });
      utils.between = between;
      utils.safeMax = safeMax;
      utils.safeMin = safeMin;
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      }
      function between(value, min, max) {
        if (min && min > value) {
          return min;
        }
        if (max && max < value) {
          return max;
        }
        return value;
      }
      function isValidNumber(num) {
        return num !== null && num !== false && !Number.isNaN(Number(num));
      }
      function safeMin() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return Math.min.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
      function safeMax() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return Math.max.apply(Math, _toConsumableArray(args.filter(isValidNumber)));
      }
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = DayInput2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _dateUtils2 = require$$2;
        var _Input = _interopRequireDefault2(Input);
        var _propTypes22 = propTypes;
        var _utils = utils;
        var _excluded2 = ["maxDate", "minDate", "month", "year"];
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _objectWithoutProperties2(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose2(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function DayInput2(_ref) {
          var maxDate = _ref.maxDate, minDate = _ref.minDate, month = _ref.month, year = _ref.year, otherProps = _objectWithoutProperties2(_ref, _excluded2);
          var currentMonthMaxDays = function() {
            if (!month) {
              return 31;
            }
            return (0, _dateUtils2.getDaysInMonth)(new Date(year, month - 1, 1));
          }();
          function isSameMonth(date) {
            return date && year === (0, _dateUtils2.getYear)(date).toString() && month === (0, _dateUtils2.getMonthHuman)(date).toString();
          }
          var maxDay = (0, _utils.safeMin)(currentMonthMaxDays, isSameMonth(maxDate) && (0, _dateUtils2.getDate)(maxDate));
          var minDay = (0, _utils.safeMax)(1, isSameMonth(minDate) && (0, _dateUtils2.getDate)(minDate));
          return _react["default"].createElement(_Input["default"], _extends2(
            {
              max: maxDay,
              min: minDay,
              name: "day"
            },
            otherProps
          ));
        }
        DayInput2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          className: _propTypes2["default"].string.isRequired,
          disabled: _propTypes2["default"].bool,
          inputRef: _propTypes22.isRef,
          maxDate: _propTypes22.isMaxDate,
          minDate: _propTypes22.isMinDate,
          month: _propTypes2["default"].string,
          onChange: _propTypes2["default"].func,
          onKeyDown: _propTypes2["default"].func,
          onKeyUp: _propTypes2["default"].func,
          placeholder: _propTypes2["default"].string,
          required: _propTypes2["default"].bool,
          showLeadingZeros: _propTypes2["default"].bool,
          value: _propTypes2["default"].string,
          year: _propTypes2["default"].string
        };
      })(DayInput);
      var MonthInput = {};
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = MonthInput2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _dateUtils2 = require$$2;
        var _Input = _interopRequireDefault2(Input);
        var _propTypes22 = propTypes;
        var _utils = utils;
        var _excluded2 = ["maxDate", "minDate", "year"];
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _objectWithoutProperties2(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose2(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function MonthInput2(_ref) {
          var maxDate = _ref.maxDate, minDate = _ref.minDate, year = _ref.year, otherProps = _objectWithoutProperties2(_ref, _excluded2);
          function isSameYear(date) {
            return date && year === (0, _dateUtils2.getYear)(date).toString();
          }
          var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils2.getMonthHuman)(maxDate));
          var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate) && (0, _dateUtils2.getMonthHuman)(minDate));
          return _react["default"].createElement(_Input["default"], _extends2(
            {
              max: maxMonth,
              min: minMonth,
              name: "month"
            },
            otherProps
          ));
        }
        MonthInput2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          className: _propTypes2["default"].string.isRequired,
          disabled: _propTypes2["default"].bool,
          inputRef: _propTypes22.isRef,
          maxDate: _propTypes22.isMaxDate,
          minDate: _propTypes22.isMinDate,
          onChange: _propTypes2["default"].func,
          onKeyDown: _propTypes2["default"].func,
          onKeyUp: _propTypes2["default"].func,
          placeholder: _propTypes2["default"].string,
          required: _propTypes2["default"].bool,
          showLeadingZeros: _propTypes2["default"].bool,
          value: _propTypes2["default"].string,
          year: _propTypes2["default"].string
        };
      })(MonthInput);
      var MonthSelect = {};
      var dateFormatter = {};
      var require$$0 = getAugmentedNamespace(esm$4);
      Object.defineProperty(dateFormatter, "__esModule", {
        value: true
      });
      dateFormatter.formatShortMonth = dateFormatter.formatMonth = void 0;
      dateFormatter.getFormatter = getFormatter;
      var _getUserLocale = _interopRequireDefault(require$$0);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var formatterCache = /* @__PURE__ */ new Map();
      function getFormatter(options) {
        return function(locale2, date) {
          var localeWithDefault = locale2 || (0, _getUserLocale["default"])();
          if (!formatterCache.has(localeWithDefault)) {
            formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
          }
          var formatterCacheLocale = formatterCache.get(localeWithDefault);
          if (!formatterCacheLocale.has(options)) {
            formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault, options).format);
          }
          return formatterCacheLocale.get(options)(date);
        };
      }
      function toSafeHour(date) {
        var safeDate = new Date(date);
        return new Date(safeDate.setHours(12));
      }
      function getSafeFormatter(options) {
        return function(locale2, date) {
          return getFormatter(options)(locale2, toSafeHour(date));
        };
      }
      var formatMonthOptions = {
        month: "long"
      };
      var formatShortMonthOptions = {
        month: "short"
      };
      var formatMonth = getSafeFormatter(formatMonthOptions);
      dateFormatter.formatMonth = formatMonth;
      var formatShortMonth = getSafeFormatter(formatShortMonthOptions);
      dateFormatter.formatShortMonth = formatShortMonth;
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = MonthSelect2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _mergeClassNames = _interopRequireDefault2(require$$3$1);
        var _dateUtils2 = require$$2;
        var _dateFormatter = dateFormatter;
        var _propTypes22 = propTypes;
        var _utils = utils;
        var _excluded2 = ["ariaLabel", "className", "inputRef", "locale", "maxDate", "minDate", "placeholder", "short", "value", "year"];
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _toConsumableArray2(arr) {
          return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
        }
        function _nonIterableSpread2() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray2(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
        }
        function _iterableToArray2(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
        function _arrayWithoutHoles2(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        }
        function _objectWithoutProperties2(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose2(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function MonthSelect2(_ref) {
          var ariaLabel = _ref.ariaLabel, className2 = _ref.className, inputRef = _ref.inputRef, locale2 = _ref.locale, maxDate = _ref.maxDate, minDate = _ref.minDate, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "--" : _ref$placeholder, _short = _ref["short"], value = _ref.value, year = _ref.year, otherProps = _objectWithoutProperties2(_ref, _excluded2);
          function isSameYear(date) {
            return date && year === (0, _dateUtils2.getYear)(date).toString();
          }
          var maxMonth = (0, _utils.safeMin)(12, isSameYear(maxDate) && (0, _dateUtils2.getMonthHuman)(maxDate));
          var minMonth = (0, _utils.safeMax)(1, isSameYear(minDate) && (0, _dateUtils2.getMonthHuman)(minDate));
          var dates2 = _toConsumableArray2(Array(12)).map(function(el, index) {
            return new Date(2019, index, 1);
          });
          var name = "month";
          var formatter = _short ? _dateFormatter.formatShortMonth : _dateFormatter.formatMonth;
          return _react["default"].createElement("select", _extends2(
            {
              "aria-label": ariaLabel,
              className: (0, _mergeClassNames["default"])("".concat(className2, "__input"), "".concat(className2, "__").concat(name)),
              "data-input": "true",
              "data-select": "true",
              name,
              ref: inputRef,
              value: value !== null ? value : ""
            },
            otherProps
          ), !value && _react["default"].createElement(
            "option",
            {
              value: ""
            },
            placeholder
          ), dates2.map(function(date) {
            var month = (0, _dateUtils2.getMonthHuman)(date);
            var disabled = month < minMonth || month > maxMonth;
            return _react["default"].createElement(
              "option",
              {
                key: month,
                disabled,
                value: month
              },
              formatter(locale2, date)
            );
          }));
        }
        MonthSelect2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          className: _propTypes2["default"].string.isRequired,
          disabled: _propTypes2["default"].bool,
          inputRef: _propTypes22.isRef,
          locale: _propTypes2["default"].string,
          maxDate: _propTypes22.isMaxDate,
          minDate: _propTypes22.isMinDate,
          onChange: _propTypes2["default"].func,
          onKeyDown: _propTypes2["default"].func,
          onKeyUp: _propTypes2["default"].func,
          placeholder: _propTypes2["default"].string,
          required: _propTypes2["default"].bool,
          "short": _propTypes2["default"].bool,
          value: _propTypes2["default"].string,
          year: _propTypes2["default"].string
        };
      })(MonthSelect);
      var YearInput = {};
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = YearInput2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _dateUtils2 = require$$2;
        var _Input = _interopRequireDefault2(Input);
        var _propTypes22 = propTypes;
        var _utils = utils;
        var _excluded2 = ["maxDate", "minDate", "placeholder", "valueType"];
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _objectWithoutProperties2(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose2(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function YearInput2(_ref) {
          var maxDate = _ref.maxDate, minDate = _ref.minDate, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "----" : _ref$placeholder, valueType = _ref.valueType, otherProps = _objectWithoutProperties2(_ref, _excluded2);
          var maxYear = (0, _utils.safeMin)(275760, maxDate && (0, _dateUtils2.getYear)(maxDate));
          var minYear = (0, _utils.safeMax)(1, minDate && (0, _dateUtils2.getYear)(minDate));
          var yearStep = function() {
            if (valueType === "century") {
              return 10;
            }
            return 1;
          }();
          return _react["default"].createElement(_Input["default"], _extends2(
            {
              max: maxYear,
              min: minYear,
              name: "year",
              placeholder,
              step: yearStep
            },
            otherProps
          ));
        }
        YearInput2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          className: _propTypes2["default"].string.isRequired,
          disabled: _propTypes2["default"].bool,
          inputRef: _propTypes22.isRef,
          maxDate: _propTypes22.isMaxDate,
          minDate: _propTypes22.isMinDate,
          onChange: _propTypes2["default"].func,
          onKeyDown: _propTypes2["default"].func,
          onKeyUp: _propTypes2["default"].func,
          placeholder: _propTypes2["default"].string,
          required: _propTypes2["default"].bool,
          value: _propTypes2["default"].string,
          valueType: _propTypes22.isValueType
        };
      })(YearInput);
      var NativeInput = {};
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = NativeInput2;
        var _react = _interopRequireDefault2(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _dateUtils2 = require$$2;
        var _propTypes22 = propTypes;
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function NativeInput2(_ref) {
          var ariaLabel = _ref.ariaLabel, disabled = _ref.disabled, maxDate = _ref.maxDate, minDate = _ref.minDate, name = _ref.name, onChange = _ref.onChange, required = _ref.required, value = _ref.value, valueType = _ref.valueType;
          var nativeInputType = function() {
            switch (valueType) {
              case "decade":
              case "year":
                return "number";
              case "month":
                return "month";
              case "day":
                return "date";
              default:
                throw new Error("Invalid valueType.");
            }
          }();
          var nativeValueParser = function() {
            switch (valueType) {
              case "century":
              case "decade":
              case "year":
                return _dateUtils2.getYear;
              case "month":
                return _dateUtils2.getISOLocalMonth;
              case "day":
                return _dateUtils2.getISOLocalDate;
              default:
                throw new Error("Invalid valueType.");
            }
          }();
          function stopPropagation(event) {
            event.stopPropagation();
          }
          return _react["default"].createElement("input", {
            "aria-label": ariaLabel,
            disabled,
            max: maxDate ? nativeValueParser(maxDate) : null,
            min: minDate ? nativeValueParser(minDate) : null,
            name,
            onChange,
            onFocus: stopPropagation,
            required,
            style: {
              visibility: "hidden",
              position: "absolute",
              zIndex: "-999"
            },
            type: nativeInputType,
            value: value ? nativeValueParser(value) : ""
          });
        }
        NativeInput2.propTypes = {
          ariaLabel: _propTypes2["default"].string,
          disabled: _propTypes2["default"].bool,
          maxDate: _propTypes22.isMaxDate,
          minDate: _propTypes22.isMinDate,
          name: _propTypes2["default"].string,
          onChange: _propTypes2["default"].func,
          required: _propTypes2["default"].bool,
          value: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].instanceOf(Date)]),
          valueType: _propTypes22.isValueType
        };
      })(NativeInput);
      var dates = {};
      Object.defineProperty(dates, "__esModule", {
        value: true
      });
      dates.getBegin = getBegin;
      dates.getEnd = getEnd;
      var _dateUtils = require$$2;
      function getBegin(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getCenturyStart)(date);
          case "decade":
            return (0, _dateUtils.getDecadeStart)(date);
          case "year":
            return (0, _dateUtils.getYearStart)(date);
          case "month":
            return (0, _dateUtils.getMonthStart)(date);
          case "day":
            return (0, _dateUtils.getDayStart)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      function getEnd(rangeType, date) {
        switch (rangeType) {
          case "century":
            return (0, _dateUtils.getCenturyEnd)(date);
          case "decade":
            return (0, _dateUtils.getDecadeEnd)(date);
          case "year":
            return (0, _dateUtils.getYearEnd)(date);
          case "month":
            return (0, _dateUtils.getMonthEnd)(date);
          case "day":
            return (0, _dateUtils.getDayEnd)(date);
          default:
            throw new Error("Invalid rangeType: ".concat(rangeType));
        }
      }
      (function(exports3) {
        function _typeof2(obj) {
          "@babel/helpers - typeof";
          return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof2(obj);
        }
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = void 0;
        var _react = _interopRequireWildcard(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _dateUtils2 = require$$2;
        var _Divider = _interopRequireDefault2(Divider);
        var _DayInput = _interopRequireDefault2(DayInput);
        var _MonthInput = _interopRequireDefault2(MonthInput);
        var _MonthSelect = _interopRequireDefault2(MonthSelect);
        var _YearInput = _interopRequireDefault2(YearInput);
        var _NativeInput = _interopRequireDefault2(NativeInput);
        var _dateFormatter = dateFormatter;
        var _dates = dates;
        var _propTypes22 = propTypes;
        var _utils = utils;
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
          var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
            return { "default": obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj["default"] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _iterableToArrayLimit(arr, i) {
          var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
          if (_i == null) return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties2(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties2(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", { writable: false });
          return Constructor;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
          Object.defineProperty(subClass, "prototype", { writable: false });
          if (superClass) _setPrototypeOf2(subClass, superClass);
        }
        function _setPrototypeOf2(o, p) {
          _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
            o2.__proto__ = p2;
            return o2;
          };
          return _setPrototypeOf2(o, p);
        }
        function _createSuper2(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct2();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf2(Derived), result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf2(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn2(this, result);
          };
        }
        function _possibleConstructorReturn2(self2, call) {
          if (call && (_typeof2(call) === "object" || typeof call === "function")) {
            return call;
          } else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
          }
          return _assertThisInitialized2(self2);
        }
        function _assertThisInitialized2(self2) {
          if (self2 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self2;
        }
        function _isNativeReflectConstruct2() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _getPrototypeOf2(o) {
          _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
            return o2.__proto__ || Object.getPrototypeOf(o2);
          };
          return _getPrototypeOf2(o);
        }
        function _defineProperty2(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _toConsumableArray2(arr) {
          return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
        }
        function _nonIterableSpread2() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray2(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
        }
        function _iterableToArray2(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
        function _arrayWithoutHoles2(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        }
        var defaultMinDate2 = /* @__PURE__ */ new Date();
        defaultMinDate2.setFullYear(1, 0, 1);
        defaultMinDate2.setHours(0, 0, 0, 0);
        var defaultMaxDate2 = /* @__PURE__ */ new Date(864e13);
        var allViews2 = ["century", "decade", "year", "month"];
        var allValueTypes2 = [].concat(_toConsumableArray2(allViews2.slice(1)), ["day"]);
        function toDate2(value) {
          if (value instanceof Date) {
            return value;
          }
          return new Date(value);
        }
        function datesAreDifferent2(date1, date2) {
          return date1 && !date2 || !date1 && date2 || date1 && date2 && date1.getTime() !== date2.getTime();
        }
        function getValueType2(maxDetail) {
          return allValueTypes2[allViews2.indexOf(maxDetail)];
        }
        function getValue2(value, index) {
          if (!value) {
            return null;
          }
          var rawValue = Array.isArray(value) && value.length === 2 ? value[index] : value;
          if (!rawValue) {
            return null;
          }
          var valueDate = toDate2(rawValue);
          if (isNaN(valueDate.getTime())) {
            throw new Error("Invalid date: ".concat(value));
          }
          return valueDate;
        }
        function getDetailValue2(_ref, index) {
          var value = _ref.value, minDate = _ref.minDate, maxDate = _ref.maxDate, maxDetail = _ref.maxDetail;
          var valuePiece = getValue2(value, index);
          if (!valuePiece) {
            return null;
          }
          var valueType = getValueType2(maxDetail);
          var detailValueFrom = [_dates.getBegin, _dates.getEnd][index](valueType, valuePiece);
          return (0, _utils.between)(detailValueFrom, minDate, maxDate);
        }
        var getDetailValueFrom2 = function getDetailValueFrom3(args) {
          return getDetailValue2(args, 0);
        };
        var getDetailValueTo2 = function getDetailValueTo3(args) {
          return getDetailValue2(args, 1);
        };
        var getDetailValueArray2 = function getDetailValueArray3(args) {
          var value = args.value;
          if (Array.isArray(value)) {
            return value;
          }
          return [getDetailValueFrom2, getDetailValueTo2].map(function(fn) {
            return fn(args);
          });
        };
        function isInternalInput(element) {
          return element.getAttribute("data-input") === "true";
        }
        function findInput(element, property) {
          var nextElement = element;
          do {
            nextElement = nextElement[property];
          } while (nextElement && !isInternalInput(nextElement));
          return nextElement;
        }
        function focus(element) {
          if (element) {
            element.focus();
          }
        }
        function _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances) {
          var usedFunctions = [];
          var pattern = new RegExp(Object.keys(elementFunctions).map(function(el) {
            return "".concat(el, "+");
          }).join("|"), "g");
          var matches = placeholder.match(pattern);
          return placeholder.split(pattern).reduce(function(arr, element, index) {
            var divider = element && // eslint-disable-next-line react/no-array-index-key
            _react["default"].createElement(
              _Divider["default"],
              {
                key: "separator_".concat(index)
              },
              element
            );
            var res = [].concat(_toConsumableArray2(arr), [divider]);
            var currentMatch = matches && matches[index];
            if (currentMatch) {
              var renderFunction = elementFunctions[currentMatch] || elementFunctions[Object.keys(elementFunctions).find(function(elementFunction) {
                return currentMatch.match(elementFunction);
              })];
              if (!allowMultipleInstances && usedFunctions.includes(renderFunction)) {
                res.push(currentMatch);
              } else {
                res.push(renderFunction(currentMatch, index));
                usedFunctions.push(renderFunction);
              }
            }
            return res;
          }, []);
        }
        var DateInput2 = function(_PureComponent) {
          _inherits2(DateInput3, _PureComponent);
          var _super = _createSuper2(DateInput3);
          function DateInput3() {
            var _this;
            _classCallCheck2(this, DateInput3);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty2(_assertThisInitialized2(_this), "state", {
              year: null,
              month: null,
              day: null
            });
            _defineProperty2(_assertThisInitialized2(_this), "dayInput", (0, _react.createRef)());
            _defineProperty2(_assertThisInitialized2(_this), "monthInput", (0, _react.createRef)());
            _defineProperty2(_assertThisInitialized2(_this), "yearInput", (0, _react.createRef)());
            _defineProperty2(_assertThisInitialized2(_this), "onClick", function(event) {
              if (event.target === event.currentTarget) {
                var firstInput = event.target.children[1];
                focus(firstInput);
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onKeyDown", function(event) {
              switch (event.key) {
                case "ArrowLeft":
                case "ArrowRight":
                case _this.divider: {
                  event.preventDefault();
                  var input = event.target;
                  var property = event.key === "ArrowLeft" ? "previousElementSibling" : "nextElementSibling";
                  var nextInput = findInput(input, property);
                  focus(nextInput);
                  break;
                }
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onKeyUp", function(event) {
              var key = event.key, input = event.target;
              var isNumberKey = !isNaN(parseInt(key, 10));
              if (!isNumberKey) {
                return;
              }
              var value = input.value;
              var max = input.getAttribute("max");
              if (value * 10 > max || value.length >= max.length) {
                var property = "nextElementSibling";
                var nextInput = findInput(input, property);
                focus(nextInput);
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onChange", function(event) {
              var _event$target = event.target, name = _event$target.name, value = _event$target.value;
              _this.setState(_defineProperty2({}, name, value), _this.onChangeExternal);
            });
            _defineProperty2(_assertThisInitialized2(_this), "onChangeNative", function(event) {
              var onChange = _this.props.onChange;
              var value = event.target.value;
              if (!onChange) {
                return;
              }
              var processedValue = function() {
                if (!value) {
                  return null;
                }
                var _value$split = value.split("-"), _value$split2 = _slicedToArray(_value$split, 3), yearString = _value$split2[0], monthString = _value$split2[1], dayString = _value$split2[2];
                var year = parseInt(yearString, 10);
                var monthIndex = parseInt(monthString, 10) - 1 || 0;
                var day = parseInt(dayString, 10) || 1;
                var proposedValue = /* @__PURE__ */ new Date();
                proposedValue.setFullYear(year, monthIndex, day);
                proposedValue.setHours(0, 0, 0, 0);
                return proposedValue;
              }();
              onChange(processedValue, false);
            });
            _defineProperty2(_assertThisInitialized2(_this), "onChangeExternal", function() {
              var onChange = _this.props.onChange;
              if (!onChange) {
                return;
              }
              var formElements = [_this.dayInput.current, _this.monthInput.current, _this.yearInput.current].filter(Boolean);
              var values = {};
              formElements.forEach(function(formElement) {
                values[formElement.name] = formElement.value;
              });
              if (formElements.every(function(formElement) {
                return !formElement.value;
              })) {
                onChange(null, false);
              } else if (formElements.every(function(formElement) {
                return formElement.value && formElement.validity.valid;
              })) {
                var year = parseInt(values.year, 10) || (/* @__PURE__ */ new Date()).getFullYear();
                var monthIndex = parseInt(values.month || 1, 10) - 1;
                var day = parseInt(values.day || 1, 10);
                var proposedValue = /* @__PURE__ */ new Date();
                proposedValue.setFullYear(year, monthIndex, day);
                proposedValue.setHours(0, 0, 0, 0);
                var processedValue = _this.getProcessedValue(proposedValue);
                onChange(processedValue, false);
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "renderDay", function(currentMatch, index) {
              var _this$props = _this.props, autoFocus = _this$props.autoFocus, dayAriaLabel = _this$props.dayAriaLabel, dayPlaceholder = _this$props.dayPlaceholder, showLeadingZeros = _this$props.showLeadingZeros;
              var _this$state = _this.state, day = _this$state.day, month = _this$state.month, year = _this$state.year;
              if (currentMatch && currentMatch.length > 2) {
                throw new Error("Unsupported token: ".concat(currentMatch));
              }
              var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
              return _react["default"].createElement(_DayInput["default"], _extends2(
                {
                  key: "day"
                },
                _this.commonInputProps,
                {
                  ariaLabel: dayAriaLabel,
                  autoFocus: index === 0 && autoFocus,
                  inputRef: _this.dayInput,
                  month,
                  placeholder: dayPlaceholder,
                  showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
                  value: day,
                  year
                }
              ));
            });
            _defineProperty2(_assertThisInitialized2(_this), "renderMonth", function(currentMatch, index) {
              var _this$props2 = _this.props, autoFocus = _this$props2.autoFocus, locale2 = _this$props2.locale, monthAriaLabel = _this$props2.monthAriaLabel, monthPlaceholder = _this$props2.monthPlaceholder, showLeadingZeros = _this$props2.showLeadingZeros;
              var _this$state2 = _this.state, month = _this$state2.month, year = _this$state2.year;
              if (currentMatch && currentMatch.length > 4) {
                throw new Error("Unsupported token: ".concat(currentMatch));
              }
              if (currentMatch.length > 2) {
                return _react["default"].createElement(_MonthSelect["default"], _extends2(
                  {
                    key: "month"
                  },
                  _this.commonInputProps,
                  {
                    ariaLabel: monthAriaLabel,
                    autoFocus: index === 0 && autoFocus,
                    inputRef: _this.monthInput,
                    locale: locale2,
                    placeholder: monthPlaceholder,
                    "short": currentMatch.length === 3,
                    value: month,
                    year
                  }
                ));
              }
              var showLeadingZerosFromFormat = currentMatch && currentMatch.length === 2;
              return _react["default"].createElement(_MonthInput["default"], _extends2(
                {
                  key: "month"
                },
                _this.commonInputProps,
                {
                  ariaLabel: monthAriaLabel,
                  autoFocus: index === 0 && autoFocus,
                  inputRef: _this.monthInput,
                  placeholder: monthPlaceholder,
                  showLeadingZeros: showLeadingZerosFromFormat || showLeadingZeros,
                  value: month,
                  year
                }
              ));
            });
            _defineProperty2(_assertThisInitialized2(_this), "renderYear", function(currentMatch, index) {
              var _this$props3 = _this.props, autoFocus = _this$props3.autoFocus, yearAriaLabel = _this$props3.yearAriaLabel, yearPlaceholder = _this$props3.yearPlaceholder;
              var year = _this.state.year;
              return _react["default"].createElement(_YearInput["default"], _extends2(
                {
                  key: "year"
                },
                _this.commonInputProps,
                {
                  ariaLabel: yearAriaLabel,
                  autoFocus: index === 0 && autoFocus,
                  inputRef: _this.yearInput,
                  placeholder: yearPlaceholder,
                  value: year,
                  valueType: _this.valueType
                }
              ));
            });
            return _this;
          }
          _createClass2(
            DateInput3,
            [
              {
                key: "formatDate",
                get: function get2() {
                  var maxDetail = this.props.maxDetail;
                  var options = {
                    year: "numeric"
                  };
                  var level = allViews2.indexOf(maxDetail);
                  if (level >= 2) {
                    options.month = "numeric";
                  }
                  if (level >= 3) {
                    options.day = "numeric";
                  }
                  return (0, _dateFormatter.getFormatter)(options);
                }
                /**
                 * Gets current value in a desired format.
                 */
              },
              {
                key: "getProcessedValue",
                value: function getProcessedValue(value) {
                  var _this$props4 = this.props, minDate = _this$props4.minDate, maxDate = _this$props4.maxDate, maxDetail = _this$props4.maxDetail, returnValue = _this$props4.returnValue;
                  var processFunction = function() {
                    switch (returnValue) {
                      case "start":
                        return getDetailValueFrom2;
                      case "end":
                        return getDetailValueTo2;
                      case "range":
                        return getDetailValueArray2;
                      default:
                        throw new Error("Invalid returnValue.");
                    }
                  }();
                  return processFunction({
                    value,
                    minDate,
                    maxDate,
                    maxDetail
                  });
                }
              },
              {
                key: "divider",
                get: function get2() {
                  var dividers = this.placeholder.match(/[^0-9a-z]/i);
                  return dividers ? dividers[0] : null;
                }
              },
              {
                key: "placeholder",
                get: function get2() {
                  var _this$props5 = this.props, format2 = _this$props5.format, locale2 = _this$props5.locale;
                  if (format2) {
                    return format2;
                  }
                  var year = 2017;
                  var monthIndex = 11;
                  var day = 11;
                  var date = new Date(year, monthIndex, day);
                  var formattedDate = this.formatDate(locale2, date);
                  var datePieces = ["year", "month", "day"];
                  var datePieceReplacements = ["y", "M", "d"];
                  function formatDatePiece(name, dateToFormat) {
                    return (0, _dateFormatter.getFormatter)(_defineProperty2(
                      {
                        useGrouping: false
                      },
                      name,
                      "numeric"
                    ))(locale2, dateToFormat).match(/\d{1,}/);
                  }
                  var placeholder = formattedDate;
                  datePieces.forEach(function(datePiece, index) {
                    var formattedDatePiece = formatDatePiece(datePiece, date);
                    var datePieceReplacement = datePieceReplacements[index];
                    placeholder = placeholder.replace(formattedDatePiece, datePieceReplacement);
                  });
                  placeholder = placeholder.replace("17", "y");
                  return placeholder;
                }
              },
              {
                key: "commonInputProps",
                get: function get2() {
                  var _this$props6 = this.props, className2 = _this$props6.className, disabled = _this$props6.disabled, isCalendarOpen = _this$props6.isCalendarOpen, maxDate = _this$props6.maxDate, minDate = _this$props6.minDate, required = _this$props6.required;
                  return {
                    className: className2,
                    disabled,
                    maxDate: maxDate || defaultMaxDate2,
                    minDate: minDate || defaultMinDate2,
                    onChange: this.onChange,
                    onKeyDown: this.onKeyDown,
                    onKeyUp: this.onKeyUp,
                    // This is only for showing validity when editing
                    required: required || isCalendarOpen
                  };
                }
              },
              {
                key: "valueType",
                get: function get2() {
                  var maxDetail = this.props.maxDetail;
                  return getValueType2(maxDetail);
                }
              },
              {
                key: "renderCustomInputs",
                value: function renderCustomInputs() {
                  var placeholder = this.placeholder;
                  var format2 = this.props.format;
                  var elementFunctions = {
                    d: this.renderDay,
                    M: this.renderMonth,
                    y: this.renderYear
                  };
                  var allowMultipleInstances = typeof format2 !== "undefined";
                  return _renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances);
                }
              },
              {
                key: "renderNativeInput",
                value: function renderNativeInput() {
                  var _this$props7 = this.props, disabled = _this$props7.disabled, maxDate = _this$props7.maxDate, minDate = _this$props7.minDate, name = _this$props7.name, nativeInputAriaLabel = _this$props7.nativeInputAriaLabel, required = _this$props7.required;
                  var value = this.state.value;
                  return _react["default"].createElement(_NativeInput["default"], {
                    key: "date",
                    ariaLabel: nativeInputAriaLabel,
                    disabled,
                    maxDate: maxDate || defaultMaxDate2,
                    minDate: minDate || defaultMinDate2,
                    name,
                    onChange: this.onChangeNative,
                    required,
                    value,
                    valueType: this.valueType
                  });
                }
              },
              {
                key: "render",
                value: function render() {
                  var className2 = this.props.className;
                  return (
                    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
                    _react["default"].createElement(
                      "div",
                      {
                        className: className2,
                        onClick: this.onClick
                      },
                      this.renderNativeInput(),
                      this.renderCustomInputs()
                    )
                  );
                }
              }
            ],
            [{
              key: "getDerivedStateFromProps",
              value: function getDerivedStateFromProps(nextProps, prevState) {
                var minDate = nextProps.minDate, maxDate = nextProps.maxDate, maxDetail = nextProps.maxDetail;
                var nextState = {};
                if (nextProps.isCalendarOpen !== prevState.isCalendarOpen) {
                  nextState.isCalendarOpen = nextProps.isCalendarOpen;
                }
                var nextValue = getDetailValueFrom2({
                  value: nextProps.value,
                  minDate,
                  maxDate,
                  maxDetail
                });
                var values = [nextValue, prevState.value];
                if (
                  // Toggling calendar visibility resets values
                  nextState.isCalendarOpen || // Flag was toggled
                  datesAreDifferent2.apply(void 0, _toConsumableArray2(values.map(function(value) {
                    return getDetailValueFrom2({
                      value,
                      minDate,
                      maxDate,
                      maxDetail
                    });
                  }))) || datesAreDifferent2.apply(void 0, _toConsumableArray2(values.map(function(value) {
                    return getDetailValueTo2({
                      value,
                      minDate,
                      maxDate,
                      maxDetail
                    });
                  })))
                ) {
                  if (nextValue) {
                    nextState.year = (0, _dateUtils2.getYear)(nextValue).toString();
                    nextState.month = (0, _dateUtils2.getMonthHuman)(nextValue).toString();
                    nextState.day = (0, _dateUtils2.getDate)(nextValue).toString();
                  } else {
                    nextState.year = null;
                    nextState.month = null;
                    nextState.day = null;
                  }
                  nextState.value = nextValue;
                }
                return nextState;
              }
            }]
          );
          return DateInput3;
        }(_react.PureComponent);
        exports3["default"] = DateInput2;
        DateInput2.defaultProps = {
          maxDetail: "month",
          name: "date",
          returnValue: "start"
        };
        var isValue2 = _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].instanceOf(Date)]);
        DateInput2.propTypes = {
          autoFocus: _propTypes2["default"].bool,
          className: _propTypes2["default"].string.isRequired,
          dayAriaLabel: _propTypes2["default"].string,
          dayPlaceholder: _propTypes2["default"].string,
          disabled: _propTypes2["default"].bool,
          format: _propTypes2["default"].string,
          isCalendarOpen: _propTypes2["default"].bool,
          locale: _propTypes2["default"].string,
          maxDate: _propTypes22.isMaxDate,
          maxDetail: _propTypes2["default"].oneOf(allViews2),
          minDate: _propTypes22.isMinDate,
          monthAriaLabel: _propTypes2["default"].string,
          monthPlaceholder: _propTypes2["default"].string,
          name: _propTypes2["default"].string,
          nativeInputAriaLabel: _propTypes2["default"].string,
          onChange: _propTypes2["default"].func,
          required: _propTypes2["default"].bool,
          returnValue: _propTypes2["default"].oneOf(["start", "end", "range"]),
          showLeadingZeros: _propTypes2["default"].bool,
          value: _propTypes2["default"].oneOfType([isValue2, _propTypes2["default"].arrayOf(isValue2)]),
          yearAriaLabel: _propTypes2["default"].string,
          yearPlaceholder: _propTypes2["default"].string
        };
      })(DateInput);
      (function(exports3) {
        function _typeof2(obj) {
          "@babel/helpers - typeof";
          return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof2(obj);
        }
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = void 0;
        var _react = _interopRequireWildcard(React__default["default"]);
        var _propTypes2 = _interopRequireDefault2(propTypes$1.exports);
        var _makeEventProps = _interopRequireDefault2(require$$2$1);
        var _mergeClassNames = _interopRequireDefault2(require$$3$1);
        var _reactCalendar = _interopRequireDefault2(require$$4$1);
        var _reactFit = _interopRequireDefault2(require$$5);
        var _DateInput = _interopRequireDefault2(DateInput);
        var _propTypes22 = propTypes;
        var _excluded2 = ["calendarClassName", "className", "onChange", "value"], _excluded22 = ["onChange"];
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        function _getRequireWildcardCache(nodeInterop) {
          if (typeof WeakMap !== "function") return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
          var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function _interopRequireWildcard(obj, nodeInterop) {
          if (!nodeInterop && obj && obj.__esModule) {
            return obj;
          }
          if (obj === null || _typeof2(obj) !== "object" && typeof obj !== "function") {
            return { "default": obj };
          }
          var cache = _getRequireWildcardCache(nodeInterop);
          if (cache && cache.has(obj)) {
            return cache.get(obj);
          }
          var newObj = {};
          var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var key in obj) {
            if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
              if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
          newObj["default"] = obj;
          if (cache) {
            cache.set(obj, newObj);
          }
          return newObj;
        }
        function _objectWithoutProperties2(source, excluded) {
          if (source == null) return {};
          var target = _objectWithoutPropertiesLoose2(source, excluded);
          var key, i;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i = 0; i < sourceSymbolKeys.length; i++) {
              key = sourceSymbolKeys[i];
              if (excluded.indexOf(key) >= 0) continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function _objectWithoutPropertiesLoose2(source, excluded) {
          if (source == null) return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i;
          for (i = 0; i < sourceKeys.length; i++) {
            key = sourceKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            target[key] = source[key];
          }
          return target;
        }
        function _extends2() {
          _extends2 = Object.assign || function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends2.apply(this, arguments);
        }
        function _slicedToArray(arr, i) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest();
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray2(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length) len = arr.length;
          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        }
        function _iterableToArrayLimit(arr, i) {
          var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
          if (_i == null) return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i) break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null) _i["return"]();
            } finally {
              if (_d) throw _e;
            }
          }
          return _arr;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr;
        }
        function _classCallCheck2(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties2(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties2(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", { writable: false });
          return Constructor;
        }
        function _inherits2(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
          Object.defineProperty(subClass, "prototype", { writable: false });
          if (superClass) _setPrototypeOf2(subClass, superClass);
        }
        function _setPrototypeOf2(o, p) {
          _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
            o2.__proto__ = p2;
            return o2;
          };
          return _setPrototypeOf2(o, p);
        }
        function _createSuper2(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct2();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf2(Derived), result;
            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf2(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn2(this, result);
          };
        }
        function _possibleConstructorReturn2(self2, call) {
          if (call && (_typeof2(call) === "object" || typeof call === "function")) {
            return call;
          } else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
          }
          return _assertThisInitialized2(self2);
        }
        function _assertThisInitialized2(self2) {
          if (self2 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return self2;
        }
        function _isNativeReflectConstruct2() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _getPrototypeOf2(o) {
          _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf3(o2) {
            return o2.__proto__ || Object.getPrototypeOf(o2);
          };
          return _getPrototypeOf2(o);
        }
        function _defineProperty2(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        var baseClassName2 = "react-date-picker";
        var outsideActionEvents = ["mousedown", "focusin", "touchstart"];
        var allViews2 = ["century", "decade", "year", "month"];
        var DatePicker2 = function(_PureComponent) {
          _inherits2(DatePicker3, _PureComponent);
          var _super = _createSuper2(DatePicker3);
          function DatePicker3() {
            var _this;
            _classCallCheck2(this, DatePicker3);
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this = _super.call.apply(_super, [this].concat(args));
            _defineProperty2(_assertThisInitialized2(_this), "state", {});
            _defineProperty2(_assertThisInitialized2(_this), "onOutsideAction", function(event) {
              var target = "composedPath" in event ? event.composedPath()[0] : event.target;
              if (_this.wrapper && !_this.wrapper.contains(target)) {
                _this.closeCalendar();
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onChange", function(value) {
              var closeCalendar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _this.props.closeCalendar;
              var onChange = _this.props.onChange;
              if (closeCalendar) {
                _this.closeCalendar();
              }
              if (onChange) {
                onChange(value);
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onFocus", function(event) {
              var _this$props = _this.props, disabled = _this$props.disabled, onFocus = _this$props.onFocus, openCalendarOnFocus = _this$props.openCalendarOnFocus;
              if (onFocus) {
                onFocus(event);
              }
              if (disabled) {
                return;
              }
              if (openCalendarOnFocus) {
                if (event.target.getAttribute("data-select") === "true") {
                  return;
                }
                _this.openCalendar();
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "onKeyDown", function(event) {
              if (event.key === "Escape") {
                _this.closeCalendar();
              }
            });
            _defineProperty2(_assertThisInitialized2(_this), "openCalendar", function() {
              _this.setState({
                isOpen: true
              });
            });
            _defineProperty2(_assertThisInitialized2(_this), "closeCalendar", function() {
              _this.setState(function(prevState) {
                if (!prevState.isOpen) {
                  return null;
                }
                return {
                  isOpen: false
                };
              });
            });
            _defineProperty2(_assertThisInitialized2(_this), "toggleCalendar", function() {
              _this.setState(function(prevState) {
                return {
                  isOpen: !prevState.isOpen
                };
              });
            });
            _defineProperty2(_assertThisInitialized2(_this), "stopPropagation", function(event) {
              return event.stopPropagation();
            });
            _defineProperty2(_assertThisInitialized2(_this), "clear", function() {
              return _this.onChange(null);
            });
            return _this;
          }
          _createClass2(
            DatePicker3,
            [
              {
                key: "componentDidMount",
                value: function componentDidMount() {
                  this.handleOutsideActionListeners();
                }
              },
              {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevState) {
                  var isOpen = this.state.isOpen;
                  var _this$props2 = this.props, onCalendarClose = _this$props2.onCalendarClose, onCalendarOpen = _this$props2.onCalendarOpen;
                  if (isOpen !== prevState.isOpen) {
                    this.handleOutsideActionListeners();
                    var callback = isOpen ? onCalendarOpen : onCalendarClose;
                    if (callback) callback();
                  }
                }
              },
              {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                  this.handleOutsideActionListeners(false);
                }
              },
              {
                key: "eventProps",
                get: function get2() {
                  return (0, _makeEventProps["default"])(this.props);
                }
              },
              {
                key: "handleOutsideActionListeners",
                value: function handleOutsideActionListeners(shouldListen) {
                  var _this2 = this;
                  var isOpen = this.state.isOpen;
                  var shouldListenWithFallback = typeof shouldListen !== "undefined" ? shouldListen : isOpen;
                  var fnName = shouldListenWithFallback ? "addEventListener" : "removeEventListener";
                  outsideActionEvents.forEach(function(eventName) {
                    return document[fnName](eventName, _this2.onOutsideAction);
                  });
                  document[fnName]("keydown", this.onKeyDown);
                }
              },
              {
                key: "renderInputs",
                value: function renderInputs() {
                  var _this$props3 = this.props, autoFocus = _this$props3.autoFocus, calendarAriaLabel = _this$props3.calendarAriaLabel, calendarIcon = _this$props3.calendarIcon, clearAriaLabel = _this$props3.clearAriaLabel, clearIcon = _this$props3.clearIcon, dayAriaLabel = _this$props3.dayAriaLabel, dayPlaceholder = _this$props3.dayPlaceholder, disableCalendar = _this$props3.disableCalendar, disabled = _this$props3.disabled, format2 = _this$props3.format, locale2 = _this$props3.locale, maxDate = _this$props3.maxDate, maxDetail = _this$props3.maxDetail, minDate = _this$props3.minDate, monthAriaLabel = _this$props3.monthAriaLabel, monthPlaceholder = _this$props3.monthPlaceholder, name = _this$props3.name, nativeInputAriaLabel = _this$props3.nativeInputAriaLabel, required = _this$props3.required, returnValue = _this$props3.returnValue, showLeadingZeros = _this$props3.showLeadingZeros, value = _this$props3.value, yearAriaLabel = _this$props3.yearAriaLabel, yearPlaceholder = _this$props3.yearPlaceholder;
                  var isOpen = this.state.isOpen;
                  var _concat = [].concat(value), _concat2 = _slicedToArray(_concat, 1), valueFrom = _concat2[0];
                  var ariaLabelProps = {
                    dayAriaLabel,
                    monthAriaLabel,
                    nativeInputAriaLabel,
                    yearAriaLabel
                  };
                  var placeholderProps = {
                    dayPlaceholder,
                    monthPlaceholder,
                    yearPlaceholder
                  };
                  return _react["default"].createElement(
                    "div",
                    {
                      className: "".concat(baseClassName2, "__wrapper")
                    },
                    _react["default"].createElement(_DateInput["default"], _extends2({}, ariaLabelProps, placeholderProps, {
                      // eslint-disable-next-line jsx-a11y/no-autofocus
                      autoFocus,
                      className: "".concat(baseClassName2, "__inputGroup"),
                      disabled,
                      format: format2,
                      isCalendarOpen: isOpen,
                      locale: locale2,
                      maxDate,
                      maxDetail,
                      minDate,
                      name,
                      onChange: this.onChange,
                      required,
                      returnValue,
                      showLeadingZeros,
                      value: valueFrom
                    })),
                    clearIcon !== null && _react["default"].createElement(
                      "button",
                      {
                        "aria-label": clearAriaLabel,
                        className: "".concat(baseClassName2, "__clear-button ").concat(baseClassName2, "__button"),
                        disabled,
                        onClick: this.clear,
                        onFocus: this.stopPropagation,
                        type: "button"
                      },
                      clearIcon
                    ),
                    calendarIcon !== null && !disableCalendar && _react["default"].createElement(
                      "button",
                      {
                        "aria-label": calendarAriaLabel,
                        className: "".concat(baseClassName2, "__calendar-button ").concat(baseClassName2, "__button"),
                        disabled,
                        onBlur: this.resetValue,
                        onClick: this.toggleCalendar,
                        onFocus: this.stopPropagation,
                        type: "button"
                      },
                      calendarIcon
                    )
                  );
                }
              },
              {
                key: "renderCalendar",
                value: function renderCalendar() {
                  var disableCalendar = this.props.disableCalendar;
                  var isOpen = this.state.isOpen;
                  if (isOpen === null || disableCalendar) {
                    return null;
                  }
                  var _this$props4 = this.props, calendarClassName = _this$props4.calendarClassName;
                  _this$props4.className;
                  _this$props4.onChange;
                  var value = _this$props4.value, calendarProps = _objectWithoutProperties2(_this$props4, _excluded2);
                  var className2 = "".concat(baseClassName2, "__calendar");
                  return _react["default"].createElement(_reactFit["default"], null, _react["default"].createElement(
                    "div",
                    {
                      ref: function ref(_ref) {
                        if (_ref && !isOpen) {
                          _ref.removeAttribute("style");
                        }
                      },
                      className: (0, _mergeClassNames["default"])(className2, "".concat(className2, "--").concat(isOpen ? "open" : "closed")),
                      style: isOpen ? void 0 : {}
                    },
                    _react["default"].createElement(_reactCalendar["default"], _extends2(
                      {
                        className: calendarClassName,
                        onChange: this.onChange,
                        value: value || null
                      },
                      calendarProps
                    ))
                  ));
                }
              },
              {
                key: "render",
                value: function render() {
                  var _this3 = this;
                  var eventProps = this.eventProps;
                  var _this$props5 = this.props, className2 = _this$props5.className, disabled = _this$props5.disabled;
                  var isOpen = this.state.isOpen;
                  eventProps.onChange;
                  var eventPropsWithoutOnChange = _objectWithoutProperties2(eventProps, _excluded22);
                  return _react["default"].createElement(
                    "div",
                    _extends2(
                      {
                        className: (0, _mergeClassNames["default"])(baseClassName2, "".concat(baseClassName2, "--").concat(isOpen ? "open" : "closed"), "".concat(baseClassName2, "--").concat(disabled ? "disabled" : "enabled"), className2)
                      },
                      eventPropsWithoutOnChange,
                      {
                        onFocus: this.onFocus,
                        ref: function ref(_ref2) {
                          if (!_ref2) {
                            return;
                          }
                          _this3.wrapper = _ref2;
                        }
                      }
                    ),
                    this.renderInputs(),
                    this.renderCalendar()
                  );
                }
              }
            ],
            [{
              key: "getDerivedStateFromProps",
              value: function getDerivedStateFromProps(nextProps, prevState) {
                if (nextProps.isOpen !== prevState.isOpenProps) {
                  return {
                    isOpen: nextProps.isOpen,
                    isOpenProps: nextProps.isOpen
                  };
                }
                return null;
              }
            }]
          );
          return DatePicker3;
        }(_react.PureComponent);
        exports3["default"] = DatePicker2;
        var iconProps = {
          xmlns: "http://www.w3.org/2000/svg",
          width: 19,
          height: 19,
          viewBox: "0 0 19 19",
          stroke: "black",
          strokeWidth: 2
        };
        var CalendarIcon = _react["default"].createElement(
          "svg",
          _extends2({}, iconProps, {
            className: "".concat(baseClassName2, "__calendar-button__icon ").concat(baseClassName2, "__button__icon")
          }),
          _react["default"].createElement("rect", {
            fill: "none",
            height: "15",
            width: "15",
            x: "2",
            y: "2"
          }),
          _react["default"].createElement("line", {
            x1: "6",
            x2: "6",
            y1: "0",
            y2: "4"
          }),
          _react["default"].createElement("line", {
            x1: "13",
            x2: "13",
            y1: "0",
            y2: "4"
          })
        );
        var ClearIcon = _react["default"].createElement(
          "svg",
          _extends2({}, iconProps, {
            className: "".concat(baseClassName2, "__clear-button__icon ").concat(baseClassName2, "__button__icon")
          }),
          _react["default"].createElement("line", {
            x1: "4",
            x2: "15",
            y1: "4",
            y2: "15"
          }),
          _react["default"].createElement("line", {
            x1: "15",
            x2: "4",
            y1: "4",
            y2: "15"
          })
        );
        DatePicker2.defaultProps = {
          calendarIcon: CalendarIcon,
          clearIcon: ClearIcon,
          closeCalendar: true,
          isOpen: null,
          openCalendarOnFocus: true,
          returnValue: "start"
        };
        var isValue2 = _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].instanceOf(Date)]);
        DatePicker2.propTypes = {
          autoFocus: _propTypes2["default"].bool,
          calendarAriaLabel: _propTypes2["default"].string,
          calendarClassName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].string)]),
          calendarIcon: _propTypes2["default"].node,
          className: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].string)]),
          clearAriaLabel: _propTypes2["default"].string,
          clearIcon: _propTypes2["default"].node,
          closeCalendar: _propTypes2["default"].bool,
          dayAriaLabel: _propTypes2["default"].string,
          dayPlaceholder: _propTypes2["default"].string,
          disableCalendar: _propTypes2["default"].bool,
          disabled: _propTypes2["default"].bool,
          format: _propTypes2["default"].string,
          isOpen: _propTypes2["default"].bool,
          locale: _propTypes2["default"].string,
          maxDate: _propTypes22.isMaxDate,
          maxDetail: _propTypes2["default"].oneOf(allViews2),
          minDate: _propTypes22.isMinDate,
          monthAriaLabel: _propTypes2["default"].string,
          monthPlaceholder: _propTypes2["default"].string,
          name: _propTypes2["default"].string,
          nativeInputAriaLabel: _propTypes2["default"].string,
          onCalendarClose: _propTypes2["default"].func,
          onCalendarOpen: _propTypes2["default"].func,
          onChange: _propTypes2["default"].func,
          onFocus: _propTypes2["default"].func,
          openCalendarOnFocus: _propTypes2["default"].bool,
          required: _propTypes2["default"].bool,
          returnValue: _propTypes2["default"].oneOf(["start", "end", "range"]),
          showLeadingZeros: _propTypes2["default"].bool,
          value: _propTypes2["default"].oneOfType([isValue2, _propTypes2["default"].arrayOf(isValue2)]),
          yearAriaLabel: _propTypes2["default"].string,
          yearPlaceholder: _propTypes2["default"].string
        };
      })(DatePicker$1);
      (function(exports3) {
        Object.defineProperty(exports3, "__esModule", {
          value: true
        });
        exports3["default"] = void 0;
        var _DatePicker = _interopRequireDefault2(DatePicker$1);
        function _interopRequireDefault2(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        var _default = _DatePicker["default"];
        exports3["default"] = _default;
      })(entry_nostyle);
      var DatePickerComponent = getDefaultExportFromCjs(entry_nostyle);
      var classes$s = { "label": "awell__questionLabel_label", "asterix": "awell__questionLabel_asterix" };
      var QuestionLabel = function(_a) {
        var label = _a.label, _b = _a.mandatory, mandatory = _b === void 0 ? false : _b, props = __rest(_a, ["label", "mandatory"]);
        return jsxRuntime.exports.jsxs("label", __assign({}, props, { className: "".concat(classes$s.label, " awell__question_label"), id: "awell__question_label" }, { children: [jsxRuntime.exports.jsx("span", { children: label }), " ", mandatory && jsxRuntime.exports.jsx("span", __assign({ className: classes$s.asterix }, { children: "*" }))] }));
      };
      function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
          return NaN;
        }
        var number = Number(dirtyNumber);
        if (isNaN(number)) {
          return number;
        }
        return number < 0 ? Math.ceil(number) : Math.floor(number);
      }
      function requiredArgs(required, args) {
        if (args.length < required) {
          throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
        }
      }
      function toDate(argument) {
        requiredArgs(1, arguments);
        var argStr = Object.prototype.toString.call(argument);
        if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
          return new Date(argument.getTime());
        } else if (typeof argument === "number" || argStr === "[object Number]") {
          return new Date(argument);
        } else {
          if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
            console.warn(new Error().stack);
          }
          return /* @__PURE__ */ new Date(NaN);
        }
      }
      function addDays(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var amount = toInteger(dirtyAmount);
        if (isNaN(amount)) {
          return /* @__PURE__ */ new Date(NaN);
        }
        if (!amount) {
          return date;
        }
        date.setDate(date.getDate() + amount);
        return date;
      }
      function addMilliseconds(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var timestamp = toDate(dirtyDate).getTime();
        var amount = toInteger(dirtyAmount);
        return new Date(timestamp + amount);
      }
      var defaultOptions$1 = {};
      function getDefaultOptions() {
        return defaultOptions$1;
      }
      function getTimezoneOffsetInMilliseconds(date) {
        var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
        utcDate.setUTCFullYear(date.getFullYear());
        return date.getTime() - utcDate.getTime();
      }
      function startOfDay(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        date.setHours(0, 0, 0, 0);
        return date;
      }
      var millisecondsInMinute = 6e4;
      var millisecondsInHour = 36e5;
      var millisecondsInSecond = 1e3;
      function isSameDay(dirtyDateLeft, dirtyDateRight) {
        requiredArgs(2, arguments);
        var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
        var dateRightStartOfDay = startOfDay(dirtyDateRight);
        return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
      }
      function isDate(value) {
        requiredArgs(1, arguments);
        return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
      }
      function isValid(dirtyDate) {
        requiredArgs(1, arguments);
        if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
          return false;
        }
        var date = toDate(dirtyDate);
        return !isNaN(Number(date));
      }
      function subMilliseconds(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addMilliseconds(dirtyDate, -amount);
      }
      var MILLISECONDS_IN_DAY = 864e5;
      function getUTCDayOfYear(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var timestamp = date.getTime();
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
        var startOfYearTimestamp = date.getTime();
        var difference = timestamp - startOfYearTimestamp;
        return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
      }
      function startOfUTCISOWeek(dirtyDate) {
        requiredArgs(1, arguments);
        var weekStartsOn = 1;
        var date = toDate(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      function getUTCISOWeekYear(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var year = date.getUTCFullYear();
        var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
        fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
        fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
        var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
        fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
        fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
        if (date.getTime() >= startOfNextYear.getTime()) {
          return year + 1;
        } else if (date.getTime() >= startOfThisYear.getTime()) {
          return year;
        } else {
          return year - 1;
        }
      }
      function startOfUTCISOWeekYear(dirtyDate) {
        requiredArgs(1, arguments);
        var year = getUTCISOWeekYear(dirtyDate);
        var fourthOfJanuary = /* @__PURE__ */ new Date(0);
        fourthOfJanuary.setUTCFullYear(year, 0, 4);
        fourthOfJanuary.setUTCHours(0, 0, 0, 0);
        var date = startOfUTCISOWeek(fourthOfJanuary);
        return date;
      }
      var MILLISECONDS_IN_WEEK$1 = 6048e5;
      function getUTCISOWeek(dirtyDate) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
        return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
      }
      function startOfUTCWeek(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions2 = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
          throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
        }
        var date = toDate(dirtyDate);
        var day = date.getUTCDay();
        var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
        date.setUTCDate(date.getUTCDate() - diff);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      function getUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var year = date.getUTCFullYear();
        var defaultOptions2 = getDefaultOptions();
        var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
          throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
        }
        var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
        firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
        firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
        var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
        var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
        firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
        var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
        if (date.getTime() >= startOfNextYear.getTime()) {
          return year + 1;
        } else if (date.getTime() >= startOfThisYear.getTime()) {
          return year;
        } else {
          return year - 1;
        }
      }
      function startOfUTCWeekYear(dirtyDate, options) {
        var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(1, arguments);
        var defaultOptions2 = getDefaultOptions();
        var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
        var year = getUTCWeekYear(dirtyDate, options);
        var firstWeek = /* @__PURE__ */ new Date(0);
        firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
        firstWeek.setUTCHours(0, 0, 0, 0);
        var date = startOfUTCWeek(firstWeek, options);
        return date;
      }
      var MILLISECONDS_IN_WEEK = 6048e5;
      function getUTCWeek(dirtyDate, options) {
        requiredArgs(1, arguments);
        var date = toDate(dirtyDate);
        var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
        return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
      }
      function addLeadingZeros(number, targetLength) {
        var sign = number < 0 ? "-" : "";
        var output = Math.abs(number).toString();
        while (output.length < targetLength) {
          output = "0" + output;
        }
        return sign + output;
      }
      var formatters$1 = {
        // Year
        y: function(date, token) {
          var signedYear = date.getUTCFullYear();
          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
        },
        // Month
        M: function(date, token) {
          var month = date.getUTCMonth();
          return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
        },
        // Day of the month
        d: function(date, token) {
          return addLeadingZeros(date.getUTCDate(), token.length);
        },
        // AM or PM
        a: function(date, token) {
          var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
          switch (token) {
            case "a":
            case "aa":
              return dayPeriodEnumValue.toUpperCase();
            case "aaa":
              return dayPeriodEnumValue;
            case "aaaaa":
              return dayPeriodEnumValue[0];
            case "aaaa":
            default:
              return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
          }
        },
        // Hour [1-12]
        h: function(date, token) {
          return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
        },
        // Hour [0-23]
        H: function(date, token) {
          return addLeadingZeros(date.getUTCHours(), token.length);
        },
        // Minute
        m: function(date, token) {
          return addLeadingZeros(date.getUTCMinutes(), token.length);
        },
        // Second
        s: function(date, token) {
          return addLeadingZeros(date.getUTCSeconds(), token.length);
        },
        // Fraction of second
        S: function(date, token) {
          var numberOfDigits = token.length;
          var milliseconds = date.getUTCMilliseconds();
          var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
          return addLeadingZeros(fractionalSeconds, token.length);
        }
      };
      var dayPeriodEnum = {
        am: "am",
        pm: "pm",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
      };
      var formatters = {
        // Era
        G: function(date, token, localize2) {
          var era = date.getUTCFullYear() > 0 ? 1 : 0;
          switch (token) {
            case "G":
            case "GG":
            case "GGG":
              return localize2.era(era, {
                width: "abbreviated"
              });
            case "GGGGG":
              return localize2.era(era, {
                width: "narrow"
              });
            case "GGGG":
            default:
              return localize2.era(era, {
                width: "wide"
              });
          }
        },
        // Year
        y: function(date, token, localize2) {
          if (token === "yo") {
            var signedYear = date.getUTCFullYear();
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return localize2.ordinalNumber(year, {
              unit: "year"
            });
          }
          return formatters$1.y(date, token);
        },
        // Local week-numbering year
        Y: function(date, token, localize2, options) {
          var signedWeekYear = getUTCWeekYear(date, options);
          var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
          if (token === "YY") {
            var twoDigitYear = weekYear % 100;
            return addLeadingZeros(twoDigitYear, 2);
          }
          if (token === "Yo") {
            return localize2.ordinalNumber(weekYear, {
              unit: "year"
            });
          }
          return addLeadingZeros(weekYear, token.length);
        },
        // ISO week-numbering year
        R: function(date, token) {
          var isoWeekYear = getUTCISOWeekYear(date);
          return addLeadingZeros(isoWeekYear, token.length);
        },
        // Extended year. This is a single number designating the year of this calendar system.
        // The main difference between `y` and `u` localizers are B.C. years:
        // | Year | `y` | `u` |
        // |------|-----|-----|
        // | AC 1 |   1 |   1 |
        // | BC 1 |   1 |   0 |
        // | BC 2 |   2 |  -1 |
        // Also `yy` always returns the last two digits of a year,
        // while `uu` pads single digit years to 2 characters and returns other years unchanged.
        u: function(date, token) {
          var year = date.getUTCFullYear();
          return addLeadingZeros(year, token.length);
        },
        // Quarter
        Q: function(date, token, localize2) {
          var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
          switch (token) {
            case "Q":
              return String(quarter);
            case "QQ":
              return addLeadingZeros(quarter, 2);
            case "Qo":
              return localize2.ordinalNumber(quarter, {
                unit: "quarter"
              });
            case "QQQ":
              return localize2.quarter(quarter, {
                width: "abbreviated",
                context: "formatting"
              });
            case "QQQQQ":
              return localize2.quarter(quarter, {
                width: "narrow",
                context: "formatting"
              });
            case "QQQQ":
            default:
              return localize2.quarter(quarter, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // Stand-alone quarter
        q: function(date, token, localize2) {
          var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
          switch (token) {
            case "q":
              return String(quarter);
            case "qq":
              return addLeadingZeros(quarter, 2);
            case "qo":
              return localize2.ordinalNumber(quarter, {
                unit: "quarter"
              });
            case "qqq":
              return localize2.quarter(quarter, {
                width: "abbreviated",
                context: "standalone"
              });
            case "qqqqq":
              return localize2.quarter(quarter, {
                width: "narrow",
                context: "standalone"
              });
            case "qqqq":
            default:
              return localize2.quarter(quarter, {
                width: "wide",
                context: "standalone"
              });
          }
        },
        // Month
        M: function(date, token, localize2) {
          var month = date.getUTCMonth();
          switch (token) {
            case "M":
            case "MM":
              return formatters$1.M(date, token);
            case "Mo":
              return localize2.ordinalNumber(month + 1, {
                unit: "month"
              });
            case "MMM":
              return localize2.month(month, {
                width: "abbreviated",
                context: "formatting"
              });
            case "MMMMM":
              return localize2.month(month, {
                width: "narrow",
                context: "formatting"
              });
            case "MMMM":
            default:
              return localize2.month(month, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // Stand-alone month
        L: function(date, token, localize2) {
          var month = date.getUTCMonth();
          switch (token) {
            case "L":
              return String(month + 1);
            case "LL":
              return addLeadingZeros(month + 1, 2);
            case "Lo":
              return localize2.ordinalNumber(month + 1, {
                unit: "month"
              });
            case "LLL":
              return localize2.month(month, {
                width: "abbreviated",
                context: "standalone"
              });
            case "LLLLL":
              return localize2.month(month, {
                width: "narrow",
                context: "standalone"
              });
            case "LLLL":
            default:
              return localize2.month(month, {
                width: "wide",
                context: "standalone"
              });
          }
        },
        // Local week of year
        w: function(date, token, localize2, options) {
          var week = getUTCWeek(date, options);
          if (token === "wo") {
            return localize2.ordinalNumber(week, {
              unit: "week"
            });
          }
          return addLeadingZeros(week, token.length);
        },
        // ISO week of year
        I: function(date, token, localize2) {
          var isoWeek = getUTCISOWeek(date);
          if (token === "Io") {
            return localize2.ordinalNumber(isoWeek, {
              unit: "week"
            });
          }
          return addLeadingZeros(isoWeek, token.length);
        },
        // Day of the month
        d: function(date, token, localize2) {
          if (token === "do") {
            return localize2.ordinalNumber(date.getUTCDate(), {
              unit: "date"
            });
          }
          return formatters$1.d(date, token);
        },
        // Day of year
        D: function(date, token, localize2) {
          var dayOfYear = getUTCDayOfYear(date);
          if (token === "Do") {
            return localize2.ordinalNumber(dayOfYear, {
              unit: "dayOfYear"
            });
          }
          return addLeadingZeros(dayOfYear, token.length);
        },
        // Day of week
        E: function(date, token, localize2) {
          var dayOfWeek = date.getUTCDay();
          switch (token) {
            case "E":
            case "EE":
            case "EEE":
              return localize2.day(dayOfWeek, {
                width: "abbreviated",
                context: "formatting"
              });
            case "EEEEE":
              return localize2.day(dayOfWeek, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEEEE":
              return localize2.day(dayOfWeek, {
                width: "short",
                context: "formatting"
              });
            case "EEEE":
            default:
              return localize2.day(dayOfWeek, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // Local day of week
        e: function(date, token, localize2, options) {
          var dayOfWeek = date.getUTCDay();
          var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
          switch (token) {
            case "e":
              return String(localDayOfWeek);
            case "ee":
              return addLeadingZeros(localDayOfWeek, 2);
            case "eo":
              return localize2.ordinalNumber(localDayOfWeek, {
                unit: "day"
              });
            case "eee":
              return localize2.day(dayOfWeek, {
                width: "abbreviated",
                context: "formatting"
              });
            case "eeeee":
              return localize2.day(dayOfWeek, {
                width: "narrow",
                context: "formatting"
              });
            case "eeeeee":
              return localize2.day(dayOfWeek, {
                width: "short",
                context: "formatting"
              });
            case "eeee":
            default:
              return localize2.day(dayOfWeek, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // Stand-alone local day of week
        c: function(date, token, localize2, options) {
          var dayOfWeek = date.getUTCDay();
          var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
          switch (token) {
            case "c":
              return String(localDayOfWeek);
            case "cc":
              return addLeadingZeros(localDayOfWeek, token.length);
            case "co":
              return localize2.ordinalNumber(localDayOfWeek, {
                unit: "day"
              });
            case "ccc":
              return localize2.day(dayOfWeek, {
                width: "abbreviated",
                context: "standalone"
              });
            case "ccccc":
              return localize2.day(dayOfWeek, {
                width: "narrow",
                context: "standalone"
              });
            case "cccccc":
              return localize2.day(dayOfWeek, {
                width: "short",
                context: "standalone"
              });
            case "cccc":
            default:
              return localize2.day(dayOfWeek, {
                width: "wide",
                context: "standalone"
              });
          }
        },
        // ISO day of week
        i: function(date, token, localize2) {
          var dayOfWeek = date.getUTCDay();
          var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
          switch (token) {
            case "i":
              return String(isoDayOfWeek);
            case "ii":
              return addLeadingZeros(isoDayOfWeek, token.length);
            case "io":
              return localize2.ordinalNumber(isoDayOfWeek, {
                unit: "day"
              });
            case "iii":
              return localize2.day(dayOfWeek, {
                width: "abbreviated",
                context: "formatting"
              });
            case "iiiii":
              return localize2.day(dayOfWeek, {
                width: "narrow",
                context: "formatting"
              });
            case "iiiiii":
              return localize2.day(dayOfWeek, {
                width: "short",
                context: "formatting"
              });
            case "iiii":
            default:
              return localize2.day(dayOfWeek, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // AM or PM
        a: function(date, token, localize2) {
          var hours = date.getUTCHours();
          var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
          switch (token) {
            case "a":
            case "aa":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "abbreviated",
                context: "formatting"
              });
            case "aaa":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "abbreviated",
                context: "formatting"
              }).toLowerCase();
            case "aaaaa":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaa":
            default:
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // AM, PM, midnight, noon
        b: function(date, token, localize2) {
          var hours = date.getUTCHours();
          var dayPeriodEnumValue;
          if (hours === 12) {
            dayPeriodEnumValue = dayPeriodEnum.noon;
          } else if (hours === 0) {
            dayPeriodEnumValue = dayPeriodEnum.midnight;
          } else {
            dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
          }
          switch (token) {
            case "b":
            case "bb":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "abbreviated",
                context: "formatting"
              });
            case "bbb":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "abbreviated",
                context: "formatting"
              }).toLowerCase();
            case "bbbbb":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbb":
            default:
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // in the morning, in the afternoon, in the evening, at night
        B: function(date, token, localize2) {
          var hours = date.getUTCHours();
          var dayPeriodEnumValue;
          if (hours >= 17) {
            dayPeriodEnumValue = dayPeriodEnum.evening;
          } else if (hours >= 12) {
            dayPeriodEnumValue = dayPeriodEnum.afternoon;
          } else if (hours >= 4) {
            dayPeriodEnumValue = dayPeriodEnum.morning;
          } else {
            dayPeriodEnumValue = dayPeriodEnum.night;
          }
          switch (token) {
            case "B":
            case "BB":
            case "BBB":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "abbreviated",
                context: "formatting"
              });
            case "BBBBB":
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBB":
            default:
              return localize2.dayPeriod(dayPeriodEnumValue, {
                width: "wide",
                context: "formatting"
              });
          }
        },
        // Hour [1-12]
        h: function(date, token, localize2) {
          if (token === "ho") {
            var hours = date.getUTCHours() % 12;
            if (hours === 0) hours = 12;
            return localize2.ordinalNumber(hours, {
              unit: "hour"
            });
          }
          return formatters$1.h(date, token);
        },
        // Hour [0-23]
        H: function(date, token, localize2) {
          if (token === "Ho") {
            return localize2.ordinalNumber(date.getUTCHours(), {
              unit: "hour"
            });
          }
          return formatters$1.H(date, token);
        },
        // Hour [0-11]
        K: function(date, token, localize2) {
          var hours = date.getUTCHours() % 12;
          if (token === "Ko") {
            return localize2.ordinalNumber(hours, {
              unit: "hour"
            });
          }
          return addLeadingZeros(hours, token.length);
        },
        // Hour [1-24]
        k: function(date, token, localize2) {
          var hours = date.getUTCHours();
          if (hours === 0) hours = 24;
          if (token === "ko") {
            return localize2.ordinalNumber(hours, {
              unit: "hour"
            });
          }
          return addLeadingZeros(hours, token.length);
        },
        // Minute
        m: function(date, token, localize2) {
          if (token === "mo") {
            return localize2.ordinalNumber(date.getUTCMinutes(), {
              unit: "minute"
            });
          }
          return formatters$1.m(date, token);
        },
        // Second
        s: function(date, token, localize2) {
          if (token === "so") {
            return localize2.ordinalNumber(date.getUTCSeconds(), {
              unit: "second"
            });
          }
          return formatters$1.s(date, token);
        },
        // Fraction of second
        S: function(date, token) {
          return formatters$1.S(date, token);
        },
        // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
        X: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timezoneOffset = originalDate.getTimezoneOffset();
          if (timezoneOffset === 0) {
            return "Z";
          }
          switch (token) {
            case "X":
              return formatTimezoneWithOptionalMinutes(timezoneOffset);
            case "XXXX":
            case "XX":
              return formatTimezone(timezoneOffset);
            case "XXXXX":
            case "XXX":
            default:
              return formatTimezone(timezoneOffset, ":");
          }
        },
        // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
        x: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timezoneOffset = originalDate.getTimezoneOffset();
          switch (token) {
            case "x":
              return formatTimezoneWithOptionalMinutes(timezoneOffset);
            case "xxxx":
            case "xx":
              return formatTimezone(timezoneOffset);
            case "xxxxx":
            case "xxx":
            default:
              return formatTimezone(timezoneOffset, ":");
          }
        },
        // Timezone (GMT)
        O: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timezoneOffset = originalDate.getTimezoneOffset();
          switch (token) {
            case "O":
            case "OO":
            case "OOO":
              return "GMT" + formatTimezoneShort(timezoneOffset, ":");
            case "OOOO":
            default:
              return "GMT" + formatTimezone(timezoneOffset, ":");
          }
        },
        // Timezone (specific non-location)
        z: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timezoneOffset = originalDate.getTimezoneOffset();
          switch (token) {
            case "z":
            case "zz":
            case "zzz":
              return "GMT" + formatTimezoneShort(timezoneOffset, ":");
            case "zzzz":
            default:
              return "GMT" + formatTimezone(timezoneOffset, ":");
          }
        },
        // Seconds timestamp
        t: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timestamp = Math.floor(originalDate.getTime() / 1e3);
          return addLeadingZeros(timestamp, token.length);
        },
        // Milliseconds timestamp
        T: function(date, token, _localize, options) {
          var originalDate = options._originalDate || date;
          var timestamp = originalDate.getTime();
          return addLeadingZeros(timestamp, token.length);
        }
      };
      function formatTimezoneShort(offset, dirtyDelimiter) {
        var sign = offset > 0 ? "-" : "+";
        var absOffset = Math.abs(offset);
        var hours = Math.floor(absOffset / 60);
        var minutes = absOffset % 60;
        if (minutes === 0) {
          return sign + String(hours);
        }
        var delimiter = dirtyDelimiter || "";
        return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
      }
      function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
        if (offset % 60 === 0) {
          var sign = offset > 0 ? "-" : "+";
          return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
        }
        return formatTimezone(offset, dirtyDelimiter);
      }
      function formatTimezone(offset, dirtyDelimiter) {
        var delimiter = dirtyDelimiter || "";
        var sign = offset > 0 ? "-" : "+";
        var absOffset = Math.abs(offset);
        var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
        var minutes = addLeadingZeros(absOffset % 60, 2);
        return sign + hours + delimiter + minutes;
      }
      var dateLongFormatter = function(pattern, formatLong2) {
        switch (pattern) {
          case "P":
            return formatLong2.date({
              width: "short"
            });
          case "PP":
            return formatLong2.date({
              width: "medium"
            });
          case "PPP":
            return formatLong2.date({
              width: "long"
            });
          case "PPPP":
          default:
            return formatLong2.date({
              width: "full"
            });
        }
      };
      var timeLongFormatter = function(pattern, formatLong2) {
        switch (pattern) {
          case "p":
            return formatLong2.time({
              width: "short"
            });
          case "pp":
            return formatLong2.time({
              width: "medium"
            });
          case "ppp":
            return formatLong2.time({
              width: "long"
            });
          case "pppp":
          default:
            return formatLong2.time({
              width: "full"
            });
        }
      };
      var dateTimeLongFormatter = function(pattern, formatLong2) {
        var matchResult = pattern.match(/(P+)(p+)?/) || [];
        var datePattern = matchResult[1];
        var timePattern = matchResult[2];
        if (!timePattern) {
          return dateLongFormatter(pattern, formatLong2);
        }
        var dateTimeFormat;
        switch (datePattern) {
          case "P":
            dateTimeFormat = formatLong2.dateTime({
              width: "short"
            });
            break;
          case "PP":
            dateTimeFormat = formatLong2.dateTime({
              width: "medium"
            });
            break;
          case "PPP":
            dateTimeFormat = formatLong2.dateTime({
              width: "long"
            });
            break;
          case "PPPP":
          default:
            dateTimeFormat = formatLong2.dateTime({
              width: "full"
            });
            break;
        }
        return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
      };
      var longFormatters = {
        p: timeLongFormatter,
        P: dateTimeLongFormatter
      };
      var protectedDayOfYearTokens = ["D", "DD"];
      var protectedWeekYearTokens = ["YY", "YYYY"];
      function isProtectedDayOfYearToken(token) {
        return protectedDayOfYearTokens.indexOf(token) !== -1;
      }
      function isProtectedWeekYearToken(token) {
        return protectedWeekYearTokens.indexOf(token) !== -1;
      }
      function throwProtectedError(token, format2, input) {
        if (token === "YYYY") {
          throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === "YY") {
          throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === "D") {
          throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        } else if (token === "DD") {
          throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
        }
      }
      var formatDistanceLocale = {
        lessThanXSeconds: {
          one: "less than a second",
          other: "less than {{count}} seconds"
        },
        xSeconds: {
          one: "1 second",
          other: "{{count}} seconds"
        },
        halfAMinute: "half a minute",
        lessThanXMinutes: {
          one: "less than a minute",
          other: "less than {{count}} minutes"
        },
        xMinutes: {
          one: "1 minute",
          other: "{{count}} minutes"
        },
        aboutXHours: {
          one: "about 1 hour",
          other: "about {{count}} hours"
        },
        xHours: {
          one: "1 hour",
          other: "{{count}} hours"
        },
        xDays: {
          one: "1 day",
          other: "{{count}} days"
        },
        aboutXWeeks: {
          one: "about 1 week",
          other: "about {{count}} weeks"
        },
        xWeeks: {
          one: "1 week",
          other: "{{count}} weeks"
        },
        aboutXMonths: {
          one: "about 1 month",
          other: "about {{count}} months"
        },
        xMonths: {
          one: "1 month",
          other: "{{count}} months"
        },
        aboutXYears: {
          one: "about 1 year",
          other: "about {{count}} years"
        },
        xYears: {
          one: "1 year",
          other: "{{count}} years"
        },
        overXYears: {
          one: "over 1 year",
          other: "over {{count}} years"
        },
        almostXYears: {
          one: "almost 1 year",
          other: "almost {{count}} years"
        }
      };
      var formatDistance = function(token, count, options) {
        var result;
        var tokenValue = formatDistanceLocale[token];
        if (typeof tokenValue === "string") {
          result = tokenValue;
        } else if (count === 1) {
          result = tokenValue.one;
        } else {
          result = tokenValue.other.replace("{{count}}", count.toString());
        }
        if (options !== null && options !== void 0 && options.addSuffix) {
          if (options.comparison && options.comparison > 0) {
            return "in " + result;
          } else {
            return result + " ago";
          }
        }
        return result;
      };
      function buildFormatLongFn(args) {
        return function() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var width = options.width ? String(options.width) : args.defaultWidth;
          var format2 = args.formats[width] || args.formats[args.defaultWidth];
          return format2;
        };
      }
      var dateFormats = {
        full: "EEEE, MMMM do, y",
        long: "MMMM do, y",
        medium: "MMM d, y",
        short: "MM/dd/yyyy"
      };
      var timeFormats = {
        full: "h:mm:ss a zzzz",
        long: "h:mm:ss a z",
        medium: "h:mm:ss a",
        short: "h:mm a"
      };
      var dateTimeFormats = {
        full: "{{date}} 'at' {{time}}",
        long: "{{date}} 'at' {{time}}",
        medium: "{{date}}, {{time}}",
        short: "{{date}}, {{time}}"
      };
      var formatLong = {
        date: buildFormatLongFn({
          formats: dateFormats,
          defaultWidth: "full"
        }),
        time: buildFormatLongFn({
          formats: timeFormats,
          defaultWidth: "full"
        }),
        dateTime: buildFormatLongFn({
          formats: dateTimeFormats,
          defaultWidth: "full"
        })
      };
      var formatRelativeLocale = {
        lastWeek: "'last' eeee 'at' p",
        yesterday: "'yesterday at' p",
        today: "'today at' p",
        tomorrow: "'tomorrow at' p",
        nextWeek: "eeee 'at' p",
        other: "P"
      };
      var formatRelative = function(token, _date, _baseDate, _options) {
        return formatRelativeLocale[token];
      };
      function buildLocalizeFn(args) {
        return function(dirtyIndex, options) {
          var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
          var valuesArray;
          if (context === "formatting" && args.formattingValues) {
            var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
            var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
          } else {
            var _defaultWidth = args.defaultWidth;
            var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
            valuesArray = args.values[_width] || args.values[_defaultWidth];
          }
          var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
          return valuesArray[index];
        };
      }
      var eraValues = {
        narrow: ["B", "A"],
        abbreviated: ["BC", "AD"],
        wide: ["Before Christ", "Anno Domini"]
      };
      var quarterValues = {
        narrow: ["1", "2", "3", "4"],
        abbreviated: ["Q1", "Q2", "Q3", "Q4"],
        wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
      };
      var monthValues = {
        narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
        abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
      };
      var dayValues = {
        narrow: ["S", "M", "T", "W", "T", "F", "S"],
        short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
      };
      var dayPeriodValues = {
        narrow: {
          am: "a",
          pm: "p",
          midnight: "mi",
          noon: "n",
          morning: "morning",
          afternoon: "afternoon",
          evening: "evening",
          night: "night"
        },
        abbreviated: {
          am: "AM",
          pm: "PM",
          midnight: "midnight",
          noon: "noon",
          morning: "morning",
          afternoon: "afternoon",
          evening: "evening",
          night: "night"
        },
        wide: {
          am: "a.m.",
          pm: "p.m.",
          midnight: "midnight",
          noon: "noon",
          morning: "morning",
          afternoon: "afternoon",
          evening: "evening",
          night: "night"
        }
      };
      var formattingDayPeriodValues = {
        narrow: {
          am: "a",
          pm: "p",
          midnight: "mi",
          noon: "n",
          morning: "in the morning",
          afternoon: "in the afternoon",
          evening: "in the evening",
          night: "at night"
        },
        abbreviated: {
          am: "AM",
          pm: "PM",
          midnight: "midnight",
          noon: "noon",
          morning: "in the morning",
          afternoon: "in the afternoon",
          evening: "in the evening",
          night: "at night"
        },
        wide: {
          am: "a.m.",
          pm: "p.m.",
          midnight: "midnight",
          noon: "noon",
          morning: "in the morning",
          afternoon: "in the afternoon",
          evening: "in the evening",
          night: "at night"
        }
      };
      var ordinalNumber = function(dirtyNumber, _options) {
        var number = Number(dirtyNumber);
        var rem100 = number % 100;
        if (rem100 > 20 || rem100 < 10) {
          switch (rem100 % 10) {
            case 1:
              return number + "st";
            case 2:
              return number + "nd";
            case 3:
              return number + "rd";
          }
        }
        return number + "th";
      };
      var localize = {
        ordinalNumber,
        era: buildLocalizeFn({
          values: eraValues,
          defaultWidth: "wide"
        }),
        quarter: buildLocalizeFn({
          values: quarterValues,
          defaultWidth: "wide",
          argumentCallback: function(quarter) {
            return quarter - 1;
          }
        }),
        month: buildLocalizeFn({
          values: monthValues,
          defaultWidth: "wide"
        }),
        day: buildLocalizeFn({
          values: dayValues,
          defaultWidth: "wide"
        }),
        dayPeriod: buildLocalizeFn({
          values: dayPeriodValues,
          defaultWidth: "wide",
          formattingValues: formattingDayPeriodValues,
          defaultFormattingWidth: "wide"
        })
      };
      function buildMatchFn(args) {
        return function(string) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var width = options.width;
          var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
          var matchResult = string.match(matchPattern);
          if (!matchResult) {
            return null;
          }
          var matchedString = matchResult[0];
          var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
          var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
          }) : findKey(parsePatterns, function(pattern) {
            return pattern.test(matchedString);
          });
          var value;
          value = args.valueCallback ? args.valueCallback(key) : key;
          value = options.valueCallback ? options.valueCallback(value) : value;
          var rest = string.slice(matchedString.length);
          return {
            value,
            rest
          };
        };
      }
      function findKey(object, predicate) {
        for (var key in object) {
          if (object.hasOwnProperty(key) && predicate(object[key])) {
            return key;
          }
        }
        return void 0;
      }
      function findIndex(array, predicate) {
        for (var key = 0; key < array.length; key++) {
          if (predicate(array[key])) {
            return key;
          }
        }
        return void 0;
      }
      function buildMatchPatternFn(args) {
        return function(string) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var matchResult = string.match(args.matchPattern);
          if (!matchResult) return null;
          var matchedString = matchResult[0];
          var parseResult = string.match(args.parsePattern);
          if (!parseResult) return null;
          var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
          value = options.valueCallback ? options.valueCallback(value) : value;
          var rest = string.slice(matchedString.length);
          return {
            value,
            rest
          };
        };
      }
      var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
      var parseOrdinalNumberPattern = /\d+/i;
      var matchEraPatterns = {
        narrow: /^(b|a)/i,
        abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
        wide: /^(before christ|before common era|anno domini|common era)/i
      };
      var parseEraPatterns = {
        any: [/^b/i, /^(a|c)/i]
      };
      var matchQuarterPatterns = {
        narrow: /^[1234]/i,
        abbreviated: /^q[1234]/i,
        wide: /^[1234](th|st|nd|rd)? quarter/i
      };
      var parseQuarterPatterns = {
        any: [/1/i, /2/i, /3/i, /4/i]
      };
      var matchMonthPatterns = {
        narrow: /^[jfmasond]/i,
        abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
        wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
      };
      var parseMonthPatterns = {
        narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
        any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
      };
      var matchDayPatterns = {
        narrow: /^[smtwf]/i,
        short: /^(su|mo|tu|we|th|fr|sa)/i,
        abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
        wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
      };
      var parseDayPatterns = {
        narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
        any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
      };
      var matchDayPeriodPatterns = {
        narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
        any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
      };
      var parseDayPeriodPatterns = {
        any: {
          am: /^a/i,
          pm: /^p/i,
          midnight: /^mi/i,
          noon: /^no/i,
          morning: /morning/i,
          afternoon: /afternoon/i,
          evening: /evening/i,
          night: /night/i
        }
      };
      var match = {
        ordinalNumber: buildMatchPatternFn({
          matchPattern: matchOrdinalNumberPattern,
          parsePattern: parseOrdinalNumberPattern,
          valueCallback: function(value) {
            return parseInt(value, 10);
          }
        }),
        era: buildMatchFn({
          matchPatterns: matchEraPatterns,
          defaultMatchWidth: "wide",
          parsePatterns: parseEraPatterns,
          defaultParseWidth: "any"
        }),
        quarter: buildMatchFn({
          matchPatterns: matchQuarterPatterns,
          defaultMatchWidth: "wide",
          parsePatterns: parseQuarterPatterns,
          defaultParseWidth: "any",
          valueCallback: function(index) {
            return index + 1;
          }
        }),
        month: buildMatchFn({
          matchPatterns: matchMonthPatterns,
          defaultMatchWidth: "wide",
          parsePatterns: parseMonthPatterns,
          defaultParseWidth: "any"
        }),
        day: buildMatchFn({
          matchPatterns: matchDayPatterns,
          defaultMatchWidth: "wide",
          parsePatterns: parseDayPatterns,
          defaultParseWidth: "any"
        }),
        dayPeriod: buildMatchFn({
          matchPatterns: matchDayPeriodPatterns,
          defaultMatchWidth: "any",
          parsePatterns: parseDayPeriodPatterns,
          defaultParseWidth: "any"
        })
      };
      var locale = {
        code: "en-US",
        formatDistance,
        formatLong,
        formatRelative,
        localize,
        match,
        options: {
          weekStartsOn: 0,
          firstWeekContainsDate: 1
        }
      };
      var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
      var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
      var escapedStringRegExp = /^'([^]*?)'?$/;
      var doubleQuoteRegExp = /''/g;
      var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
      function format(dirtyDate, dirtyFormatStr, options) {
        var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
        requiredArgs(2, arguments);
        var formatStr = String(dirtyFormatStr);
        var defaultOptions2 = getDefaultOptions();
        var locale$1 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : locale;
        var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
        if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
          throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
        }
        var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
          throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
        }
        if (!locale$1.localize) {
          throw new RangeError("locale must contain localize property");
        }
        if (!locale$1.formatLong) {
          throw new RangeError("locale must contain formatLong property");
        }
        var originalDate = toDate(dirtyDate);
        if (!isValid(originalDate)) {
          throw new RangeError("Invalid time value");
        }
        var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
        var utcDate = subMilliseconds(originalDate, timezoneOffset);
        var formatterOptions = {
          firstWeekContainsDate,
          weekStartsOn,
          locale: locale$1,
          _originalDate: originalDate
        };
        var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
          var firstCharacter = substring[0];
          if (firstCharacter === "p" || firstCharacter === "P") {
            var longFormatter = longFormatters[firstCharacter];
            return longFormatter(substring, locale$1.formatLong);
          }
          return substring;
        }).join("").match(formattingTokensRegExp).map(function(substring) {
          if (substring === "''") {
            return "'";
          }
          var firstCharacter = substring[0];
          if (firstCharacter === "'") {
            return cleanEscapedString(substring);
          }
          var formatter = formatters[firstCharacter];
          if (formatter) {
            if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
              throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
              throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            return formatter(utcDate, substring, locale$1.localize, formatterOptions);
          }
          if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
            throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
          }
          return substring;
        }).join("");
        return result;
      }
      function cleanEscapedString(input) {
        var matched = input.match(escapedStringRegExp);
        if (!matched) {
          return input;
        }
        return matched[1].replace(doubleQuoteRegExp, "'");
      }
      function _defineProperty$x(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Setter {
        constructor() {
          _defineProperty$x(this, "priority", void 0);
          _defineProperty$x(this, "subPriority", 0);
        }
        validate(_utcDate, _options) {
          return true;
        }
      }
      class ValueSetter extends Setter {
        constructor(value, validateValue, setValue, priority, subPriority) {
          super();
          this.value = value;
          this.validateValue = validateValue;
          this.setValue = setValue;
          this.priority = priority;
          if (subPriority) {
            this.subPriority = subPriority;
          }
        }
        validate(utcDate, options) {
          return this.validateValue(utcDate, this.value, options);
        }
        set(utcDate, flags, options) {
          return this.setValue(utcDate, flags, this.value, options);
        }
      }
      function _defineProperty$w(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Parser {
        constructor() {
          _defineProperty$w(this, "incompatibleTokens", void 0);
          _defineProperty$w(this, "priority", void 0);
          _defineProperty$w(this, "subPriority", void 0);
        }
        run(dateString, token, match2, options) {
          var result = this.parse(dateString, token, match2, options);
          if (!result) {
            return null;
          }
          return {
            setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
            rest: result.rest
          };
        }
        validate(_utcDate, _value, _options) {
          return true;
        }
      }
      function _defineProperty$v(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class EraParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$v(this, "priority", 140);
          _defineProperty$v(this, "incompatibleTokens", ["R", "u", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "G":
            case "GG":
            case "GGG":
              return match2.era(dateString, {
                width: "abbreviated"
              }) || match2.era(dateString, {
                width: "narrow"
              });
            case "GGGGG":
              return match2.era(dateString, {
                width: "narrow"
              });
            case "GGGG":
            default:
              return match2.era(dateString, {
                width: "wide"
              }) || match2.era(dateString, {
                width: "abbreviated"
              }) || match2.era(dateString, {
                width: "narrow"
              });
          }
        }
        set(date, flags, value) {
          flags.era = value;
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      var numericPatterns = {
        month: /^(1[0-2]|0?\d)/,
        // 0 to 12
        date: /^(3[0-1]|[0-2]?\d)/,
        // 0 to 31
        dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
        // 0 to 366
        week: /^(5[0-3]|[0-4]?\d)/,
        // 0 to 53
        hour23h: /^(2[0-3]|[0-1]?\d)/,
        // 0 to 23
        hour24h: /^(2[0-4]|[0-1]?\d)/,
        // 0 to 24
        hour11h: /^(1[0-1]|0?\d)/,
        // 0 to 11
        hour12h: /^(1[0-2]|0?\d)/,
        // 0 to 12
        minute: /^[0-5]?\d/,
        // 0 to 59
        second: /^[0-5]?\d/,
        // 0 to 59
        singleDigit: /^\d/,
        // 0 to 9
        twoDigits: /^\d{1,2}/,
        // 0 to 99
        threeDigits: /^\d{1,3}/,
        // 0 to 999
        fourDigits: /^\d{1,4}/,
        // 0 to 9999
        anyDigitsSigned: /^-?\d+/,
        singleDigitSigned: /^-?\d/,
        // 0 to 9, -0 to -9
        twoDigitsSigned: /^-?\d{1,2}/,
        // 0 to 99, -0 to -99
        threeDigitsSigned: /^-?\d{1,3}/,
        // 0 to 999, -0 to -999
        fourDigitsSigned: /^-?\d{1,4}/
        // 0 to 9999, -0 to -9999
      };
      var timezonePatterns = {
        basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
        basic: /^([+-])(\d{2})(\d{2})|Z/,
        basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
        extended: /^([+-])(\d{2}):(\d{2})|Z/,
        extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
      };
      function mapValue(parseFnResult, mapFn) {
        if (!parseFnResult) {
          return parseFnResult;
        }
        return {
          value: mapFn(parseFnResult.value),
          rest: parseFnResult.rest
        };
      }
      function parseNumericPattern(pattern, dateString) {
        var matchResult = dateString.match(pattern);
        if (!matchResult) {
          return null;
        }
        return {
          value: parseInt(matchResult[0], 10),
          rest: dateString.slice(matchResult[0].length)
        };
      }
      function parseTimezonePattern(pattern, dateString) {
        var matchResult = dateString.match(pattern);
        if (!matchResult) {
          return null;
        }
        if (matchResult[0] === "Z") {
          return {
            value: 0,
            rest: dateString.slice(1)
          };
        }
        var sign = matchResult[1] === "+" ? 1 : -1;
        var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
        var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
        var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
        return {
          value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
          rest: dateString.slice(matchResult[0].length)
        };
      }
      function parseAnyDigitsSigned(dateString) {
        return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
      }
      function parseNDigits(n, dateString) {
        switch (n) {
          case 1:
            return parseNumericPattern(numericPatterns.singleDigit, dateString);
          case 2:
            return parseNumericPattern(numericPatterns.twoDigits, dateString);
          case 3:
            return parseNumericPattern(numericPatterns.threeDigits, dateString);
          case 4:
            return parseNumericPattern(numericPatterns.fourDigits, dateString);
          default:
            return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
        }
      }
      function parseNDigitsSigned(n, dateString) {
        switch (n) {
          case 1:
            return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
          case 2:
            return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
          case 3:
            return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
          case 4:
            return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
          default:
            return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
        }
      }
      function dayPeriodEnumToHours(dayPeriod) {
        switch (dayPeriod) {
          case "morning":
            return 4;
          case "evening":
            return 17;
          case "pm":
          case "noon":
          case "afternoon":
            return 12;
          case "am":
          case "midnight":
          case "night":
          default:
            return 0;
        }
      }
      function normalizeTwoDigitYear(twoDigitYear, currentYear) {
        var isCommonEra = currentYear > 0;
        var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
        var result;
        if (absCurrentYear <= 50) {
          result = twoDigitYear || 100;
        } else {
          var rangeEnd = absCurrentYear + 50;
          var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
          var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
          result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
        }
        return isCommonEra ? result : 1 - result;
      }
      function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
      }
      function _defineProperty$u(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class YearParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$u(this, "priority", 130);
          _defineProperty$u(this, "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          var valueCallback = function(year) {
            return {
              year,
              isTwoDigitYear: token === "yy"
            };
          };
          switch (token) {
            case "y":
              return mapValue(parseNDigits(4, dateString), valueCallback);
            case "yo":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "year"
                }),
                valueCallback
              );
            default:
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
          }
        }
        validate(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
        set(date, flags, value) {
          var currentYear = date.getUTCFullYear();
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
            date.setUTCHours(0, 0, 0, 0);
            return date;
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$t(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class LocalWeekYearParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$t(this, "priority", 130);
          _defineProperty$t(this, "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]);
        }
        parse(dateString, token, match2) {
          var valueCallback = function(year) {
            return {
              year,
              isTwoDigitYear: token === "YY"
            };
          };
          switch (token) {
            case "Y":
              return mapValue(parseNDigits(4, dateString), valueCallback);
            case "Yo":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "year"
                }),
                valueCallback
              );
            default:
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
          }
        }
        validate(_date, value) {
          return value.isTwoDigitYear || value.year > 0;
        }
        set(date, flags, value, options) {
          var currentYear = getUTCWeekYear(date, options);
          if (value.isTwoDigitYear) {
            var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
            date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
            date.setUTCHours(0, 0, 0, 0);
            return startOfUTCWeek(date, options);
          }
          var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
          date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
          date.setUTCHours(0, 0, 0, 0);
          return startOfUTCWeek(date, options);
        }
      }
      function _defineProperty$s(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ISOWeekYearParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$s(this, "priority", 130);
          _defineProperty$s(this, "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
        }
        parse(dateString, token) {
          if (token === "R") {
            return parseNDigitsSigned(4, dateString);
          }
          return parseNDigitsSigned(token.length, dateString);
        }
        set(_date, _flags, value) {
          var firstWeekOfYear = /* @__PURE__ */ new Date(0);
          firstWeekOfYear.setUTCFullYear(value, 0, 4);
          firstWeekOfYear.setUTCHours(0, 0, 0, 0);
          return startOfUTCISOWeek(firstWeekOfYear);
        }
      }
      function _defineProperty$r(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ExtendedYearParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$r(this, "priority", 130);
          _defineProperty$r(this, "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token) {
          if (token === "u") {
            return parseNDigitsSigned(4, dateString);
          }
          return parseNDigitsSigned(token.length, dateString);
        }
        set(date, _flags, value) {
          date.setUTCFullYear(value, 0, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$q(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class QuarterParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$q(this, "priority", 120);
          _defineProperty$q(this, "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "Q":
            case "QQ":
              return parseNDigits(token.length, dateString);
            case "Qo":
              return match2.ordinalNumber(dateString, {
                unit: "quarter"
              });
            case "QQQ":
              return match2.quarter(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "QQQQQ":
              return match2.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "QQQQ":
            default:
              return match2.quarter(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.quarter(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.quarter(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 4;
        }
        set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$p(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class StandAloneQuarterParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$p(this, "priority", 120);
          _defineProperty$p(this, "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "q":
            case "qq":
              return parseNDigits(token.length, dateString);
            case "qo":
              return match2.ordinalNumber(dateString, {
                unit: "quarter"
              });
            case "qqq":
              return match2.quarter(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "qqqqq":
              return match2.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "qqqq":
            default:
              return match2.quarter(dateString, {
                width: "wide",
                context: "standalone"
              }) || match2.quarter(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.quarter(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 4;
        }
        set(date, _flags, value) {
          date.setUTCMonth((value - 1) * 3, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$o(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class MonthParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$o(this, "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]);
          _defineProperty$o(this, "priority", 110);
        }
        parse(dateString, token, match2) {
          var valueCallback = function(value) {
            return value - 1;
          };
          switch (token) {
            case "M":
              return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
            case "MM":
              return mapValue(parseNDigits(2, dateString), valueCallback);
            case "Mo":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "month"
                }),
                valueCallback
              );
            case "MMM":
              return match2.month(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "MMMMM":
              return match2.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "MMMM":
            default:
              return match2.month(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.month(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.month(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 11;
        }
        set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$n(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class StandAloneMonthParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$n(this, "priority", 110);
          _defineProperty$n(this, "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          var valueCallback = function(value) {
            return value - 1;
          };
          switch (token) {
            case "L":
              return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
            case "LL":
              return mapValue(parseNDigits(2, dateString), valueCallback);
            case "Lo":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "month"
                }),
                valueCallback
              );
            case "LLL":
              return match2.month(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "LLLLL":
              return match2.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "LLLL":
            default:
              return match2.month(dateString, {
                width: "wide",
                context: "standalone"
              }) || match2.month(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.month(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 11;
        }
        set(date, _flags, value) {
          date.setUTCMonth(value, 1);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function setUTCWeek(dirtyDate, dirtyWeek, options) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var week = toInteger(dirtyWeek);
        var diff = getUTCWeek(date, options) - week;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
      }
      function _defineProperty$m(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class LocalWeekParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$m(this, "priority", 100);
          _defineProperty$m(this, "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "w":
              return parseNumericPattern(numericPatterns.week, dateString);
            case "wo":
              return match2.ordinalNumber(dateString, {
                unit: "week"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 53;
        }
        set(date, _flags, value, options) {
          return startOfUTCWeek(setUTCWeek(date, value, options), options);
        }
      }
      function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
        requiredArgs(2, arguments);
        var date = toDate(dirtyDate);
        var isoWeek = toInteger(dirtyISOWeek);
        var diff = getUTCISOWeek(date) - isoWeek;
        date.setUTCDate(date.getUTCDate() - diff * 7);
        return date;
      }
      function _defineProperty$l(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ISOWeekParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$l(this, "priority", 100);
          _defineProperty$l(this, "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "I":
              return parseNumericPattern(numericPatterns.week, dateString);
            case "Io":
              return match2.ordinalNumber(dateString, {
                unit: "week"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 53;
        }
        set(date, _flags, value) {
          return startOfUTCISOWeek(setUTCISOWeek(date, value));
        }
      }
      function _defineProperty$k(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      class DateParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$k(this, "priority", 90);
          _defineProperty$k(this, "subPriority", 1);
          _defineProperty$k(this, "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "d":
              return parseNumericPattern(numericPatterns.date, dateString);
            case "do":
              return match2.ordinalNumber(dateString, {
                unit: "date"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex(year);
          var month = date.getUTCMonth();
          if (isLeapYear) {
            return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
          } else {
            return value >= 1 && value <= DAYS_IN_MONTH[month];
          }
        }
        set(date, _flags, value) {
          date.setUTCDate(value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$j(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class DayOfYearParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$j(this, "priority", 90);
          _defineProperty$j(this, "subpriority", 1);
          _defineProperty$j(this, "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "D":
            case "DD":
              return parseNumericPattern(numericPatterns.dayOfYear, dateString);
            case "Do":
              return match2.ordinalNumber(dateString, {
                unit: "date"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(date, value) {
          var year = date.getUTCFullYear();
          var isLeapYear = isLeapYearIndex(year);
          if (isLeapYear) {
            return value >= 1 && value <= 366;
          } else {
            return value >= 1 && value <= 365;
          }
        }
        set(date, _flags, value) {
          date.setUTCMonth(0, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function setUTCDay(dirtyDate, dirtyDay, options) {
        var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
        requiredArgs(2, arguments);
        var defaultOptions2 = getDefaultOptions();
        var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
        if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
          throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
        }
        var date = toDate(dirtyDate);
        var day = toInteger(dirtyDay);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
      }
      function _defineProperty$i(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class DayParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$i(this, "priority", 90);
          _defineProperty$i(this, "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "E":
            case "EE":
            case "EEE":
              return match2.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEEE":
              return match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEEEE":
              return match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "EEEE":
            default:
              return match2.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 6;
        }
        set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$h(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class LocalDayParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$h(this, "priority", 90);
          _defineProperty$h(this, "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]);
        }
        parse(dateString, token, match2, options) {
          var valueCallback = function(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            case "e":
            case "ee":
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
            case "eo":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "day"
                }),
                valueCallback
              );
            case "eee":
              return match2.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "eeeee":
              return match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "eeeeee":
              return match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "eeee":
            default:
              return match2.day(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "short",
                context: "formatting"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 6;
        }
        set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$g(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class StandAloneLocalDayParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$g(this, "priority", 90);
          _defineProperty$g(this, "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]);
        }
        parse(dateString, token, match2, options) {
          var valueCallback = function(value) {
            var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
          };
          switch (token) {
            case "c":
            case "cc":
              return mapValue(parseNDigits(token.length, dateString), valueCallback);
            case "co":
              return mapValue(
                match2.ordinalNumber(dateString, {
                  unit: "day"
                }),
                valueCallback
              );
            case "ccc":
              return match2.day(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "ccccc":
              return match2.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "cccccc":
              return match2.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
            case "cccc":
            default:
              return match2.day(dateString, {
                width: "wide",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "abbreviated",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "short",
                context: "standalone"
              }) || match2.day(dateString, {
                width: "narrow",
                context: "standalone"
              });
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 6;
        }
        set(date, _flags, value, options) {
          date = setUTCDay(date, value, options);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function setUTCISODay(dirtyDate, dirtyDay) {
        requiredArgs(2, arguments);
        var day = toInteger(dirtyDay);
        if (day % 7 === 0) {
          day = day - 7;
        }
        var weekStartsOn = 1;
        var date = toDate(dirtyDate);
        var currentDay = date.getUTCDay();
        var remainder = day % 7;
        var dayIndex = (remainder + 7) % 7;
        var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
      }
      function _defineProperty$f(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ISODayParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$f(this, "priority", 90);
          _defineProperty$f(this, "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]);
        }
        parse(dateString, token, match2) {
          var valueCallback = function(value) {
            if (value === 0) {
              return 7;
            }
            return value;
          };
          switch (token) {
            case "i":
            case "ii":
              return parseNDigits(token.length, dateString);
            case "io":
              return match2.ordinalNumber(dateString, {
                unit: "day"
              });
            case "iii":
              return mapValue(
                match2.day(dateString, {
                  width: "abbreviated",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "short",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "narrow",
                  context: "formatting"
                }),
                valueCallback
              );
            case "iiiii":
              return mapValue(
                match2.day(dateString, {
                  width: "narrow",
                  context: "formatting"
                }),
                valueCallback
              );
            case "iiiiii":
              return mapValue(
                match2.day(dateString, {
                  width: "short",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "narrow",
                  context: "formatting"
                }),
                valueCallback
              );
            case "iiii":
            default:
              return mapValue(
                match2.day(dateString, {
                  width: "wide",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "abbreviated",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "short",
                  context: "formatting"
                }) || match2.day(dateString, {
                  width: "narrow",
                  context: "formatting"
                }),
                valueCallback
              );
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 7;
        }
        set(date, _flags, value) {
          date = setUTCISODay(date, value);
          date.setUTCHours(0, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$e(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class AMPMParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$e(this, "priority", 80);
          _defineProperty$e(this, "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "a":
            case "aa":
            case "aaa":
              return match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaaa":
              return match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "aaaa":
            default:
              return match2.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$d(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class AMPMMidnightParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$d(this, "priority", 80);
          _defineProperty$d(this, "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "b":
            case "bb":
            case "bbb":
              return match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbbb":
              return match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "bbbb":
            default:
              return match2.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$c(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class DayPeriodParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$c(this, "priority", 80);
          _defineProperty$c(this, "incompatibleTokens", ["a", "b", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "B":
            case "BB":
            case "BBB":
              return match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBBB":
              return match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
            case "BBBB":
            default:
              return match2.dayPeriod(dateString, {
                width: "wide",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "abbreviated",
                context: "formatting"
              }) || match2.dayPeriod(dateString, {
                width: "narrow",
                context: "formatting"
              });
          }
        }
        set(date, _flags, value) {
          date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$b(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Hour1to12Parser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$b(this, "priority", 70);
          _defineProperty$b(this, "incompatibleTokens", ["H", "K", "k", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "h":
              return parseNumericPattern(numericPatterns.hour12h, dateString);
            case "ho":
              return match2.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 12;
        }
        set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else if (!isPM && value === 12) {
            date.setUTCHours(0, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }
      function _defineProperty$a(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Hour0to23Parser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$a(this, "priority", 70);
          _defineProperty$a(this, "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "H":
              return parseNumericPattern(numericPatterns.hour23h, dateString);
            case "Ho":
              return match2.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 23;
        }
        set(date, _flags, value) {
          date.setUTCHours(value, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$9(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Hour0To11Parser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$9(this, "priority", 70);
          _defineProperty$9(this, "incompatibleTokens", ["h", "H", "k", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "K":
              return parseNumericPattern(numericPatterns.hour11h, dateString);
            case "Ko":
              return match2.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 11;
        }
        set(date, _flags, value) {
          var isPM = date.getUTCHours() >= 12;
          if (isPM && value < 12) {
            date.setUTCHours(value + 12, 0, 0, 0);
          } else {
            date.setUTCHours(value, 0, 0, 0);
          }
          return date;
        }
      }
      function _defineProperty$8(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class Hour1To24Parser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$8(this, "priority", 70);
          _defineProperty$8(this, "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "k":
              return parseNumericPattern(numericPatterns.hour24h, dateString);
            case "ko":
              return match2.ordinalNumber(dateString, {
                unit: "hour"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 1 && value <= 24;
        }
        set(date, _flags, value) {
          var hours = value <= 24 ? value % 24 : value;
          date.setUTCHours(hours, 0, 0, 0);
          return date;
        }
      }
      function _defineProperty$7(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class MinuteParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$7(this, "priority", 60);
          _defineProperty$7(this, "incompatibleTokens", ["t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "m":
              return parseNumericPattern(numericPatterns.minute, dateString);
            case "mo":
              return match2.ordinalNumber(dateString, {
                unit: "minute"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 59;
        }
        set(date, _flags, value) {
          date.setUTCMinutes(value, 0, 0);
          return date;
        }
      }
      function _defineProperty$6(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class SecondParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$6(this, "priority", 50);
          _defineProperty$6(this, "incompatibleTokens", ["t", "T"]);
        }
        parse(dateString, token, match2) {
          switch (token) {
            case "s":
              return parseNumericPattern(numericPatterns.second, dateString);
            case "so":
              return match2.ordinalNumber(dateString, {
                unit: "second"
              });
            default:
              return parseNDigits(token.length, dateString);
          }
        }
        validate(_date, value) {
          return value >= 0 && value <= 59;
        }
        set(date, _flags, value) {
          date.setUTCSeconds(value, 0);
          return date;
        }
      }
      function _defineProperty$5(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class FractionOfSecondParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$5(this, "priority", 30);
          _defineProperty$5(this, "incompatibleTokens", ["t", "T"]);
        }
        parse(dateString, token) {
          var valueCallback = function(value) {
            return Math.floor(value * Math.pow(10, -token.length + 3));
          };
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        }
        set(date, _flags, value) {
          date.setUTCMilliseconds(value);
          return date;
        }
      }
      function _defineProperty$4(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ISOTimezoneWithZParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$4(this, "priority", 10);
          _defineProperty$4(this, "incompatibleTokens", ["t", "T", "x"]);
        }
        parse(dateString, token) {
          switch (token) {
            case "X":
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
            case "XX":
              return parseTimezonePattern(timezonePatterns.basic, dateString);
            case "XXXX":
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
            case "XXXXX":
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
            case "XXX":
            default:
              return parseTimezonePattern(timezonePatterns.extended, dateString);
          }
        }
        set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }
      function _defineProperty$3(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class ISOTimezoneParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$3(this, "priority", 10);
          _defineProperty$3(this, "incompatibleTokens", ["t", "T", "X"]);
        }
        parse(dateString, token) {
          switch (token) {
            case "x":
              return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
            case "xx":
              return parseTimezonePattern(timezonePatterns.basic, dateString);
            case "xxxx":
              return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
            case "xxxxx":
              return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
            case "xxx":
            default:
              return parseTimezonePattern(timezonePatterns.extended, dateString);
          }
        }
        set(date, flags, value) {
          if (flags.timestampIsSet) {
            return date;
          }
          return new Date(date.getTime() - value);
        }
      }
      function _defineProperty$2(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class TimestampSecondsParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$2(this, "priority", 40);
          _defineProperty$2(this, "incompatibleTokens", "*");
        }
        parse(dateString) {
          return parseAnyDigitsSigned(dateString);
        }
        set(_date, _flags, value) {
          return [new Date(value * 1e3), {
            timestampIsSet: true
          }];
        }
      }
      function _defineProperty$1(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      class TimestampMillisecondsParser extends Parser {
        constructor() {
          super(...arguments);
          _defineProperty$1(this, "priority", 20);
          _defineProperty$1(this, "incompatibleTokens", "*");
        }
        parse(dateString) {
          return parseAnyDigitsSigned(dateString);
        }
        set(_date, _flags, value) {
          return [new Date(value), {
            timestampIsSet: true
          }];
        }
      }
      ({
        G: new EraParser(),
        y: new YearParser(),
        Y: new LocalWeekYearParser(),
        R: new ISOWeekYearParser(),
        u: new ExtendedYearParser(),
        Q: new QuarterParser(),
        q: new StandAloneQuarterParser(),
        M: new MonthParser(),
        L: new StandAloneMonthParser(),
        w: new LocalWeekParser(),
        I: new ISOWeekParser(),
        d: new DateParser(),
        D: new DayOfYearParser(),
        E: new DayParser(),
        e: new LocalDayParser(),
        c: new StandAloneLocalDayParser(),
        i: new ISODayParser(),
        a: new AMPMParser(),
        b: new AMPMMidnightParser(),
        B: new DayPeriodParser(),
        h: new Hour1to12Parser(),
        H: new Hour0to23Parser(),
        K: new Hour0To11Parser(),
        k: new Hour1To24Parser(),
        m: new MinuteParser(),
        s: new SecondParser(),
        S: new FractionOfSecondParser(),
        X: new ISOTimezoneWithZParser(),
        x: new ISOTimezoneParser(),
        t: new TimestampSecondsParser(),
        T: new TimestampMillisecondsParser()
      });
      function isToday(dirtyDate) {
        requiredArgs(1, arguments);
        return isSameDay(dirtyDate, Date.now());
      }
      function subDays(dirtyDate, dirtyAmount) {
        requiredArgs(2, arguments);
        var amount = toInteger(dirtyAmount);
        return addDays(dirtyDate, -amount);
      }
      var DatePicker = function(_a) {
        var id = _a.id, label = _a.label, onChange = _a.onChange, value = _a.value, mandatory = _a.mandatory;
        var wrapperRef = React.createRef();
        var _b = React.useState(value), dateValue = _b[0], setDateValue = _b[1];
        var handleDateChange = function(date) {
          setDateValue(date);
          var formattedDate = date ? format(date, "yyyy-MM-dd") : null;
          onChange(formattedDate);
        };
        console.warn("DatePicker is deprecated and will be removed in a future release. Please use InputField instead");
        return jsxRuntime.exports.jsxs("div", __assign({ className: "awell_date_picker", ref: wrapperRef }, { children: [jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label, mandatory }), jsxRuntime.exports.jsx(DatePickerComponent, { value: dateValue, dayPlaceholder: "dd", monthPlaceholder: "mm", yearPlaceholder: "yyyy", format: "dd/MM/yyyy", openCalendarOnFocus: true, onChange: handleDateChange, clearIcon: null })] }));
      };
      var classes$r = { "awell_description_wrapper": "awell__description_awell_description_wrapper", "slate-MediaEmbedElement-input": "awell__description_slate-MediaEmbedElement-input", "slate-MediaEmbedElement-iframe": "awell__description_slate-MediaEmbedElement-iframe" };
      var richTextClasses = { "content": "awell__richTextViewer_content", "bold": "awell__richTextViewer_bold", "slate-bold": "awell__richTextViewer_slate-bold", "strikethrough": "awell__richTextViewer_strikethrough", "slate-strikethrough": "awell__richTextViewer_slate-strikethrough", "underline": "awell__richTextViewer_underline", "slate-underline": "awell__richTextViewer_slate-underline", "italic": "awell__richTextViewer_italic", "slate-italic": "awell__richTextViewer_slate-italic" };
      var RichTextViewer = function(_a) {
        var content = _a.content;
        return jsxRuntime.exports.jsx("div", { className: richTextClasses.content, dangerouslySetInnerHTML: { __html: content } });
      };
      var purify = { exports: {} };
      (function(module2, exports3) {
        (function(global2, factory) {
          module2.exports = factory();
        })(commonjsGlobal, function() {
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
              return typeof obj2;
            } : function(obj2) {
              return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            }, _typeof2(obj);
          }
          function _setPrototypeOf2(o, p) {
            _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o2, p2) {
              o2.__proto__ = p2;
              return o2;
            };
            return _setPrototypeOf2(o, p);
          }
          function _isNativeReflectConstruct2() {
            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if (typeof Proxy === "function") return true;
            try {
              Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }
          function _construct(Parent, args, Class) {
            if (_isNativeReflectConstruct2()) {
              _construct = Reflect.construct;
            } else {
              _construct = function _construct2(Parent2, args2, Class2) {
                var a = [null];
                a.push.apply(a, args2);
                var Constructor = Function.bind.apply(Parent2, a);
                var instance = new Constructor();
                if (Class2) _setPrototypeOf2(instance, Class2.prototype);
                return instance;
              };
            }
            return _construct.apply(null, arguments);
          }
          function _toConsumableArray2(arr) {
            return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
          }
          function _arrayWithoutHoles2(arr) {
            if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
          }
          function _iterableToArray2(iter) {
            if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
          }
          function _unsupportedIterableToArray2(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
          }
          function _arrayLikeToArray2(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
            return arr2;
          }
          function _nonIterableSpread2() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var hasOwnProperty2 = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
          var freeze = Object.freeze, seal = Object.seal, create = Object.create;
          var _ref = typeof Reflect !== "undefined" && Reflect, apply = _ref.apply, construct = _ref.construct;
          if (!apply) {
            apply = function apply2(fun, thisValue, args) {
              return fun.apply(thisValue, args);
            };
          }
          if (!freeze) {
            freeze = function freeze2(x) {
              return x;
            };
          }
          if (!seal) {
            seal = function seal2(x) {
              return x;
            };
          }
          if (!construct) {
            construct = function construct2(Func, args) {
              return _construct(Func, _toConsumableArray2(args));
            };
          }
          var arrayForEach = unapply(Array.prototype.forEach);
          var arrayPop = unapply(Array.prototype.pop);
          var arrayPush = unapply(Array.prototype.push);
          var stringToLowerCase = unapply(String.prototype.toLowerCase);
          var stringMatch = unapply(String.prototype.match);
          var stringReplace = unapply(String.prototype.replace);
          var stringIndexOf = unapply(String.prototype.indexOf);
          var stringTrim = unapply(String.prototype.trim);
          var regExpTest = unapply(RegExp.prototype.test);
          var typeErrorCreate = unconstruct(TypeError);
          function unapply(func) {
            return function(thisArg) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              return apply(func, thisArg, args);
            };
          }
          function unconstruct(func) {
            return function() {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }
              return construct(func, args);
            };
          }
          function addToSet(set2, array, transformCaseFunc) {
            transformCaseFunc = transformCaseFunc ? transformCaseFunc : stringToLowerCase;
            if (setPrototypeOf) {
              setPrototypeOf(set2, null);
            }
            var l = array.length;
            while (l--) {
              var element = array[l];
              if (typeof element === "string") {
                var lcElement = transformCaseFunc(element);
                if (lcElement !== element) {
                  if (!isFrozen(array)) {
                    array[l] = lcElement;
                  }
                  element = lcElement;
                }
              }
              set2[element] = true;
            }
            return set2;
          }
          function clone(object) {
            var newObject = create(null);
            var property;
            for (property in object) {
              if (apply(hasOwnProperty2, object, [property])) {
                newObject[property] = object[property];
              }
            }
            return newObject;
          }
          function lookupGetter(object, prop) {
            while (object !== null) {
              var desc = getOwnPropertyDescriptor(object, prop);
              if (desc) {
                if (desc.get) {
                  return unapply(desc.get);
                }
                if (typeof desc.value === "function") {
                  return unapply(desc.value);
                }
              }
              object = getPrototypeOf(object);
            }
            function fallbackValue(element) {
              console.warn("fallback value for", element);
              return null;
            }
            return fallbackValue;
          }
          var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
          var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
          var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
          var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
          var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]);
          var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
          var text = freeze(["#text"]);
          var html = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]);
          var svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
          var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
          var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
          var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
          var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
          var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
          var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
          var IS_ALLOWED_URI = seal(
            /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
            // eslint-disable-line no-useless-escape
          );
          var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
          var ATTR_WHITESPACE = seal(
            /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
            // eslint-disable-line no-control-regex
          );
          var DOCTYPE_NAME = seal(/^html$/i);
          var getGlobal = function getGlobal2() {
            return typeof window === "undefined" ? null : window;
          };
          var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, document2) {
            if (_typeof2(trustedTypes) !== "object" || typeof trustedTypes.createPolicy !== "function") {
              return null;
            }
            var suffix = null;
            var ATTR_NAME = "data-tt-policy-suffix";
            if (document2.currentScript && document2.currentScript.hasAttribute(ATTR_NAME)) {
              suffix = document2.currentScript.getAttribute(ATTR_NAME);
            }
            var policyName = "dompurify" + (suffix ? "#" + suffix : "");
            try {
              return trustedTypes.createPolicy(policyName, {
                createHTML: function createHTML(html2) {
                  return html2;
                },
                createScriptURL: function createScriptURL(scriptUrl) {
                  return scriptUrl;
                }
              });
            } catch (_) {
              console.warn("TrustedTypes policy " + policyName + " could not be created.");
              return null;
            }
          };
          function createDOMPurify() {
            var window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
            var DOMPurify2 = function DOMPurify3(root2) {
              return createDOMPurify(root2);
            };
            DOMPurify2.version = "2.4.0";
            DOMPurify2.removed = [];
            if (!window2 || !window2.document || window2.document.nodeType !== 9) {
              DOMPurify2.isSupported = false;
              return DOMPurify2;
            }
            var originalDocument = window2.document;
            var document2 = window2.document;
            var DocumentFragment = window2.DocumentFragment, HTMLTemplateElement = window2.HTMLTemplateElement, Node = window2.Node, Element2 = window2.Element, NodeFilter = window2.NodeFilter, _window$NamedNodeMap = window2.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window2.NamedNodeMap || window2.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window2.HTMLFormElement, DOMParser = window2.DOMParser, trustedTypes = window2.trustedTypes;
            var ElementPrototype = Element2.prototype;
            var cloneNode = lookupGetter(ElementPrototype, "cloneNode");
            var getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
            var getChildNodes = lookupGetter(ElementPrototype, "childNodes");
            var getParentNode = lookupGetter(ElementPrototype, "parentNode");
            if (typeof HTMLTemplateElement === "function") {
              var template = document2.createElement("template");
              if (template.content && template.content.ownerDocument) {
                document2 = template.content.ownerDocument;
              }
            }
            var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
            var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML("") : "";
            var _document = document2, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment = _document.createDocumentFragment, getElementsByTagName = _document.getElementsByTagName;
            var importNode = originalDocument.importNode;
            var documentMode = {};
            try {
              documentMode = clone(document2).documentMode ? document2.documentMode : {};
            } catch (_) {
            }
            var hooks = {};
            DOMPurify2.isSupported = typeof getParentNode === "function" && implementation && typeof implementation.createHTMLDocument !== "undefined" && documentMode !== 9;
            var MUSTACHE_EXPR$1 = MUSTACHE_EXPR, ERB_EXPR$1 = ERB_EXPR, DATA_ATTR$1 = DATA_ATTR, ARIA_ATTR$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
            var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
            var ALLOWED_TAGS = null;
            var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray2(html$1), _toConsumableArray2(svg$1), _toConsumableArray2(svgFilters), _toConsumableArray2(mathMl$1), _toConsumableArray2(text)));
            var ALLOWED_ATTR = null;
            var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray2(html), _toConsumableArray2(svg), _toConsumableArray2(mathMl), _toConsumableArray2(xml)));
            var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
              tagNameCheck: {
                writable: true,
                configurable: false,
                enumerable: true,
                value: null
              },
              attributeNameCheck: {
                writable: true,
                configurable: false,
                enumerable: true,
                value: null
              },
              allowCustomizedBuiltInElements: {
                writable: true,
                configurable: false,
                enumerable: true,
                value: false
              }
            }));
            var FORBID_TAGS = null;
            var FORBID_ATTR = null;
            var ALLOW_ARIA_ATTR = true;
            var ALLOW_DATA_ATTR = true;
            var ALLOW_UNKNOWN_PROTOCOLS = false;
            var SAFE_FOR_TEMPLATES = false;
            var WHOLE_DOCUMENT = false;
            var SET_CONFIG = false;
            var FORCE_BODY = false;
            var RETURN_DOM = false;
            var RETURN_DOM_FRAGMENT = false;
            var RETURN_TRUSTED_TYPE = false;
            var SANITIZE_DOM = true;
            var SANITIZE_NAMED_PROPS = false;
            var SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
            var KEEP_CONTENT = true;
            var IN_PLACE = false;
            var USE_PROFILES = {};
            var FORBID_CONTENTS = null;
            var DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
            var DATA_URI_TAGS = null;
            var DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
            var URI_SAFE_ATTRIBUTES = null;
            var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
            var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
            var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
            var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
            var NAMESPACE = HTML_NAMESPACE;
            var IS_EMPTY_INPUT = false;
            var PARSER_MEDIA_TYPE;
            var SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
            var DEFAULT_PARSER_MEDIA_TYPE = "text/html";
            var transformCaseFunc;
            var CONFIG = null;
            var formElement = document2.createElement("form");
            var isRegexOrFunction = function isRegexOrFunction2(testValue) {
              return testValue instanceof RegExp || testValue instanceof Function;
            };
            var _parseConfig = function _parseConfig2(cfg) {
              if (CONFIG && CONFIG === cfg) {
                return;
              }
              if (!cfg || _typeof2(cfg) !== "object") {
                cfg = {};
              }
              cfg = clone(cfg);
              PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
              SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
              transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? function(x) {
                return x;
              } : stringToLowerCase;
              ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
              ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
              URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(
                clone(DEFAULT_URI_SAFE_ATTRIBUTES),
                // eslint-disable-line indent
                cfg.ADD_URI_SAFE_ATTR,
                // eslint-disable-line indent
                transformCaseFunc
                // eslint-disable-line indent
              ) : DEFAULT_URI_SAFE_ATTRIBUTES;
              DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(
                clone(DEFAULT_DATA_URI_TAGS),
                // eslint-disable-line indent
                cfg.ADD_DATA_URI_TAGS,
                // eslint-disable-line indent
                transformCaseFunc
                // eslint-disable-line indent
              ) : DEFAULT_DATA_URI_TAGS;
              FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
              FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
              FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
              USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
              ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
              ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
              ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
              SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
              WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
              RETURN_DOM = cfg.RETURN_DOM || false;
              RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
              RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
              FORCE_BODY = cfg.FORCE_BODY || false;
              SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
              SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
              KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
              IN_PLACE = cfg.IN_PLACE || false;
              IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
              NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
              if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
                CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
              }
              if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
                CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
              }
              if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
                CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
              }
              if (SAFE_FOR_TEMPLATES) {
                ALLOW_DATA_ATTR = false;
              }
              if (RETURN_DOM_FRAGMENT) {
                RETURN_DOM = true;
              }
              if (USE_PROFILES) {
                ALLOWED_TAGS = addToSet({}, _toConsumableArray2(text));
                ALLOWED_ATTR = [];
                if (USE_PROFILES.html === true) {
                  addToSet(ALLOWED_TAGS, html$1);
                  addToSet(ALLOWED_ATTR, html);
                }
                if (USE_PROFILES.svg === true) {
                  addToSet(ALLOWED_TAGS, svg$1);
                  addToSet(ALLOWED_ATTR, svg);
                  addToSet(ALLOWED_ATTR, xml);
                }
                if (USE_PROFILES.svgFilters === true) {
                  addToSet(ALLOWED_TAGS, svgFilters);
                  addToSet(ALLOWED_ATTR, svg);
                  addToSet(ALLOWED_ATTR, xml);
                }
                if (USE_PROFILES.mathMl === true) {
                  addToSet(ALLOWED_TAGS, mathMl$1);
                  addToSet(ALLOWED_ATTR, mathMl);
                  addToSet(ALLOWED_ATTR, xml);
                }
              }
              if (cfg.ADD_TAGS) {
                if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
                  ALLOWED_TAGS = clone(ALLOWED_TAGS);
                }
                addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
              }
              if (cfg.ADD_ATTR) {
                if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
                  ALLOWED_ATTR = clone(ALLOWED_ATTR);
                }
                addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
              }
              if (cfg.ADD_URI_SAFE_ATTR) {
                addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
              }
              if (cfg.FORBID_CONTENTS) {
                if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
                  FORBID_CONTENTS = clone(FORBID_CONTENTS);
                }
                addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
              }
              if (KEEP_CONTENT) {
                ALLOWED_TAGS["#text"] = true;
              }
              if (WHOLE_DOCUMENT) {
                addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
              }
              if (ALLOWED_TAGS.table) {
                addToSet(ALLOWED_TAGS, ["tbody"]);
                delete FORBID_TAGS.tbody;
              }
              if (freeze) {
                freeze(cfg);
              }
              CONFIG = cfg;
            };
            var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
            var HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "desc", "title", "annotation-xml"]);
            var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
            var ALL_SVG_TAGS = addToSet({}, svg$1);
            addToSet(ALL_SVG_TAGS, svgFilters);
            addToSet(ALL_SVG_TAGS, svgDisallowed);
            var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
            addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
            var _checkValidNamespace = function _checkValidNamespace2(element) {
              var parent = getParentNode(element);
              if (!parent || !parent.tagName) {
                parent = {
                  namespaceURI: HTML_NAMESPACE,
                  tagName: "template"
                };
              }
              var tagName = stringToLowerCase(element.tagName);
              var parentTagName = stringToLowerCase(parent.tagName);
              if (element.namespaceURI === SVG_NAMESPACE) {
                if (parent.namespaceURI === HTML_NAMESPACE) {
                  return tagName === "svg";
                }
                if (parent.namespaceURI === MATHML_NAMESPACE) {
                  return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
                }
                return Boolean(ALL_SVG_TAGS[tagName]);
              }
              if (element.namespaceURI === MATHML_NAMESPACE) {
                if (parent.namespaceURI === HTML_NAMESPACE) {
                  return tagName === "math";
                }
                if (parent.namespaceURI === SVG_NAMESPACE) {
                  return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
                }
                return Boolean(ALL_MATHML_TAGS[tagName]);
              }
              if (element.namespaceURI === HTML_NAMESPACE) {
                if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
                  return false;
                }
                if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
                  return false;
                }
                return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
              }
              return false;
            };
            var _forceRemove = function _forceRemove2(node) {
              arrayPush(DOMPurify2.removed, {
                element: node
              });
              try {
                node.parentNode.removeChild(node);
              } catch (_) {
                try {
                  node.outerHTML = emptyHTML;
                } catch (_2) {
                  node.remove();
                }
              }
            };
            var _removeAttribute = function _removeAttribute2(name, node) {
              try {
                arrayPush(DOMPurify2.removed, {
                  attribute: node.getAttributeNode(name),
                  from: node
                });
              } catch (_) {
                arrayPush(DOMPurify2.removed, {
                  attribute: null,
                  from: node
                });
              }
              node.removeAttribute(name);
              if (name === "is" && !ALLOWED_ATTR[name]) {
                if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
                  try {
                    _forceRemove(node);
                  } catch (_) {
                  }
                } else {
                  try {
                    node.setAttribute(name, "");
                  } catch (_) {
                  }
                }
              }
            };
            var _initDocument = function _initDocument2(dirty) {
              var doc;
              var leadingWhitespace;
              if (FORCE_BODY) {
                dirty = "<remove></remove>" + dirty;
              } else {
                var matches = stringMatch(dirty, /^[\r\n\t ]+/);
                leadingWhitespace = matches && matches[0];
              }
              if (PARSER_MEDIA_TYPE === "application/xhtml+xml") {
                dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
              }
              var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
              if (NAMESPACE === HTML_NAMESPACE) {
                try {
                  doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
                } catch (_) {
                }
              }
              if (!doc || !doc.documentElement) {
                doc = implementation.createDocument(NAMESPACE, "template", null);
                try {
                  doc.documentElement.innerHTML = IS_EMPTY_INPUT ? "" : dirtyPayload;
                } catch (_) {
                }
              }
              var body = doc.body || doc.documentElement;
              if (dirty && leadingWhitespace) {
                body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
              }
              if (NAMESPACE === HTML_NAMESPACE) {
                return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
              }
              return WHOLE_DOCUMENT ? doc.documentElement : body;
            };
            var _createIterator = function _createIterator2(root2) {
              return createNodeIterator.call(
                root2.ownerDocument || root2,
                root2,
                // eslint-disable-next-line no-bitwise
                NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT,
                null,
                false
              );
            };
            var _isClobbered = function _isClobbered2(elm) {
              return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function");
            };
            var _isNode = function _isNode2(object) {
              return _typeof2(Node) === "object" ? object instanceof Node : object && _typeof2(object) === "object" && typeof object.nodeType === "number" && typeof object.nodeName === "string";
            };
            var _executeHook = function _executeHook2(entryPoint, currentNode, data) {
              if (!hooks[entryPoint]) {
                return;
              }
              arrayForEach(hooks[entryPoint], function(hook) {
                hook.call(DOMPurify2, currentNode, data, CONFIG);
              });
            };
            var _sanitizeElements = function _sanitizeElements2(currentNode) {
              var content;
              _executeHook("beforeSanitizeElements", currentNode, null);
              if (_isClobbered(currentNode)) {
                _forceRemove(currentNode);
                return true;
              }
              if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
                _forceRemove(currentNode);
                return true;
              }
              var tagName = transformCaseFunc(currentNode.nodeName);
              _executeHook("uponSanitizeElement", currentNode, {
                tagName,
                allowedTags: ALLOWED_TAGS
              });
              if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
                _forceRemove(currentNode);
                return true;
              }
              if (tagName === "select" && regExpTest(/<template/i, currentNode.innerHTML)) {
                _forceRemove(currentNode);
                return true;
              }
              if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {
                  if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;
                  if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;
                }
                if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
                  var parentNode = getParentNode(currentNode) || currentNode.parentNode;
                  var childNodes = getChildNodes(currentNode) || currentNode.childNodes;
                  if (childNodes && parentNode) {
                    var childCount = childNodes.length;
                    for (var i = childCount - 1; i >= 0; --i) {
                      parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));
                    }
                  }
                }
                _forceRemove(currentNode);
                return true;
              }
              if (currentNode instanceof Element2 && !_checkValidNamespace(currentNode)) {
                _forceRemove(currentNode);
                return true;
              }
              if ((tagName === "noscript" || tagName === "noembed") && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
                _forceRemove(currentNode);
                return true;
              }
              if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
                content = currentNode.textContent;
                content = stringReplace(content, MUSTACHE_EXPR$1, " ");
                content = stringReplace(content, ERB_EXPR$1, " ");
                if (currentNode.textContent !== content) {
                  arrayPush(DOMPurify2.removed, {
                    element: currentNode.cloneNode()
                  });
                  currentNode.textContent = content;
                }
              }
              _executeHook("afterSanitizeElements", currentNode, null);
              return false;
            };
            var _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
              if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
                return false;
              }
              if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName)) ;
              else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName)) ;
              else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
                if (
                  // First condition does a very basic check if a) it's basically a valid custom element tagname AND
                  // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
                  // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
                  _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
                  // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
                  lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
                ) ;
                else {
                  return false;
                }
              } else if (URI_SAFE_ATTRIBUTES[lcName]) ;
              else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE$1, ""))) ;
              else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag]) ;
              else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value, ATTR_WHITESPACE$1, ""))) ;
              else if (!value) ;
              else {
                return false;
              }
              return true;
            };
            var _basicCustomElementTest = function _basicCustomElementTest2(tagName) {
              return tagName.indexOf("-") > 0;
            };
            var _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
              var attr;
              var value;
              var lcName;
              var l;
              _executeHook("beforeSanitizeAttributes", currentNode, null);
              var attributes = currentNode.attributes;
              if (!attributes) {
                return;
              }
              var hookEvent = {
                attrName: "",
                attrValue: "",
                keepAttr: true,
                allowedAttributes: ALLOWED_ATTR
              };
              l = attributes.length;
              while (l--) {
                attr = attributes[l];
                var _attr = attr, name = _attr.name, namespaceURI = _attr.namespaceURI;
                value = name === "value" ? attr.value : stringTrim(attr.value);
                lcName = transformCaseFunc(name);
                hookEvent.attrName = lcName;
                hookEvent.attrValue = value;
                hookEvent.keepAttr = true;
                hookEvent.forceKeepAttr = void 0;
                _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
                value = hookEvent.attrValue;
                if (hookEvent.forceKeepAttr) {
                  continue;
                }
                _removeAttribute(name, currentNode);
                if (!hookEvent.keepAttr) {
                  continue;
                }
                if (regExpTest(/\/>/i, value)) {
                  _removeAttribute(name, currentNode);
                  continue;
                }
                if (SAFE_FOR_TEMPLATES) {
                  value = stringReplace(value, MUSTACHE_EXPR$1, " ");
                  value = stringReplace(value, ERB_EXPR$1, " ");
                }
                var lcTag = transformCaseFunc(currentNode.nodeName);
                if (!_isValidAttribute(lcTag, lcName, value)) {
                  continue;
                }
                if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
                  _removeAttribute(name, currentNode);
                  value = SANITIZE_NAMED_PROPS_PREFIX + value;
                }
                if (trustedTypesPolicy && _typeof2(trustedTypes) === "object" && typeof trustedTypes.getAttributeType === "function") {
                  if (namespaceURI) ;
                  else {
                    switch (trustedTypes.getAttributeType(lcTag, lcName)) {
                      case "TrustedHTML":
                        value = trustedTypesPolicy.createHTML(value);
                        break;
                      case "TrustedScriptURL":
                        value = trustedTypesPolicy.createScriptURL(value);
                        break;
                    }
                  }
                }
                try {
                  if (namespaceURI) {
                    currentNode.setAttributeNS(namespaceURI, name, value);
                  } else {
                    currentNode.setAttribute(name, value);
                  }
                  arrayPop(DOMPurify2.removed);
                } catch (_) {
                }
              }
              _executeHook("afterSanitizeAttributes", currentNode, null);
            };
            var _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
              var shadowNode;
              var shadowIterator = _createIterator(fragment);
              _executeHook("beforeSanitizeShadowDOM", fragment, null);
              while (shadowNode = shadowIterator.nextNode()) {
                _executeHook("uponSanitizeShadowNode", shadowNode, null);
                if (_sanitizeElements(shadowNode)) {
                  continue;
                }
                if (shadowNode.content instanceof DocumentFragment) {
                  _sanitizeShadowDOM2(shadowNode.content);
                }
                _sanitizeAttributes(shadowNode);
              }
              _executeHook("afterSanitizeShadowDOM", fragment, null);
            };
            DOMPurify2.sanitize = function(dirty) {
              var cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              var body;
              var importedNode;
              var currentNode;
              var oldNode;
              var returnNode;
              IS_EMPTY_INPUT = !dirty;
              if (IS_EMPTY_INPUT) {
                dirty = "<!-->";
              }
              if (typeof dirty !== "string" && !_isNode(dirty)) {
                if (typeof dirty.toString !== "function") {
                  throw typeErrorCreate("toString is not a function");
                } else {
                  dirty = dirty.toString();
                  if (typeof dirty !== "string") {
                    throw typeErrorCreate("dirty is not a string, aborting");
                  }
                }
              }
              if (!DOMPurify2.isSupported) {
                if (_typeof2(window2.toStaticHTML) === "object" || typeof window2.toStaticHTML === "function") {
                  if (typeof dirty === "string") {
                    return window2.toStaticHTML(dirty);
                  }
                  if (_isNode(dirty)) {
                    return window2.toStaticHTML(dirty.outerHTML);
                  }
                }
                return dirty;
              }
              if (!SET_CONFIG) {
                _parseConfig(cfg);
              }
              DOMPurify2.removed = [];
              if (typeof dirty === "string") {
                IN_PLACE = false;
              }
              if (IN_PLACE) {
                if (dirty.nodeName) {
                  var tagName = transformCaseFunc(dirty.nodeName);
                  if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
                    throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
                  }
                }
              } else if (dirty instanceof Node) {
                body = _initDocument("<!---->");
                importedNode = body.ownerDocument.importNode(dirty, true);
                if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") {
                  body = importedNode;
                } else if (importedNode.nodeName === "HTML") {
                  body = importedNode;
                } else {
                  body.appendChild(importedNode);
                }
              } else {
                if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
                dirty.indexOf("<") === -1) {
                  return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
                }
                body = _initDocument(dirty);
                if (!body) {
                  return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
                }
              }
              if (body && FORCE_BODY) {
                _forceRemove(body.firstChild);
              }
              var nodeIterator = _createIterator(IN_PLACE ? dirty : body);
              while (currentNode = nodeIterator.nextNode()) {
                if (currentNode.nodeType === 3 && currentNode === oldNode) {
                  continue;
                }
                if (_sanitizeElements(currentNode)) {
                  continue;
                }
                if (currentNode.content instanceof DocumentFragment) {
                  _sanitizeShadowDOM(currentNode.content);
                }
                _sanitizeAttributes(currentNode);
                oldNode = currentNode;
              }
              oldNode = null;
              if (IN_PLACE) {
                return dirty;
              }
              if (RETURN_DOM) {
                if (RETURN_DOM_FRAGMENT) {
                  returnNode = createDocumentFragment.call(body.ownerDocument);
                  while (body.firstChild) {
                    returnNode.appendChild(body.firstChild);
                  }
                } else {
                  returnNode = body;
                }
                if (ALLOWED_ATTR.shadowroot) {
                  returnNode = importNode.call(originalDocument, returnNode, true);
                }
                return returnNode;
              }
              var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
              if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
                serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
              }
              if (SAFE_FOR_TEMPLATES) {
                serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, " ");
                serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, " ");
              }
              return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
            };
            DOMPurify2.setConfig = function(cfg) {
              _parseConfig(cfg);
              SET_CONFIG = true;
            };
            DOMPurify2.clearConfig = function() {
              CONFIG = null;
              SET_CONFIG = false;
            };
            DOMPurify2.isValidAttribute = function(tag, attr, value) {
              if (!CONFIG) {
                _parseConfig({});
              }
              var lcTag = transformCaseFunc(tag);
              var lcName = transformCaseFunc(attr);
              return _isValidAttribute(lcTag, lcName, value);
            };
            DOMPurify2.addHook = function(entryPoint, hookFunction) {
              if (typeof hookFunction !== "function") {
                return;
              }
              hooks[entryPoint] = hooks[entryPoint] || [];
              arrayPush(hooks[entryPoint], hookFunction);
            };
            DOMPurify2.removeHook = function(entryPoint) {
              if (hooks[entryPoint]) {
                return arrayPop(hooks[entryPoint]);
              }
            };
            DOMPurify2.removeHooks = function(entryPoint) {
              if (hooks[entryPoint]) {
                hooks[entryPoint] = [];
              }
            };
            DOMPurify2.removeAllHooks = function() {
              hooks = {};
            };
            return DOMPurify2;
          }
          var purify2 = createDOMPurify();
          return purify2;
        });
      })(purify);
      var DOMPurify = purify.exports;
      var matchHtmlRegExp = /["'&<>]/;
      var escapeHtml_1 = escapeHtml;
      function escapeHtml(string) {
        var str = "" + string;
        var match2 = matchHtmlRegExp.exec(str);
        if (!match2) {
          return str;
        }
        var escape;
        var html = "";
        var index = 0;
        var lastIndex = 0;
        for (index = match2.index; index < str.length; index++) {
          switch (str.charCodeAt(index)) {
            case 34:
              escape = "&quot;";
              break;
            case 38:
              escape = "&amp;";
              break;
            case 39:
              escape = "&#39;";
              break;
            case 60:
              escape = "&lt;";
              break;
            case 62:
              escape = "&gt;";
              break;
            default:
              continue;
          }
          if (lastIndex !== index) {
            html += str.substring(lastIndex, index);
          }
          lastIndex = index + 1;
          html += escape;
        }
        return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
      }
      exports2.ActionType = void 0;
      (function(ActionType) {
        ActionType["ApiCall"] = "API_CALL";
        ActionType["ApiCallGraphql"] = "API_CALL_GRAPHQL";
        ActionType["Calculation"] = "CALCULATION";
        ActionType["Checklist"] = "CHECKLIST";
        ActionType["ClinicalNote"] = "CLINICAL_NOTE";
        ActionType["Form"] = "FORM";
        ActionType["Message"] = "MESSAGE";
        ActionType["Plugin"] = "PLUGIN";
        ActionType["PushToEmr"] = "PUSH_TO_EMR";
      })(exports2.ActionType || (exports2.ActionType = {}));
      exports2.ActivityAction = void 0;
      (function(ActivityAction) {
        ActivityAction["Activate"] = "ACTIVATE";
        ActivityAction["Added"] = "ADDED";
        ActivityAction["Assigned"] = "ASSIGNED";
        ActivityAction["Complete"] = "COMPLETE";
        ActivityAction["Computed"] = "COMPUTED";
        ActivityAction["Delegated"] = "DELEGATED";
        ActivityAction["Deliver"] = "DELIVER";
        ActivityAction["Discarded"] = "DISCARDED";
        ActivityAction["Expired"] = "EXPIRED";
        ActivityAction["Failed"] = "FAILED";
        ActivityAction["FailedToSend"] = "FAILED_TO_SEND";
        ActivityAction["Generated"] = "GENERATED";
        ActivityAction["IsWaitingOn"] = "IS_WAITING_ON";
        ActivityAction["Postponed"] = "POSTPONED";
        ActivityAction["Processed"] = "PROCESSED";
        ActivityAction["Read"] = "READ";
        ActivityAction["Remind"] = "REMIND";
        ActivityAction["Reported"] = "REPORTED";
        ActivityAction["Scheduled"] = "SCHEDULED";
        ActivityAction["Send"] = "SEND";
        ActivityAction["Skipped"] = "SKIPPED";
        ActivityAction["Stopped"] = "STOPPED";
        ActivityAction["Submitted"] = "SUBMITTED";
      })(exports2.ActivityAction || (exports2.ActivityAction = {}));
      exports2.ActivityObjectType = void 0;
      (function(ActivityObjectType) {
        ActivityObjectType["Action"] = "ACTION";
        ActivityObjectType["ApiCall"] = "API_CALL";
        ActivityObjectType["Calculation"] = "CALCULATION";
        ActivityObjectType["Checklist"] = "CHECKLIST";
        ActivityObjectType["ClinicalNote"] = "CLINICAL_NOTE";
        ActivityObjectType["EmrReport"] = "EMR_REPORT";
        ActivityObjectType["EmrRequest"] = "EMR_REQUEST";
        ActivityObjectType["EvaluatedRule"] = "EVALUATED_RULE";
        ActivityObjectType["Form"] = "FORM";
        ActivityObjectType["Message"] = "MESSAGE";
        ActivityObjectType["Pathway"] = "PATHWAY";
        ActivityObjectType["Patient"] = "PATIENT";
        ActivityObjectType["Plugin"] = "PLUGIN";
        ActivityObjectType["PluginAction"] = "PLUGIN_ACTION";
        ActivityObjectType["Reminder"] = "REMINDER";
        ActivityObjectType["Stakeholder"] = "STAKEHOLDER";
        ActivityObjectType["Step"] = "STEP";
        ActivityObjectType["Track"] = "TRACK";
        ActivityObjectType["User"] = "USER";
      })(exports2.ActivityObjectType || (exports2.ActivityObjectType = {}));
      exports2.ActivityResolution = void 0;
      (function(ActivityResolution) {
        ActivityResolution["Expired"] = "EXPIRED";
        ActivityResolution["Failure"] = "FAILURE";
        ActivityResolution["Success"] = "SUCCESS";
      })(exports2.ActivityResolution || (exports2.ActivityResolution = {}));
      exports2.ActivityStatus = void 0;
      (function(ActivityStatus) {
        ActivityStatus["Active"] = "ACTIVE";
        ActivityStatus["Canceled"] = "CANCELED";
        ActivityStatus["Done"] = "DONE";
        ActivityStatus["Expired"] = "EXPIRED";
        ActivityStatus["Failed"] = "FAILED";
      })(exports2.ActivityStatus || (exports2.ActivityStatus = {}));
      exports2.ActivitySubjectType = void 0;
      (function(ActivitySubjectType) {
        ActivitySubjectType["ApiCall"] = "API_CALL";
        ActivitySubjectType["Awell"] = "AWELL";
        ActivitySubjectType["Plugin"] = "PLUGIN";
        ActivitySubjectType["Stakeholder"] = "STAKEHOLDER";
        ActivitySubjectType["User"] = "USER";
      })(exports2.ActivitySubjectType || (exports2.ActivitySubjectType = {}));
      exports2.AllowedDatesOptions = void 0;
      (function(AllowedDatesOptions) {
        AllowedDatesOptions["All"] = "ALL";
        AllowedDatesOptions["Future"] = "FUTURE";
        AllowedDatesOptions["Past"] = "PAST";
      })(exports2.AllowedDatesOptions || (exports2.AllowedDatesOptions = {}));
      exports2.ApiCallRequestMethod = void 0;
      (function(ApiCallRequestMethod) {
        ApiCallRequestMethod["Get"] = "GET";
        ApiCallRequestMethod["Post"] = "POST";
      })(exports2.ApiCallRequestMethod || (exports2.ApiCallRequestMethod = {}));
      exports2.ApiCallStatus = void 0;
      (function(ApiCallStatus) {
        ApiCallStatus["Failed"] = "Failed";
        ApiCallStatus["InProgress"] = "InProgress";
        ApiCallStatus["Pending"] = "Pending";
        ApiCallStatus["PermanentlyFailed"] = "PermanentlyFailed";
        ApiCallStatus["Skipped"] = "Skipped";
        ApiCallStatus["Success"] = "Success";
      })(exports2.ApiCallStatus || (exports2.ApiCallStatus = {}));
      exports2.BooleanOperator = void 0;
      (function(BooleanOperator) {
        BooleanOperator["And"] = "AND";
        BooleanOperator["Or"] = "OR";
      })(exports2.BooleanOperator || (exports2.BooleanOperator = {}));
      exports2.ConditionOperandType = void 0;
      (function(ConditionOperandType) {
        ConditionOperandType["Boolean"] = "BOOLEAN";
        ConditionOperandType["DataPoint"] = "DATA_POINT";
        ConditionOperandType["DataSource"] = "DATA_SOURCE";
        ConditionOperandType["Number"] = "NUMBER";
        ConditionOperandType["NumbersArray"] = "NUMBERS_ARRAY";
        ConditionOperandType["String"] = "STRING";
        ConditionOperandType["StringsArray"] = "STRINGS_ARRAY";
      })(exports2.ConditionOperandType || (exports2.ConditionOperandType = {}));
      exports2.ConditionOperator = void 0;
      (function(ConditionOperator) {
        ConditionOperator["Contains"] = "CONTAINS";
        ConditionOperator["DoesNotContain"] = "DOES_NOT_CONTAIN";
        ConditionOperator["IsAnyOf"] = "IS_ANY_OF";
        ConditionOperator["IsEmpty"] = "IS_EMPTY";
        ConditionOperator["IsEqualTo"] = "IS_EQUAL_TO";
        ConditionOperator["IsGreaterThan"] = "IS_GREATER_THAN";
        ConditionOperator["IsGreaterThanOrEqualTo"] = "IS_GREATER_THAN_OR_EQUAL_TO";
        ConditionOperator["IsInRange"] = "IS_IN_RANGE";
        ConditionOperator["IsLessThan"] = "IS_LESS_THAN";
        ConditionOperator["IsLessThanOrEqualTo"] = "IS_LESS_THAN_OR_EQUAL_TO";
        ConditionOperator["IsNoneOf"] = "IS_NONE_OF";
        ConditionOperator["IsNotEmpty"] = "IS_NOT_EMPTY";
        ConditionOperator["IsNotEqualTo"] = "IS_NOT_EQUAL_TO";
        ConditionOperator["IsNotTrue"] = "IS_NOT_TRUE";
        ConditionOperator["IsToday"] = "IS_TODAY";
        ConditionOperator["IsTrue"] = "IS_TRUE";
      })(exports2.ConditionOperator || (exports2.ConditionOperator = {}));
      exports2.DataPointSourceType = void 0;
      (function(DataPointSourceType) {
        DataPointSourceType["ApiCall"] = "API_CALL";
        DataPointSourceType["ApiCallStatus"] = "API_CALL_STATUS";
        DataPointSourceType["Calculation"] = "CALCULATION";
        DataPointSourceType["DataPoint"] = "DATA_POINT";
        DataPointSourceType["ExtensionAction"] = "EXTENSION_ACTION";
        DataPointSourceType["ExtensionWebhook"] = "EXTENSION_WEBHOOK";
        DataPointSourceType["Form"] = "FORM";
        DataPointSourceType["Pathway"] = "PATHWAY";
        DataPointSourceType["PatientIdentifier"] = "PATIENT_IDENTIFIER";
        DataPointSourceType["PatientProfile"] = "PATIENT_PROFILE";
        DataPointSourceType["Step"] = "STEP";
        DataPointSourceType["Track"] = "TRACK";
      })(exports2.DataPointSourceType || (exports2.DataPointSourceType = {}));
      exports2.DataPointValueType = void 0;
      (function(DataPointValueType) {
        DataPointValueType["Boolean"] = "BOOLEAN";
        DataPointValueType["Date"] = "DATE";
        DataPointValueType["Json"] = "JSON";
        DataPointValueType["Number"] = "NUMBER";
        DataPointValueType["NumbersArray"] = "NUMBERS_ARRAY";
        DataPointValueType["String"] = "STRING";
        DataPointValueType["StringsArray"] = "STRINGS_ARRAY";
        DataPointValueType["Telephone"] = "TELEPHONE";
      })(exports2.DataPointValueType || (exports2.DataPointValueType = {}));
      exports2.ElementStatus = void 0;
      (function(ElementStatus) {
        ElementStatus["Active"] = "ACTIVE";
        ElementStatus["Discarded"] = "DISCARDED";
        ElementStatus["Done"] = "DONE";
        ElementStatus["Postponed"] = "POSTPONED";
        ElementStatus["Scheduled"] = "SCHEDULED";
        ElementStatus["Stopped"] = "STOPPED";
      })(exports2.ElementStatus || (exports2.ElementStatus = {}));
      exports2.ElementType = void 0;
      (function(ElementType) {
        ElementType["Action"] = "ACTION";
        ElementType["Pathway"] = "PATHWAY";
        ElementType["Step"] = "STEP";
        ElementType["Track"] = "TRACK";
        ElementType["Trigger"] = "TRIGGER";
      })(exports2.ElementType || (exports2.ElementType = {}));
      exports2.ExtensionActionFieldType = void 0;
      (function(ExtensionActionFieldType) {
        ExtensionActionFieldType["Boolean"] = "BOOLEAN";
        ExtensionActionFieldType["Date"] = "DATE";
        ExtensionActionFieldType["Html"] = "HTML";
        ExtensionActionFieldType["Json"] = "JSON";
        ExtensionActionFieldType["Numeric"] = "NUMERIC";
        ExtensionActionFieldType["NumericArray"] = "NUMERIC_ARRAY";
        ExtensionActionFieldType["String"] = "STRING";
        ExtensionActionFieldType["StringArray"] = "STRING_ARRAY";
        ExtensionActionFieldType["Text"] = "TEXT";
      })(exports2.ExtensionActionFieldType || (exports2.ExtensionActionFieldType = {}));
      exports2.FormDisplayMode = void 0;
      (function(FormDisplayMode) {
        FormDisplayMode["Conversational"] = "CONVERSATIONAL";
        FormDisplayMode["Regular"] = "REGULAR";
      })(exports2.FormDisplayMode || (exports2.FormDisplayMode = {}));
      exports2.HostedSessionStakeholderType = void 0;
      (function(HostedSessionStakeholderType) {
        HostedSessionStakeholderType["Patient"] = "PATIENT";
        HostedSessionStakeholderType["Stakeholder"] = "STAKEHOLDER";
      })(exports2.HostedSessionStakeholderType || (exports2.HostedSessionStakeholderType = {}));
      exports2.HostedSessionStatus = void 0;
      (function(HostedSessionStatus) {
        HostedSessionStatus["Active"] = "ACTIVE";
        HostedSessionStatus["Completed"] = "COMPLETED";
        HostedSessionStatus["Expired"] = "EXPIRED";
      })(exports2.HostedSessionStatus || (exports2.HostedSessionStatus = {}));
      exports2.MessageAttachmentType = void 0;
      (function(MessageAttachmentType) {
        MessageAttachmentType["File"] = "FILE";
        MessageAttachmentType["Link"] = "LINK";
        MessageAttachmentType["Video"] = "VIDEO";
      })(exports2.MessageAttachmentType || (exports2.MessageAttachmentType = {}));
      exports2.MessageFormat = void 0;
      (function(MessageFormat) {
        MessageFormat["Html"] = "HTML";
        MessageFormat["Slate"] = "SLATE";
      })(exports2.MessageFormat || (exports2.MessageFormat = {}));
      exports2.PathwayStatus = void 0;
      (function(PathwayStatus) {
        PathwayStatus["Active"] = "active";
        PathwayStatus["Completed"] = "completed";
        PathwayStatus["MissingBaselineInfo"] = "missing_baseline_info";
        PathwayStatus["Starting"] = "starting";
        PathwayStatus["Stopped"] = "stopped";
      })(exports2.PathwayStatus || (exports2.PathwayStatus = {}));
      exports2.QuestionType = void 0;
      (function(QuestionType) {
        QuestionType["Input"] = "INPUT";
        QuestionType["MultipleChoice"] = "MULTIPLE_CHOICE";
        QuestionType["NoInput"] = "NO_INPUT";
      })(exports2.QuestionType || (exports2.QuestionType = {}));
      exports2.Sex = void 0;
      (function(Sex) {
        Sex["Female"] = "FEMALE";
        Sex["Male"] = "MALE";
        Sex["NotKnown"] = "NOT_KNOWN";
      })(exports2.Sex || (exports2.Sex = {}));
      exports2.StakeholderClinicalAppRole = void 0;
      (function(StakeholderClinicalAppRole) {
        StakeholderClinicalAppRole["Caregiver"] = "CAREGIVER";
        StakeholderClinicalAppRole["Patient"] = "PATIENT";
        StakeholderClinicalAppRole["Physician"] = "PHYSICIAN";
      })(exports2.StakeholderClinicalAppRole || (exports2.StakeholderClinicalAppRole = {}));
      exports2.SwimlaneItemCategory = void 0;
      (function(SwimlaneItemCategory) {
        SwimlaneItemCategory["Action"] = "ACTION";
        SwimlaneItemCategory["PathwayEnd"] = "PATHWAY_END";
        SwimlaneItemCategory["PathwayStart"] = "PATHWAY_START";
        SwimlaneItemCategory["Step"] = "STEP";
        SwimlaneItemCategory["Track"] = "TRACK";
        SwimlaneItemCategory["TrackEnd"] = "TRACK_END";
        SwimlaneItemCategory["TrackStart"] = "TRACK_START";
      })(exports2.SwimlaneItemCategory || (exports2.SwimlaneItemCategory = {}));
      exports2.SwimlaneItemType = void 0;
      (function(SwimlaneItemType) {
        SwimlaneItemType["Active"] = "active";
        SwimlaneItemType["Completed"] = "completed";
        SwimlaneItemType["Pending"] = "pending";
        SwimlaneItemType["Possible"] = "possible";
      })(exports2.SwimlaneItemType || (exports2.SwimlaneItemType = {}));
      exports2.UserQuestionType = void 0;
      (function(UserQuestionType) {
        UserQuestionType["Date"] = "DATE";
        UserQuestionType["Description"] = "DESCRIPTION";
        UserQuestionType["LongText"] = "LONG_TEXT";
        UserQuestionType["MultipleChoice"] = "MULTIPLE_CHOICE";
        UserQuestionType["MultipleChoiceGrid"] = "MULTIPLE_CHOICE_GRID";
        UserQuestionType["MultipleSelect"] = "MULTIPLE_SELECT";
        UserQuestionType["Number"] = "NUMBER";
        UserQuestionType["ShortText"] = "SHORT_TEXT";
        UserQuestionType["Signature"] = "SIGNATURE";
        UserQuestionType["Slider"] = "SLIDER";
        UserQuestionType["Telephone"] = "TELEPHONE";
        UserQuestionType["YesNo"] = "YES_NO";
      })(exports2.UserQuestionType || (exports2.UserQuestionType = {}));
      var isText = function(node) {
        return node.text;
      };
      var isElement = function(node) {
        return node.children;
      };
      var generateClassAttribute = function(node) {
        var classes2 = Object.entries(node).map(function(_a) {
          var prop = _a[0];
          switch (prop) {
            case "bold":
            case "italic":
            case "underline":
            case "strikethrough":
              return richTextClasses[prop];
            default:
              return void 0;
          }
        }).filter(function(c) {
          return c;
        });
        if (classes2.length > 0) {
          return 'class="'.concat(classes2.join(" "), '"');
        }
        return void 0;
      };
      var serializeNode = function(node) {
        if (isText(node)) {
          var classAttribute = generateClassAttribute(node);
          if (classAttribute === void 0) {
            return escapeHtml_1(node.text);
          } else {
            return "<span ".concat(classAttribute, ">").concat(escapeHtml_1(node.text), "</span>");
          }
        } else if (isElement(node)) {
          var type = node.type || "div";
          if (node.type === "a") {
            return "<".concat(type, ' href="').concat(node === null || node === void 0 ? void 0 : node.url, '" target="_blank" rel="noopener noreferrer">').concat(serializeHtml(node.children), "</").concat(type, ">");
          }
          return "<".concat(type, ">").concat(serializeHtml(node.children), "</").concat(type, ">");
        }
        return "";
      };
      var serializeHtml = function(nodes) {
        var nodesArray = Array.isArray(nodes) ? nodes : JSON.parse(nodes);
        return nodesArray.map(function(node) {
          return serializeNode(node);
        }).join("");
      };
      var generatePureHtml = function(content) {
        var isSlate = true;
        try {
          Array.isArray(content) ? content : JSON.parse(content);
        } catch (e) {
          isSlate = false;
        }
        DOMPurify.addHook("uponSanitizeElement", function(node, data) {
          var _a, _b;
          if (data.tagName === "iframe") {
            var src = (_a = node.getAttribute("src")) !== null && _a !== void 0 ? _a : "";
            var isYoutube = src.startsWith("https://www.youtube.com/embed/");
            var isVimeo = src.startsWith("https://player.vimeo.com/video/");
            if (!isYoutube && !isVimeo) {
              return (_b = node.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(node);
            }
          }
        });
        var purifiedMessage = purify.exports.sanitize(isSlate ? serializeHtml(content) : content, {
          ADD_TAGS: ["iframe"],
          ADD_ATTR: [
            "target",
            "allow",
            "allowfullscreen",
            "frameborder",
            "scrolling"
          ],
          ALLOW_UNKNOWN_PROTOCOLS: true
        });
        return purifiedMessage;
      };
      var Description = function(_a) {
        var content = _a.content;
        var cleanContent = generatePureHtml(content);
        return jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$r.awell_description_wrapper, " ").concat(classes$r.content) }, { children: jsxRuntime.exports.jsx(RichTextViewer, { content: cleanContent }) }));
      };
      var classes$q = { "hugeHeadline": "awell__typography_hugeHeadline", "bigHeadline": "awell__typography_bigHeadline", "headline": "awell__typography_headline", "subHeadline": "awell__typography_subHeadline", "smallHeadline": "awell__typography_smallHeadline", "tinyHeadline": "awell__typography_tinyHeadline", "tinyHeadlineCaps": "awell__typography_tinyHeadlineCaps", "discreetHeadline": "awell__typography_discreetHeadline", "undersizeHeadline": "awell__typography_undersizeHeadline", "textRegular": "awell__typography_textRegular", "textMedium": "awell__typography_textMedium", "textSmall": "awell__typography_textSmall", "textSmallMedium": "awell__typography_textSmallMedium", "textSmallBold": "awell__typography_textSmallBold", "textTinyHint": "awell__typography_textTinyHint", "inputPlaceholder": "awell__typography_inputPlaceholder", "link": "awell__typography_link", "linkBold": "awell__typography_linkBold" };
      var HeadingMain = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "hugeHeadline" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h1", __assign({ style, className: classes$q[variant] }, { children }));
      };
      HeadingMain.displayName = "HeadingMain";
      var HeadingSecondary = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "bigHeadline" : _b, color = _a.color, children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h2", __assign({ style, className: classes$q[variant] }, { children }));
      };
      HeadingSecondary.displayName = "HeadingSecondary";
      var HeadingTertiary = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "headline" : _b, color = _a.color, children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h3", __assign({ style, className: classes$q[variant] }, { children }));
      };
      HeadingTertiary.displayName = "HeadingTertiary";
      var SubHeading = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "subHeadline" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h4", __assign({ style, className: classes$q[variant] }, { children }));
      };
      SubHeading.displayName = "SubHeading";
      var Heading5 = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "smallHeadline" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h5", __assign({ style, className: classes$q[variant] }, { children }));
      };
      Heading5.displayName = "Heading5";
      var Heading6 = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "tinyHeadline" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("h6", __assign({ style, className: classes$q[variant] }, { children }));
      };
      Heading6.displayName = "Heading6";
      var Text = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "textRegular" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("p", __assign({ style, className: classes$q[variant] }, { children }));
      };
      Text.displayName = "Text";
      var InlineText = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "textRegular" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("span", __assign({ style, className: classes$q[variant] }, { children }));
      };
      InlineText.displayName = "InlineText";
      var ExternalLink = function(_a) {
        var color = _a.color, href = _a.href, rel = _a.rel, children = _a.children;
        __rest(_a, ["color", "href", "rel", "children"]);
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("a", __assign({ style, className: classes$q.link, href, rel }, { children }));
      };
      ExternalLink.displayName = "ExternalLink";
      var InnerText = function(_a) {
        var _b = _a.variant, variant = _b === void 0 ? "textRegular" : _b, color = _a.color;
        _a.spacing;
        var children = _a.children;
        var style = { "--awell-typography-color": color };
        return jsxRuntime.exports.jsx("span", __assign({ style, className: classes$q[variant] }, { children }));
      };
      InnerText.displayName = "InnerText";
      var classes$p = { "awell_input_field_wrapper": "awell__inputField_awell_input_field_wrapper", "input_wrapper_with_error": "awell__inputField_input_wrapper_with_error", "has_error": "awell__inputField_has_error", "error_message": "awell__inputField_error_message", "error_icon": "awell__inputField_error_icon", "awell_input_field": "awell__inputField_awell_input_field" };
      var InputField = function(_a) {
        var onChange = _a.onChange, id = _a.id, label = _a.label, type = _a.type, mandatory = _a.mandatory, props = __rest(_a, ["onChange", "id", "label", "type", "mandatory"]);
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$p.awell_input_field_wrapper }, { children: [jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label, mandatory }), jsxRuntime.exports.jsx("input", __assign({}, props, { type, id, "data-1p-ignore": true, className: classes$p.awell_input_field, onChange, "data-testid": "input-".concat(id), dir: "ltr" }))] }));
      };
      var classes$o = { "awell_logo": "awell__logo_awell_logo" };
      var awellLogo = '<svg width="190" height="50.4" xmlns="http://www.w3.org/2000/svg">\n\n <g>\n  <title>background</title>\n  <rect fill="none" id="canvas_background" height="402" width="582" y="-1" x="-1"/>\n </g>\n <g>\n  <title>Layer 1</title>\n  <path id="svg_1" d="m169.7,0l6.8,0l0,38.7l-6.8,0l0,-38.7zm13.3,0l6.8,0l0,38.7l-6.8,0l0,-38.7zm-38.5,24.5l12.4,-5.2c-0.6,-0.7 -1.4,-1.3 -2.3,-1.7c-0.9,-0.4 -1.9,-0.6 -3,-0.6c-1,0 -1.9,0.2 -2.8,0.6c-0.9,0.4 -1.6,0.9 -2.2,1.6c-0.6,0.7 -1.1,1.5 -1.5,2.4c-0.4,0.8 -0.6,1.8 -0.6,2.9m-6.4,0.4c0,-1.9 0.4,-3.7 1.1,-5.4s1.7,-3.1 2.9,-4.4s2.7,-2.2 4.3,-3c1.6,-0.7 3.4,-1.1 5.3,-1.1c1.6,0 3.1,0.2 4.5,0.7s2.7,1.2 3.9,2.1c1.1,0.9 2.1,2.1 2.9,3.5c0.8,1.4 1.4,2.9 1.6,4.7l-18.6,7.8c0.7,0.9 1.5,1.6 2.5,2.1c0.9,0.5 2,0.8 3.2,0.8c1.1,0 2.2,-0.2 3.2,-0.7c1,-0.5 1.8,-1.3 2.4,-2.3l7.2,0c-0.8,2.7 -2.3,4.9 -4.5,6.5c-2.2,1.7 -5,2.5 -8.3,2.5c-1.9,0 -3.6,-0.4 -5.3,-1.1c-1.6,-0.7 -3.1,-1.7 -4.3,-2.9c-1.2,-1.2 -2.2,-2.7 -2.9,-4.4c-0.8,-1.7 -1.1,-3.5 -1.1,-5.4m-44.9,2l0,-15.2l6.8,0l0,15.4c0,0.4 0.1,0.9 0.2,1.4c0.1,0.6 0.3,1.1 0.7,1.6c0.3,0.5 0.8,1 1.5,1.4c0.7,0.4 1.5,0.6 2.6,0.6c1.5,0 2.8,-0.5 3.7,-1.4c0.9,-0.9 1.4,-2.1 1.4,-3.6l0,-15.4l6.8,0l0,15.4c0,0.4 0.1,0.9 0.2,1.4s0.3,1.1 0.7,1.6c0.3,0.5 0.8,1 1.5,1.4c0.7,0.4 1.5,0.6 2.7,0.6c1.5,0 2.7,-0.5 3.7,-1.4c1,-0.9 1.4,-2.1 1.4,-3.6l0,-15.4l6.8,0l0,15.2c0,1.7 -0.3,3.2 -0.9,4.7c-0.6,1.4 -1.4,2.7 -2.4,3.8c-1,1.1 -2.3,1.9 -3.8,2.5c-1.5,0.6 -3.1,0.9 -4.9,0.9c-1.8,0 -3.4,-0.3 -4.8,-1s-2.6,-1.6 -3.6,-2.7c-1,1.2 -2.2,2.1 -3.6,2.7c-1.4,0.7 -3,1 -4.8,1c-1.8,0 -3.5,-0.3 -4.9,-0.9c-1.4,-0.6 -2.7,-1.4 -3.7,-2.4s-1.8,-2.3 -2.3,-3.7c-0.7,-1.6 -1,-3.2 -1,-4.9m-25.4,-2c0,1 0.2,2 0.5,2.9c0.4,0.9 0.8,1.7 1.5,2.4c0.6,0.7 1.3,1.2 2.2,1.6c0.8,0.4 1.7,0.6 2.6,0.6s1.8,-0.2 2.6,-0.6c0.8,-0.4 1.6,-0.9 2.2,-1.6c0.6,-0.7 1.1,-1.5 1.5,-2.4c0.4,-0.9 0.5,-1.9 0.5,-2.9s-0.2,-2 -0.5,-3c-0.4,-0.9 -0.8,-1.7 -1.5,-2.4c-0.6,-0.7 -1.3,-1.2 -2.2,-1.6c-0.8,-0.4 -1.7,-0.6 -2.6,-0.6c-0.9,0 -1.8,0.2 -2.6,0.6c-0.8,0.4 -1.5,0.9 -2.2,1.6c-0.6,0.7 -1.1,1.5 -1.5,2.4c-0.3,0.9 -0.5,1.9 -0.5,3m-6.8,0c0,-1.9 0.3,-3.7 1,-5.4c0.7,-1.7 1.6,-3.1 2.8,-4.4c1.2,-1.2 2.6,-2.2 4.3,-2.9c1.7,-0.7 3.5,-1.1 5.5,-1.1s3.8,0.4 5.5,1.1c1.7,0.7 3.1,1.7 4.3,3c1.2,1.2 2.1,2.7 2.8,4.4c0.7,1.7 1,3.5 1,5.4l0,13.8l-6.4,0l0,-3.5c-1,1.1 -2.2,1.9 -3.6,2.5c-1.4,0.6 -2.9,0.8 -4.5,0.8c-1.7,0 -3.4,-0.4 -4.9,-1.1c-1.5,-0.7 -2.9,-1.7 -4,-3c-1.2,-1.2 -2.1,-2.7 -2.7,-4.4c-0.8,-1.5 -1.1,-3.3 -1.1,-5.2" fill="#004ac2"/>\n  <path id="svg_2" fill="#004ac2" d="m7.3,21.7c1.4,-7.4 7.2,-13.2 14.6,-14.6l0,-6.8c-11.1,1.4 -20,10.2 -21.6,21.4l7,0zm21.4,-14.6c8.5,1.6 14.9,9 14.9,18c0,3.8 -1.2,7.4 -3.2,10.3l4.9,4.9c3.2,-4.2 5,-9.4 5,-15.1c0.1,-12.7 -9.3,-23.2 -21.6,-24.9l0,6.8zm7,33.1c-2.9,2 -6.5,3.2 -10.3,3.2c-9,0 -16.4,-6.4 -18,-14.9l-7,0c1.6,12.4 12.2,21.9 25,21.9c5.8,0 11.1,-2 15.4,-5.2l-5.1,-5z"/>\n </g>\n</svg>';
      var Logo = function(_a) {
        var _b = _a.companyName, companyName = _b === void 0 ? "Awell Health" : _b, _c = _a.logo, logo = _c === void 0 ? awellLogo : _c;
        return logo && typeof logo !== "string" ? jsxRuntime.exports.jsx("span", __assign({ id: "awell__header_logo" }, { children: logo })) : jsxRuntime.exports.jsx("img", { className: classes$o.awell_logo, id: "awell__header_logo", alt: companyName, src: logo });
      };
      var classes$n = { "awell_long_text_field_wrapper": "awell__longTextField_awell_long_text_field_wrapper", "awell_long_text_field": "awell__longTextField_awell_long_text_field" };
      var LongTextField = function(_a) {
        var onChange = _a.onChange, id = _a.id, label = _a.label, mandatory = _a.mandatory, props = __rest(_a, ["onChange", "id", "label", "mandatory"]);
        var DEFAULT_ROWS = 4;
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$n.awell_long_text_field_wrapper }, { children: [jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label, mandatory }), jsxRuntime.exports.jsx("textarea", __assign({}, props, { id, rows: DEFAULT_ROWS, className: classes$n.awell_long_text_field, onChange, dir: "ltr" }))] }));
      };
      var classes$m = { "awell_message_container": "awell__messageAttachment_awell_message_container", "awell_message_link_button": "awell__messageAttachment_awell_message_link_button", "awell_message_name_container": "awell__messageAttachment_awell_message_name_container" };
      var MessageAttachment = function(_a) {
        var url = _a.url, name = _a.name, label = _a.label, children = _a.children;
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$m.awell_message_container }, { children: [jsxRuntime.exports.jsxs("div", __assign({ className: classes$m.awell_message_name_container }, { children: [children, name] })), jsxRuntime.exports.jsx("a", __assign({ className: classes$m.awell_message_link_button, href: url, target: "_blank", rel: "noopener noreferrer" }, { children: label }))] }));
      };
      function CheckIcon({
        title,
        titleId,
        ...props
      }, svgRef) {
        return React__namespace.createElement("svg", _extends$e(
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            strokeWidth: 1.5,
            stroke: "currentColor",
            "aria-hidden": "true",
            "data-slot": "icon",
            ref: svgRef,
            "aria-labelledby": titleId
          },
          props
        ), title ? React__namespace.createElement(
          "title",
          {
            id: titleId
          },
          title
        ) : null, React__namespace.createElement("path", {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "m4.5 12.75 6 6 9-13.5"
        }));
      }
      const ForwardRef$3 = React__namespace.forwardRef(CheckIcon);
      function ExclamationTriangleIcon({
        title,
        titleId,
        ...props
      }, svgRef) {
        return React__namespace.createElement("svg", _extends$e(
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            strokeWidth: 1.5,
            stroke: "currentColor",
            "aria-hidden": "true",
            "data-slot": "icon",
            ref: svgRef,
            "aria-labelledby": titleId
          },
          props
        ), title ? React__namespace.createElement(
          "title",
          {
            id: titleId
          },
          title
        ) : null, React__namespace.createElement("path", {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z"
        }));
      }
      const ForwardRef$2 = React__namespace.forwardRef(ExclamationTriangleIcon);
      function MinusCircleIcon({
        title,
        titleId,
        ...props
      }, svgRef) {
        return React__namespace.createElement("svg", _extends$e(
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            strokeWidth: 1.5,
            stroke: "currentColor",
            "aria-hidden": "true",
            "data-slot": "icon",
            ref: svgRef,
            "aria-labelledby": titleId
          },
          props
        ), title ? React__namespace.createElement(
          "title",
          {
            id: titleId
          },
          title
        ) : null, React__namespace.createElement("path", {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "M15 12H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"
        }));
      }
      const ForwardRef$1 = React__namespace.forwardRef(MinusCircleIcon);
      function XMarkIcon({
        title,
        titleId,
        ...props
      }, svgRef) {
        return React__namespace.createElement("svg", _extends$e(
          {
            xmlns: "http://www.w3.org/2000/svg",
            fill: "none",
            viewBox: "0 0 24 24",
            strokeWidth: 1.5,
            stroke: "currentColor",
            "aria-hidden": "true",
            "data-slot": "icon",
            ref: svgRef,
            "aria-labelledby": titleId
          },
          props
        ), title ? React__namespace.createElement(
          "title",
          {
            id: titleId
          },
          title
        ) : null, React__namespace.createElement("path", {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          d: "M6 18 18 6M6 6l12 12"
        }));
      }
      const ForwardRef = React__namespace.forwardRef(XMarkIcon);
      var classes$l = { "dialog": "awell__Modal_dialog", "screen_overlay": "awell__Modal_screen_overlay", "modal_overlay": "awell__Modal_modal_overlay", "modal_wrapper": "awell__Modal_modal_wrapper", "dialog_panel": "awell__Modal_dialog_panel", "close_button_wrapper": "awell__Modal_close_button_wrapper", "close_button": "awell__Modal_close_button", "close_icon": "awell__Modal_close_icon", "sr_only": "awell__Modal_sr_only", "modal_body": "awell__Modal_modal_body", "icon_wrapper": "awell__Modal_icon_wrapper", "warning": "awell__Modal_warning", "success": "awell__Modal_success", "modal_icon": "awell__Modal_modal_icon", "modal_content": "awell__Modal_modal_content", "modal_title": "awell__Modal_modal_title", "modal_content_text": "awell__Modal_modal_content_text", "modal_actions": "awell__Modal_modal_actions" };
      var Modal = function(_a) {
        var isOpen = _a.isOpen, title = _a.title, description = _a.description, onCloseModal = _a.onCloseModal, icon = _a.icon, buttons = _a.buttons;
        var _b = React.useState(window.innerWidth < 640), isMobile = _b[0], setIsMobile = _b[1];
        var updateMedia = function() {
          setIsMobile(window.innerWidth < 640);
        };
        React.useEffect(function() {
          window.addEventListener("resize", updateMedia);
          return function() {
            return window.removeEventListener("resize", updateMedia);
          };
        });
        if (isOpen) {
          return jsxRuntime.exports.jsxs("div", __assign({ className: classes$l.dialog }, { children: [jsxRuntime.exports.jsx("div", { className: classes$l.screen_overlay }), jsxRuntime.exports.jsx("div", __assign({ className: classes$l.modal_overlay }, { children: jsxRuntime.exports.jsx("div", __assign({ className: classes$l.modal_wrapper }, { children: jsxRuntime.exports.jsxs("div", __assign({ className: classes$l.dialog_panel }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$l.close_button_wrapper }, { children: jsxRuntime.exports.jsxs("button", __assign({ type: "button", className: classes$l.close_button, onClick: onCloseModal }, { children: [jsxRuntime.exports.jsx("span", __assign({ className: classes$l.sr_only }, { children: "Close" })), jsxRuntime.exports.jsx(ForwardRef, { className: classes$l.close_icon, "aria-hidden": "true" })] })) })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$l.modal_body }, { children: [icon && jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$l.icon_wrapper, " ").concat(classes$l[icon]) }, { children: [icon === "warning" && jsxRuntime.exports.jsx(ForwardRef$2, { className: "".concat(classes$l.modal_icon, " ").concat(classes$l.warning), "aria-hidden": "true" }), icon === "success" && jsxRuntime.exports.jsx(ForwardRef$3, { className: "".concat(classes$l.modal_icon, " ").concat(classes$l.success), "aria-hidden": "true" })] })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$l.modal_content }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$l.modal_title }, { children: title })), jsxRuntime.exports.jsx("div", __assign({ className: classes$l.modal_content_text }, { children: description }))] }))] })), jsxRuntime.exports.jsx("div", __assign({ className: classes$l.modal_actions }, { children: buttons.map(function(button, index) {
            return jsxRuntime.exports.jsx(React__default["default"].Fragment, { children: React.cloneElement(button, { fullWidth: isMobile }) }, index);
          }) }))] })) })) }))] }));
        }
        return null;
      };
      var classes$k = { "progressBar": "awell__progressIndicator_progressBar", "progressBar_completed": "awell__progressIndicator_progressBar_completed" };
      var ProgressIndicator = function(_a) {
        var percentageCompleted = _a.percentageCompleted, _b = _a.showPercentage, showPercentage = _b === void 0 ? false : _b;
        var percentageCompletedNormalized = percentageCompleted < 0 ? 0 : percentageCompleted > 100 ? 100 : percentageCompleted;
        var style = {
          "--awell-progress-bar-width": "".concat(percentageCompletedNormalized + "%")
        };
        return jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$k.progressBar, " awell_progress_bar"), id: "awell__form_progress" }, { children: percentageCompletedNormalized !== 0 && jsxRuntime.exports.jsx("div", __assign({ className: classes$k.progressBar_completed, style }, { children: showPercentage && jsxRuntime.exports.jsxs("span", __assign({ id: "awell_progress_percentage" }, { children: [percentageCompletedNormalized, "%"] })) })) }));
      };
      var classes$j = { "input_wrapper": "awell__radioButton_input_wrapper", "radio_wrapper": "awell__radioButton_radio_wrapper", "label_wrapper": "awell__radioButton_label_wrapper" };
      var RadioButton = function(_a) {
        var onChange = _a.onChange, label = _a.label, name = _a.name, customWrapperClass = _a.customWrapperClass, props = __rest(_a, ["onChange", "label", "name", "customWrapperClass"]);
        return jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$j.input_wrapper, " ").concat(customWrapperClass) }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$j.radio_wrapper }, { children: jsxRuntime.exports.jsx("input", __assign({}, props, { name, type: "radio", onChange })) })), jsxRuntime.exports.jsx("div", __assign({ className: classes$j.label_wrapper }, { children: jsxRuntime.exports.jsx("label", __assign({ htmlFor: props.id }, { children: label })) }))] }));
      };
      var classes$i = { "input_container": "awell__rangeInput_input_container", "touch_tooltip_wrapper": "awell__rangeInput_touch_tooltip_wrapper", "with_value_tooltip": "awell__rangeInput_with_value_tooltip", "tooltip_touched": "awell__rangeInput_tooltip_touched", "awell_range_input_wrapper": "awell__rangeInput_awell_range_input_wrapper", "with_marks": "awell__rangeInput_with_marks", "awell_range_input": "awell__rangeInput_awell_range_input", "tooltip": "awell__rangeInput_tooltip", "min_max_wrapper": "awell__rangeInput_min_max_wrapper", "min_max_data_list": "awell__rangeInput_min_max_data_list", "min": "awell__rangeInput_min", "max": "awell__rangeInput_max", "hideThumb": "awell__rangeInput_hideThumb", "showThumb": "awell__rangeInput_showThumb" };
      var lodash = { exports: {} };
      (function(module2, exports3) {
        (function() {
          var undefined$1;
          var VERSION = "4.17.21";
          var LARGE_ARRAY_SIZE = 200;
          var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT2 = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
          var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
          var MAX_MEMOIZE_SIZE = 500;
          var PLACEHOLDER = "__lodash_placeholder__";
          var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
          var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
          var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
          var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
          var HOT_COUNT = 800, HOT_SPAN = 16;
          var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
          var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
          var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
          var wrapFlags = [
            ["ary", WRAP_ARY_FLAG],
            ["bind", WRAP_BIND_FLAG],
            ["bindKey", WRAP_BIND_KEY_FLAG],
            ["curry", WRAP_CURRY_FLAG],
            ["curryRight", WRAP_CURRY_RIGHT_FLAG],
            ["flip", WRAP_FLIP_FLAG],
            ["partial", WRAP_PARTIAL_FLAG],
            ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
            ["rearg", WRAP_REARG_FLAG]
          ];
          var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
          var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
          var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
          var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
          var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
          var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar2.source);
          var reTrimStart = /^\s+/;
          var reWhitespace = /\s/;
          var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
          var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
          var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
          var reEscapeChar = /\\(\\)?/g;
          var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
          var reFlags = /\w*$/;
          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
          var reIsBinary = /^0b[01]+$/i;
          var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
          var reIsOctal = /^0o[0-7]+$/i;
          var reIsUint = /^(?:0|[1-9]\d*)$/;
          var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
          var reNoMatch = /($^)/;
          var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
          var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
          var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
          var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
          var reApos = RegExp(rsApos, "g");
          var reComboMark = RegExp(rsCombo, "g");
          var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
          var reUnicodeWord = RegExp([
            rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
            rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
            rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
            rsUpper + "+" + rsOptContrUpper,
            rsOrdUpper,
            rsOrdLower,
            rsDigits,
            rsEmoji
          ].join("|"), "g");
          var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
          var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
          var contextProps = [
            "Array",
            "Buffer",
            "DataView",
            "Date",
            "Error",
            "Float32Array",
            "Float64Array",
            "Function",
            "Int8Array",
            "Int16Array",
            "Int32Array",
            "Map",
            "Math",
            "Object",
            "Promise",
            "RegExp",
            "Set",
            "String",
            "Symbol",
            "TypeError",
            "Uint8Array",
            "Uint8ClampedArray",
            "Uint16Array",
            "Uint32Array",
            "WeakMap",
            "_",
            "clearTimeout",
            "isFinite",
            "parseInt",
            "setTimeout"
          ];
          var templateCounter = -1;
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag2] = cloneableTags[weakMapTag] = false;
          var deburredLetters = {
            // Latin-1 Supplement block.
            "À": "A",
            "Á": "A",
            "Â": "A",
            "Ã": "A",
            "Ä": "A",
            "Å": "A",
            "à": "a",
            "á": "a",
            "â": "a",
            "ã": "a",
            "ä": "a",
            "å": "a",
            "Ç": "C",
            "ç": "c",
            "Ð": "D",
            "ð": "d",
            "È": "E",
            "É": "E",
            "Ê": "E",
            "Ë": "E",
            "è": "e",
            "é": "e",
            "ê": "e",
            "ë": "e",
            "Ì": "I",
            "Í": "I",
            "Î": "I",
            "Ï": "I",
            "ì": "i",
            "í": "i",
            "î": "i",
            "ï": "i",
            "Ñ": "N",
            "ñ": "n",
            "Ò": "O",
            "Ó": "O",
            "Ô": "O",
            "Õ": "O",
            "Ö": "O",
            "Ø": "O",
            "ò": "o",
            "ó": "o",
            "ô": "o",
            "õ": "o",
            "ö": "o",
            "ø": "o",
            "Ù": "U",
            "Ú": "U",
            "Û": "U",
            "Ü": "U",
            "ù": "u",
            "ú": "u",
            "û": "u",
            "ü": "u",
            "Ý": "Y",
            "ý": "y",
            "ÿ": "y",
            "Æ": "Ae",
            "æ": "ae",
            "Þ": "Th",
            "þ": "th",
            "ß": "ss",
            // Latin Extended-A block.
            "Ā": "A",
            "Ă": "A",
            "Ą": "A",
            "ā": "a",
            "ă": "a",
            "ą": "a",
            "Ć": "C",
            "Ĉ": "C",
            "Ċ": "C",
            "Č": "C",
            "ć": "c",
            "ĉ": "c",
            "ċ": "c",
            "č": "c",
            "Ď": "D",
            "Đ": "D",
            "ď": "d",
            "đ": "d",
            "Ē": "E",
            "Ĕ": "E",
            "Ė": "E",
            "Ę": "E",
            "Ě": "E",
            "ē": "e",
            "ĕ": "e",
            "ė": "e",
            "ę": "e",
            "ě": "e",
            "Ĝ": "G",
            "Ğ": "G",
            "Ġ": "G",
            "Ģ": "G",
            "ĝ": "g",
            "ğ": "g",
            "ġ": "g",
            "ģ": "g",
            "Ĥ": "H",
            "Ħ": "H",
            "ĥ": "h",
            "ħ": "h",
            "Ĩ": "I",
            "Ī": "I",
            "Ĭ": "I",
            "Į": "I",
            "İ": "I",
            "ĩ": "i",
            "ī": "i",
            "ĭ": "i",
            "į": "i",
            "ı": "i",
            "Ĵ": "J",
            "ĵ": "j",
            "Ķ": "K",
            "ķ": "k",
            "ĸ": "k",
            "Ĺ": "L",
            "Ļ": "L",
            "Ľ": "L",
            "Ŀ": "L",
            "Ł": "L",
            "ĺ": "l",
            "ļ": "l",
            "ľ": "l",
            "ŀ": "l",
            "ł": "l",
            "Ń": "N",
            "Ņ": "N",
            "Ň": "N",
            "Ŋ": "N",
            "ń": "n",
            "ņ": "n",
            "ň": "n",
            "ŋ": "n",
            "Ō": "O",
            "Ŏ": "O",
            "Ő": "O",
            "ō": "o",
            "ŏ": "o",
            "ő": "o",
            "Ŕ": "R",
            "Ŗ": "R",
            "Ř": "R",
            "ŕ": "r",
            "ŗ": "r",
            "ř": "r",
            "Ś": "S",
            "Ŝ": "S",
            "Ş": "S",
            "Š": "S",
            "ś": "s",
            "ŝ": "s",
            "ş": "s",
            "š": "s",
            "Ţ": "T",
            "Ť": "T",
            "Ŧ": "T",
            "ţ": "t",
            "ť": "t",
            "ŧ": "t",
            "Ũ": "U",
            "Ū": "U",
            "Ŭ": "U",
            "Ů": "U",
            "Ű": "U",
            "Ų": "U",
            "ũ": "u",
            "ū": "u",
            "ŭ": "u",
            "ů": "u",
            "ű": "u",
            "ų": "u",
            "Ŵ": "W",
            "ŵ": "w",
            "Ŷ": "Y",
            "ŷ": "y",
            "Ÿ": "Y",
            "Ź": "Z",
            "Ż": "Z",
            "Ž": "Z",
            "ź": "z",
            "ż": "z",
            "ž": "z",
            "Ĳ": "IJ",
            "ĳ": "ij",
            "Œ": "Oe",
            "œ": "oe",
            "ŉ": "'n",
            "ſ": "s"
          };
          var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
          };
          var htmlUnescapes = {
            "&amp;": "&",
            "&lt;": "<",
            "&gt;": ">",
            "&quot;": '"',
            "&#39;": "'"
          };
          var stringEscapes = {
            "\\": "\\",
            "'": "'",
            "\n": "n",
            "\r": "r",
            "\u2028": "u2028",
            "\u2029": "u2029"
          };
          var freeParseFloat = parseFloat, freeParseInt = parseInt;
          var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
          var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
          var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var freeProcess = moduleExports && freeGlobal2.process;
          var nodeUtil = function() {
            try {
              var types = freeModule && freeModule.require && freeModule.require("util").types;
              if (types) {
                return types;
              }
              return freeProcess && freeProcess.binding && freeProcess.binding("util");
            } catch (e) {
            }
          }();
          var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
          function apply(func, thisArg, args) {
            switch (args.length) {
              case 0:
                return func.call(thisArg);
              case 1:
                return func.call(thisArg, args[0]);
              case 2:
                return func.call(thisArg, args[0], args[1]);
              case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
          }
          function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              var value = array[index];
              setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
          }
          function arrayEach(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }
          function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;
            while (length--) {
              if (iteratee(array[length], length, array) === false) {
                break;
              }
            }
            return array;
          }
          function arrayEvery(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (!predicate(array[index], index, array)) {
                return false;
              }
            }
            return true;
          }
          function arrayFilter(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result[resIndex++] = value;
              }
            }
            return result;
          }
          function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
          }
          function arrayIncludesWith(array, value, comparator) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (comparator(value, array[index])) {
                return true;
              }
            }
            return false;
          }
          function arrayMap(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length, result = Array(length);
            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }
          function arrayPush(array, values) {
            var index = -1, length = values.length, offset = array.length;
            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }
          function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1, length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[++index];
            }
            while (++index < length) {
              accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
          }
          function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }
          function arraySome(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }
          var asciiSize = baseProperty("length");
          function asciiToArray(string) {
            return string.split("");
          }
          function asciiWords(string) {
            return string.match(reAsciiWord) || [];
          }
          function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function(value, key, collection2) {
              if (predicate(value, key, collection2)) {
                result = key;
                return false;
              }
            });
            return result;
          }
          function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
            while (fromRight ? index-- : ++index < length) {
              if (predicate(array[index], index, array)) {
                return index;
              }
            }
            return -1;
          }
          function baseIndexOf(array, value, fromIndex) {
            return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
          }
          function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1, length = array.length;
            while (++index < length) {
              if (comparator(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function baseIsNaN(value) {
            return value !== value;
          }
          function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? baseSum(array, iteratee) / length : NAN;
          }
          function baseProperty(key) {
            return function(object) {
              return object == null ? undefined$1 : object[key];
            };
          }
          function basePropertyOf(object) {
            return function(key) {
              return object == null ? undefined$1 : object[key];
            };
          }
          function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
            eachFunc(collection, function(value, index, collection2) {
              accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
            });
            return accumulator;
          }
          function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }
          function baseSum(array, iteratee) {
            var result, index = -1, length = array.length;
            while (++index < length) {
              var current = iteratee(array[index]);
              if (current !== undefined$1) {
                result = result === undefined$1 ? current : result + current;
              }
            }
            return result;
          }
          function baseTimes(n, iteratee) {
            var index = -1, result = Array(n);
            while (++index < n) {
              result[index] = iteratee(index);
            }
            return result;
          }
          function baseToPairs(object, props) {
            return arrayMap(props, function(key) {
              return [key, object[key]];
            });
          }
          function baseTrim(string) {
            return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
          }
          function baseUnary(func) {
            return function(value) {
              return func(value);
            };
          }
          function baseValues(object, props) {
            return arrayMap(props, function(key) {
              return object[key];
            });
          }
          function cacheHas(cache, key) {
            return cache.has(key);
          }
          function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1, length = strSymbols.length;
            while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
            }
            return index;
          }
          function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;
            while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
            }
            return index;
          }
          function countHolders(array, placeholder) {
            var length = array.length, result = 0;
            while (length--) {
              if (array[length] === placeholder) {
                ++result;
              }
            }
            return result;
          }
          var deburrLetter = basePropertyOf(deburredLetters);
          var escapeHtmlChar = basePropertyOf(htmlEscapes);
          function escapeStringChar(chr) {
            return "\\" + stringEscapes[chr];
          }
          function getValue2(object, key) {
            return object == null ? undefined$1 : object[key];
          }
          function hasUnicode(string) {
            return reHasUnicode.test(string);
          }
          function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
          }
          function iteratorToArray(iterator) {
            var data, result = [];
            while (!(data = iterator.next()).done) {
              result.push(data.value);
            }
            return result;
          }
          function mapToArray(map) {
            var index = -1, result = Array(map.size);
            map.forEach(function(value, key) {
              result[++index] = [key, value];
            });
            return result;
          }
          function overArg(func, transform) {
            return function(arg) {
              return func(transform(arg));
            };
          }
          function replaceHolders(array, placeholder) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while (++index < length) {
              var value = array[index];
              if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
              }
            }
            return result;
          }
          function setToArray(set2) {
            var index = -1, result = Array(set2.size);
            set2.forEach(function(value) {
              result[++index] = value;
            });
            return result;
          }
          function setToPairs(set2) {
            var index = -1, result = Array(set2.size);
            set2.forEach(function(value) {
              result[++index] = [value, value];
            });
            return result;
          }
          function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1, length = array.length;
            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }
          function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
              if (array[index] === value) {
                return index;
              }
            }
            return index;
          }
          function stringSize(string) {
            return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
          }
          function stringToArray(string) {
            return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
          }
          function trimmedEndIndex(string) {
            var index = string.length;
            while (index-- && reWhitespace.test(string.charAt(index))) {
            }
            return index;
          }
          var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
          function unicodeSize(string) {
            var result = reUnicode.lastIndex = 0;
            while (reUnicode.test(string)) {
              ++result;
            }
            return result;
          }
          function unicodeToArray(string) {
            return string.match(reUnicode) || [];
          }
          function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
          }
          var runInContext = function runInContext2(context) {
            context = context == null ? root2 : _.defaults(root2.Object(), context, _.pick(root2, contextProps));
            var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
            var arrayProto2 = Array2.prototype, funcProto2 = Function2.prototype, objectProto2 = Object2.prototype;
            var coreJsData2 = context["__core-js_shared__"];
            var funcToString2 = funcProto2.toString;
            var hasOwnProperty2 = objectProto2.hasOwnProperty;
            var idCounter = 0;
            var maskSrcKey2 = function() {
              var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
              return uid ? "Symbol(src)_1." + uid : "";
            }();
            var nativeObjectToString = objectProto2.toString;
            var objectCtorString = funcToString2.call(Object2);
            var oldDash = root2._;
            var reIsNative2 = RegExp2("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
            var Buffer2 = moduleExports ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto2.propertyIsEnumerable, splice2 = arrayProto2.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
            var defineProperty = function() {
              try {
                var func = getNative2(Object2, "defineProperty");
                func({}, "", {});
                return func;
              } catch (e) {
              }
            }();
            var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
            var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto2.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto2.reverse;
            var DataView = getNative2(context, "DataView"), Map2 = getNative2(context, "Map"), Promise2 = getNative2(context, "Promise"), Set2 = getNative2(context, "Set"), WeakMap2 = getNative2(context, "WeakMap"), nativeCreate2 = getNative2(Object2, "create");
            var metaMap = WeakMap2 && new WeakMap2();
            var realNames = {};
            var dataViewCtorString = toSource2(DataView), mapCtorString = toSource2(Map2), promiseCtorString = toSource2(Promise2), setCtorString = toSource2(Set2), weakMapCtorString = toSource2(WeakMap2);
            var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
            function lodash2(value) {
              if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) {
                  return value;
                }
                if (hasOwnProperty2.call(value, "__wrapped__")) {
                  return wrapperClone(value);
                }
              }
              return new LodashWrapper(value);
            }
            var baseCreate = /* @__PURE__ */ function() {
              function object() {
              }
              return function(proto) {
                if (!isObject2(proto)) {
                  return {};
                }
                if (objectCreate) {
                  return objectCreate(proto);
                }
                object.prototype = proto;
                var result2 = new object();
                object.prototype = undefined$1;
                return result2;
              };
            }();
            function baseLodash() {
            }
            function LodashWrapper(value, chainAll) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__chain__ = !!chainAll;
              this.__index__ = 0;
              this.__values__ = undefined$1;
            }
            lodash2.templateSettings = {
              /**
              	       * Used to detect `data` property values to be HTML-escaped.
              	       *
              	       * @memberOf _.templateSettings
              	       * @type {RegExp}
              	       */
              "escape": reEscape,
              /**
              	       * Used to detect code to be evaluated.
              	       *
              	       * @memberOf _.templateSettings
              	       * @type {RegExp}
              	       */
              "evaluate": reEvaluate,
              /**
              	       * Used to detect `data` property values to inject.
              	       *
              	       * @memberOf _.templateSettings
              	       * @type {RegExp}
              	       */
              "interpolate": reInterpolate,
              /**
              	       * Used to reference the data object in the template text.
              	       *
              	       * @memberOf _.templateSettings
              	       * @type {string}
              	       */
              "variable": "",
              /**
              	       * Used to import variables into the compiled template.
              	       *
              	       * @memberOf _.templateSettings
              	       * @type {Object}
              	       */
              "imports": {
                /**
                	         * A reference to the `lodash` function.
                	         *
                	         * @memberOf _.templateSettings.imports
                	         * @type {Function}
                	         */
                "_": lodash2
              }
            };
            lodash2.prototype = baseLodash.prototype;
            lodash2.prototype.constructor = lodash2;
            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;
            function LazyWrapper(value) {
              this.__wrapped__ = value;
              this.__actions__ = [];
              this.__dir__ = 1;
              this.__filtered__ = false;
              this.__iteratees__ = [];
              this.__takeCount__ = MAX_ARRAY_LENGTH;
              this.__views__ = [];
            }
            function lazyClone() {
              var result2 = new LazyWrapper(this.__wrapped__);
              result2.__actions__ = copyArray(this.__actions__);
              result2.__dir__ = this.__dir__;
              result2.__filtered__ = this.__filtered__;
              result2.__iteratees__ = copyArray(this.__iteratees__);
              result2.__takeCount__ = this.__takeCount__;
              result2.__views__ = copyArray(this.__views__);
              return result2;
            }
            function lazyReverse() {
              if (this.__filtered__) {
                var result2 = new LazyWrapper(this);
                result2.__dir__ = -1;
                result2.__filtered__ = true;
              } else {
                result2 = this.clone();
                result2.__dir__ *= -1;
              }
              return result2;
            }
            function lazyValue() {
              var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView2(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
              if (!isArr || !isRight && arrLength == length && takeCount == length) {
                return baseWrapperValue(array, this.__actions__);
              }
              var result2 = [];
              outer:
                while (length-- && resIndex < takeCount) {
                  index += dir;
                  var iterIndex = -1, value = array[index];
                  while (++iterIndex < iterLength) {
                    var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                    if (type == LAZY_MAP_FLAG) {
                      value = computed;
                    } else if (!computed) {
                      if (type == LAZY_FILTER_FLAG) {
                        continue outer;
                      } else {
                        break outer;
                      }
                    }
                  }
                  result2[resIndex++] = value;
                }
              return result2;
            }
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;
            function Hash2(entries) {
              var index = -1, length = entries == null ? 0 : entries.length;
              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }
            function hashClear2() {
              this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
              this.size = 0;
            }
            function hashDelete2(key) {
              var result2 = this.has(key) && delete this.__data__[key];
              this.size -= result2 ? 1 : 0;
              return result2;
            }
            function hashGet2(key) {
              var data = this.__data__;
              if (nativeCreate2) {
                var result2 = data[key];
                return result2 === HASH_UNDEFINED2 ? undefined$1 : result2;
              }
              return hasOwnProperty2.call(data, key) ? data[key] : undefined$1;
            }
            function hashHas2(key) {
              var data = this.__data__;
              return nativeCreate2 ? data[key] !== undefined$1 : hasOwnProperty2.call(data, key);
            }
            function hashSet2(key, value) {
              var data = this.__data__;
              this.size += this.has(key) ? 0 : 1;
              data[key] = nativeCreate2 && value === undefined$1 ? HASH_UNDEFINED2 : value;
              return this;
            }
            Hash2.prototype.clear = hashClear2;
            Hash2.prototype["delete"] = hashDelete2;
            Hash2.prototype.get = hashGet2;
            Hash2.prototype.has = hashHas2;
            Hash2.prototype.set = hashSet2;
            function ListCache2(entries) {
              var index = -1, length = entries == null ? 0 : entries.length;
              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }
            function listCacheClear2() {
              this.__data__ = [];
              this.size = 0;
            }
            function listCacheDelete2(key) {
              var data = this.__data__, index = assocIndexOf2(data, key);
              if (index < 0) {
                return false;
              }
              var lastIndex = data.length - 1;
              if (index == lastIndex) {
                data.pop();
              } else {
                splice2.call(data, index, 1);
              }
              --this.size;
              return true;
            }
            function listCacheGet2(key) {
              var data = this.__data__, index = assocIndexOf2(data, key);
              return index < 0 ? undefined$1 : data[index][1];
            }
            function listCacheHas2(key) {
              return assocIndexOf2(this.__data__, key) > -1;
            }
            function listCacheSet2(key, value) {
              var data = this.__data__, index = assocIndexOf2(data, key);
              if (index < 0) {
                ++this.size;
                data.push([key, value]);
              } else {
                data[index][1] = value;
              }
              return this;
            }
            ListCache2.prototype.clear = listCacheClear2;
            ListCache2.prototype["delete"] = listCacheDelete2;
            ListCache2.prototype.get = listCacheGet2;
            ListCache2.prototype.has = listCacheHas2;
            ListCache2.prototype.set = listCacheSet2;
            function MapCache2(entries) {
              var index = -1, length = entries == null ? 0 : entries.length;
              this.clear();
              while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
              }
            }
            function mapCacheClear2() {
              this.size = 0;
              this.__data__ = {
                "hash": new Hash2(),
                "map": new (Map2 || ListCache2)(),
                "string": new Hash2()
              };
            }
            function mapCacheDelete2(key) {
              var result2 = getMapData2(this, key)["delete"](key);
              this.size -= result2 ? 1 : 0;
              return result2;
            }
            function mapCacheGet2(key) {
              return getMapData2(this, key).get(key);
            }
            function mapCacheHas2(key) {
              return getMapData2(this, key).has(key);
            }
            function mapCacheSet2(key, value) {
              var data = getMapData2(this, key), size3 = data.size;
              data.set(key, value);
              this.size += data.size == size3 ? 0 : 1;
              return this;
            }
            MapCache2.prototype.clear = mapCacheClear2;
            MapCache2.prototype["delete"] = mapCacheDelete2;
            MapCache2.prototype.get = mapCacheGet2;
            MapCache2.prototype.has = mapCacheHas2;
            MapCache2.prototype.set = mapCacheSet2;
            function SetCache(values2) {
              var index = -1, length = values2 == null ? 0 : values2.length;
              this.__data__ = new MapCache2();
              while (++index < length) {
                this.add(values2[index]);
              }
            }
            function setCacheAdd(value) {
              this.__data__.set(value, HASH_UNDEFINED2);
              return this;
            }
            function setCacheHas(value) {
              return this.__data__.has(value);
            }
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;
            function Stack(entries) {
              var data = this.__data__ = new ListCache2(entries);
              this.size = data.size;
            }
            function stackClear() {
              this.__data__ = new ListCache2();
              this.size = 0;
            }
            function stackDelete(key) {
              var data = this.__data__, result2 = data["delete"](key);
              this.size = data.size;
              return result2;
            }
            function stackGet(key) {
              return this.__data__.get(key);
            }
            function stackHas(key) {
              return this.__data__.has(key);
            }
            function stackSet(key, value) {
              var data = this.__data__;
              if (data instanceof ListCache2) {
                var pairs = data.__data__;
                if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                  pairs.push([key, value]);
                  this.size = ++data.size;
                  return this;
                }
                data = this.__data__ = new MapCache2(pairs);
              }
              data.set(key, value);
              this.size = data.size;
              return this;
            }
            Stack.prototype.clear = stackClear;
            Stack.prototype["delete"] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;
            function arrayLikeKeys(value, inherited) {
              var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
              for (var key in value) {
                if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
                isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
                isIndex(key, length)))) {
                  result2.push(key);
                }
              }
              return result2;
            }
            function arraySample(array) {
              var length = array.length;
              return length ? array[baseRandom(0, length - 1)] : undefined$1;
            }
            function arraySampleSize(array, n) {
              return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
            }
            function arrayShuffle(array) {
              return shuffleSelf(copyArray(array));
            }
            function assignMergeValue(object, key, value) {
              if (value !== undefined$1 && !eq2(object[key], value) || value === undefined$1 && !(key in object)) {
                baseAssignValue(object, key, value);
              }
            }
            function assignValue(object, key, value) {
              var objValue = object[key];
              if (!(hasOwnProperty2.call(object, key) && eq2(objValue, value)) || value === undefined$1 && !(key in object)) {
                baseAssignValue(object, key, value);
              }
            }
            function assocIndexOf2(array, key) {
              var length = array.length;
              while (length--) {
                if (eq2(array[length][0], key)) {
                  return length;
                }
              }
              return -1;
            }
            function baseAggregator(collection, setter, iteratee2, accumulator) {
              baseEach(collection, function(value, key, collection2) {
                setter(accumulator, value, iteratee2(value), collection2);
              });
              return accumulator;
            }
            function baseAssign(object, source) {
              return object && copyObject(source, keys(source), object);
            }
            function baseAssignIn(object, source) {
              return object && copyObject(source, keysIn(source), object);
            }
            function baseAssignValue(object, key, value) {
              if (key == "__proto__" && defineProperty) {
                defineProperty(object, key, {
                  "configurable": true,
                  "enumerable": true,
                  "value": value,
                  "writable": true
                });
              } else {
                object[key] = value;
              }
            }
            function baseAt(object, paths) {
              var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
              while (++index < length) {
                result2[index] = skip ? undefined$1 : get2(object, paths[index]);
              }
              return result2;
            }
            function baseClamp(number, lower, upper) {
              if (number === number) {
                if (upper !== undefined$1) {
                  number = number <= upper ? number : upper;
                }
                if (lower !== undefined$1) {
                  number = number >= lower ? number : lower;
                }
              }
              return number;
            }
            function baseClone(value, bitmask, customizer, key, object, stack) {
              var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
              if (customizer) {
                result2 = object ? customizer(value, key, object, stack) : customizer(value);
              }
              if (result2 !== undefined$1) {
                return result2;
              }
              if (!isObject2(value)) {
                return value;
              }
              var isArr = isArray(value);
              if (isArr) {
                result2 = initCloneArray(value);
                if (!isDeep) {
                  return copyArray(value, result2);
                }
              } else {
                var tag = getTag(value), isFunc = tag == funcTag2 || tag == genTag2;
                if (isBuffer2(value)) {
                  return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                  result2 = isFlat || isFunc ? {} : initCloneObject(value);
                  if (!isDeep) {
                    return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                  }
                } else {
                  if (!cloneableTags[tag]) {
                    return object ? value : {};
                  }
                  result2 = initCloneByTag(value, tag, isDeep);
                }
              }
              stack || (stack = new Stack());
              var stacked = stack.get(value);
              if (stacked) {
                return stacked;
              }
              stack.set(value, result2);
              if (isSet(value)) {
                value.forEach(function(subValue) {
                  result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                });
              } else if (isMap(value)) {
                value.forEach(function(subValue, key2) {
                  result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
                });
              }
              var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
              var props = isArr ? undefined$1 : keysFunc(value);
              arrayEach(props || value, function(subValue, key2) {
                if (props) {
                  key2 = subValue;
                  subValue = value[key2];
                }
                assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
              return result2;
            }
            function baseConforms(source) {
              var props = keys(source);
              return function(object) {
                return baseConformsTo(object, source, props);
              };
            }
            function baseConformsTo(object, source, props) {
              var length = props.length;
              if (object == null) {
                return !length;
              }
              object = Object2(object);
              while (length--) {
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined$1 && !(key in object) || !predicate(value)) {
                  return false;
                }
              }
              return true;
            }
            function baseDelay(func, wait, args) {
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              return setTimeout2(function() {
                func.apply(undefined$1, args);
              }, wait);
            }
            function baseDifference(array, values2, iteratee2, comparator) {
              var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
              if (!length) {
                return result2;
              }
              if (iteratee2) {
                values2 = arrayMap(values2, baseUnary(iteratee2));
              }
              if (comparator) {
                includes2 = arrayIncludesWith;
                isCommon = false;
              } else if (values2.length >= LARGE_ARRAY_SIZE) {
                includes2 = cacheHas;
                isCommon = false;
                values2 = new SetCache(values2);
              }
              outer:
                while (++index < length) {
                  var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                  value = comparator || value !== 0 ? value : 0;
                  if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while (valuesIndex--) {
                      if (values2[valuesIndex] === computed) {
                        continue outer;
                      }
                    }
                    result2.push(value);
                  } else if (!includes2(values2, computed, comparator)) {
                    result2.push(value);
                  }
                }
              return result2;
            }
            var baseEach = createBaseEach(baseForOwn);
            var baseEachRight = createBaseEach(baseForOwnRight, true);
            function baseEvery(collection, predicate) {
              var result2 = true;
              baseEach(collection, function(value, index, collection2) {
                result2 = !!predicate(value, index, collection2);
                return result2;
              });
              return result2;
            }
            function baseExtremum(array, iteratee2, comparator) {
              var index = -1, length = array.length;
              while (++index < length) {
                var value = array[index], current = iteratee2(value);
                if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                  var computed = current, result2 = value;
                }
              }
              return result2;
            }
            function baseFill(array, value, start, end) {
              var length = array.length;
              start = toInteger2(start);
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end === undefined$1 || end > length ? length : toInteger2(end);
              if (end < 0) {
                end += length;
              }
              end = start > end ? 0 : toLength(end);
              while (start < end) {
                array[start++] = value;
              }
              return array;
            }
            function baseFilter(collection, predicate) {
              var result2 = [];
              baseEach(collection, function(value, index, collection2) {
                if (predicate(value, index, collection2)) {
                  result2.push(value);
                }
              });
              return result2;
            }
            function baseFlatten(array, depth, predicate, isStrict, result2) {
              var index = -1, length = array.length;
              predicate || (predicate = isFlattenable);
              result2 || (result2 = []);
              while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                  if (depth > 1) {
                    baseFlatten(value, depth - 1, predicate, isStrict, result2);
                  } else {
                    arrayPush(result2, value);
                  }
                } else if (!isStrict) {
                  result2[result2.length] = value;
                }
              }
              return result2;
            }
            var baseFor = createBaseFor();
            var baseForRight = createBaseFor(true);
            function baseForOwn(object, iteratee2) {
              return object && baseFor(object, iteratee2, keys);
            }
            function baseForOwnRight(object, iteratee2) {
              return object && baseForRight(object, iteratee2, keys);
            }
            function baseFunctions(object, props) {
              return arrayFilter(props, function(key) {
                return isFunction2(object[key]);
              });
            }
            function baseGet2(object, path) {
              path = castPath(path, object);
              var index = 0, length = path.length;
              while (object != null && index < length) {
                object = object[toKey(path[index++])];
              }
              return index && index == length ? object : undefined$1;
            }
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
              var result2 = keysFunc(object);
              return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
            }
            function baseGetTag(value) {
              if (value == null) {
                return value === undefined$1 ? undefinedTag : nullTag;
              }
              return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
            }
            function baseGt(value, other) {
              return value > other;
            }
            function baseHas(object, key) {
              return object != null && hasOwnProperty2.call(object, key);
            }
            function baseHasIn(object, key) {
              return object != null && key in Object2(object);
            }
            function baseInRange(number, start, end) {
              return number >= nativeMin(start, end) && number < nativeMax(start, end);
            }
            function baseIntersection(arrays, iteratee2, comparator) {
              var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
              while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee2) {
                  array = arrayMap(array, baseUnary(iteratee2));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
              }
              array = arrays[0];
              var index = -1, seen = caches[0];
              outer:
                while (++index < length && result2.length < maxLength) {
                  var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                  value = comparator || value !== 0 ? value : 0;
                  if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                    othIndex = othLength;
                    while (--othIndex) {
                      var cache = caches[othIndex];
                      if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                        continue outer;
                      }
                    }
                    if (seen) {
                      seen.push(computed);
                    }
                    result2.push(value);
                  }
                }
              return result2;
            }
            function baseInverter(object, setter, iteratee2, accumulator) {
              baseForOwn(object, function(value, key, object2) {
                setter(accumulator, iteratee2(value), key, object2);
              });
              return accumulator;
            }
            function baseInvoke(object, path, args) {
              path = castPath(path, object);
              object = parent(object, path);
              var func = object == null ? object : object[toKey(last(path))];
              return func == null ? undefined$1 : apply(func, object, args);
            }
            function baseIsArguments(value) {
              return isObjectLike(value) && baseGetTag(value) == argsTag;
            }
            function baseIsArrayBuffer(value) {
              return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }
            function baseIsDate(value) {
              return isObjectLike(value) && baseGetTag(value) == dateTag;
            }
            function baseIsEqual(value, other, bitmask, customizer, stack) {
              if (value === other) {
                return true;
              }
              if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
              }
              return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
              var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
              objTag = objTag == argsTag ? objectTag : objTag;
              othTag = othTag == argsTag ? objectTag : othTag;
              var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
              if (isSameTag && isBuffer2(object)) {
                if (!isBuffer2(other)) {
                  return false;
                }
                objIsArr = true;
                objIsObj = false;
              }
              if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
              }
              if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
                if (objIsWrapped || othIsWrapped) {
                  var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                  stack || (stack = new Stack());
                  return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
              }
              if (!isSameTag) {
                return false;
              }
              stack || (stack = new Stack());
              return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }
            function baseIsMap(value) {
              return isObjectLike(value) && getTag(value) == mapTag;
            }
            function baseIsMatch(object, source, matchData, customizer) {
              var index = matchData.length, length = index, noCustomizer = !customizer;
              if (object == null) {
                return !length;
              }
              object = Object2(object);
              while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                  return false;
                }
              }
              while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                  if (objValue === undefined$1 && !(key in object)) {
                    return false;
                  }
                } else {
                  var stack = new Stack();
                  if (customizer) {
                    var result2 = customizer(objValue, srcValue, key, object, source, stack);
                  }
                  if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                    return false;
                  }
                }
              }
              return true;
            }
            function baseIsNative2(value) {
              if (!isObject2(value) || isMasked2(value)) {
                return false;
              }
              var pattern = isFunction2(value) ? reIsNative2 : reIsHostCtor2;
              return pattern.test(toSource2(value));
            }
            function baseIsRegExp(value) {
              return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }
            function baseIsSet(value) {
              return isObjectLike(value) && getTag(value) == setTag;
            }
            function baseIsTypedArray(value) {
              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }
            function baseIteratee(value) {
              if (typeof value == "function") {
                return value;
              }
              if (value == null) {
                return identity;
              }
              if (typeof value == "object") {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
              }
              return property(value);
            }
            function baseKeys(object) {
              if (!isPrototype(object)) {
                return nativeKeys(object);
              }
              var result2 = [];
              for (var key in Object2(object)) {
                if (hasOwnProperty2.call(object, key) && key != "constructor") {
                  result2.push(key);
                }
              }
              return result2;
            }
            function baseKeysIn(object) {
              if (!isObject2(object)) {
                return nativeKeysIn(object);
              }
              var isProto = isPrototype(object), result2 = [];
              for (var key in object) {
                if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
                  result2.push(key);
                }
              }
              return result2;
            }
            function baseLt(value, other) {
              return value < other;
            }
            function baseMap(collection, iteratee2) {
              var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
              baseEach(collection, function(value, key, collection2) {
                result2[++index] = iteratee2(value, key, collection2);
              });
              return result2;
            }
            function baseMatches(source) {
              var matchData = getMatchData(source);
              if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
              }
              return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
              };
            }
            function baseMatchesProperty(path, srcValue) {
              if (isKey2(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
              }
              return function(object) {
                var objValue = get2(object, path);
                return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
              };
            }
            function baseMerge(object, source, srcIndex, customizer, stack) {
              if (object === source) {
                return;
              }
              baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack());
                if (isObject2(srcValue)) {
                  baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                  var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined$1;
                  if (newValue === undefined$1) {
                    newValue = srcValue;
                  }
                  assignMergeValue(object, key, newValue);
                }
              }, keysIn);
            }
            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
              var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
              if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
              }
              var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$1;
              var isCommon = newValue === undefined$1;
              if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                  if (isArray(objValue)) {
                    newValue = objValue;
                  } else if (isArrayLikeObject(objValue)) {
                    newValue = copyArray(objValue);
                  } else if (isBuff) {
                    isCommon = false;
                    newValue = cloneBuffer(srcValue, true);
                  } else if (isTyped) {
                    isCommon = false;
                    newValue = cloneTypedArray(srcValue, true);
                  } else {
                    newValue = [];
                  }
                } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
                  newValue = objValue;
                  if (isArguments(objValue)) {
                    newValue = toPlainObject(objValue);
                  } else if (!isObject2(objValue) || isFunction2(objValue)) {
                    newValue = initCloneObject(srcValue);
                  }
                } else {
                  isCommon = false;
                }
              }
              if (isCommon) {
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack["delete"](srcValue);
              }
              assignMergeValue(object, key, newValue);
            }
            function baseNth(array, n) {
              var length = array.length;
              if (!length) {
                return;
              }
              n += n < 0 ? length : 0;
              return isIndex(n, length) ? array[n] : undefined$1;
            }
            function baseOrderBy(collection, iteratees, orders) {
              if (iteratees.length) {
                iteratees = arrayMap(iteratees, function(iteratee2) {
                  if (isArray(iteratee2)) {
                    return function(value) {
                      return baseGet2(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                    };
                  }
                  return iteratee2;
                });
              } else {
                iteratees = [identity];
              }
              var index = -1;
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              var result2 = baseMap(collection, function(value, key, collection2) {
                var criteria = arrayMap(iteratees, function(iteratee2) {
                  return iteratee2(value);
                });
                return { "criteria": criteria, "index": ++index, "value": value };
              });
              return baseSortBy(result2, function(object, other) {
                return compareMultiple(object, other, orders);
              });
            }
            function basePick(object, paths) {
              return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
              });
            }
            function basePickBy(object, paths, predicate) {
              var index = -1, length = paths.length, result2 = {};
              while (++index < length) {
                var path = paths[index], value = baseGet2(object, path);
                if (predicate(value, path)) {
                  baseSet(result2, castPath(path, object), value);
                }
              }
              return result2;
            }
            function basePropertyDeep(path) {
              return function(object) {
                return baseGet2(object, path);
              };
            }
            function basePullAll(array, values2, iteratee2, comparator) {
              var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
              if (array === values2) {
                values2 = copyArray(values2);
              }
              if (iteratee2) {
                seen = arrayMap(array, baseUnary(iteratee2));
              }
              while (++index < length) {
                var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
                while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                  if (seen !== array) {
                    splice2.call(seen, fromIndex, 1);
                  }
                  splice2.call(array, fromIndex, 1);
                }
              }
              return array;
            }
            function basePullAt(array, indexes) {
              var length = array ? indexes.length : 0, lastIndex = length - 1;
              while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                  var previous = index;
                  if (isIndex(index)) {
                    splice2.call(array, index, 1);
                  } else {
                    baseUnset(array, index);
                  }
                }
              }
              return array;
            }
            function baseRandom(lower, upper) {
              return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }
            function baseRange(start, end, step, fromRight) {
              var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
              while (length--) {
                result2[fromRight ? length : ++index] = start;
                start += step;
              }
              return result2;
            }
            function baseRepeat(string, n) {
              var result2 = "";
              if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result2;
              }
              do {
                if (n % 2) {
                  result2 += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                  string += string;
                }
              } while (n);
              return result2;
            }
            function baseRest(func, start) {
              return setToString(overRest(func, start, identity), func + "");
            }
            function baseSample(collection) {
              return arraySample(values(collection));
            }
            function baseSampleSize(collection, n) {
              var array = values(collection);
              return shuffleSelf(array, baseClamp(n, 0, array.length));
            }
            function baseSet(object, path, value, customizer) {
              if (!isObject2(object)) {
                return object;
              }
              path = castPath(path, object);
              var index = -1, length = path.length, lastIndex = length - 1, nested = object;
              while (nested != null && ++index < length) {
                var key = toKey(path[index]), newValue = value;
                if (key === "__proto__" || key === "constructor" || key === "prototype") {
                  return object;
                }
                if (index != lastIndex) {
                  var objValue = nested[key];
                  newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
                  if (newValue === undefined$1) {
                    newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                  }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
              }
              return object;
            }
            var baseSetData = !metaMap ? identity : function(func, data) {
              metaMap.set(func, data);
              return func;
            };
            var baseSetToString = !defineProperty ? identity : function(func, string) {
              return defineProperty(func, "toString", {
                "configurable": true,
                "enumerable": false,
                "value": constant(string),
                "writable": true
              });
            };
            function baseShuffle(collection) {
              return shuffleSelf(values(collection));
            }
            function baseSlice(array, start, end) {
              var index = -1, length = array.length;
              if (start < 0) {
                start = -start > length ? 0 : length + start;
              }
              end = end > length ? length : end;
              if (end < 0) {
                end += length;
              }
              length = start > end ? 0 : end - start >>> 0;
              start >>>= 0;
              var result2 = Array2(length);
              while (++index < length) {
                result2[index] = array[index + start];
              }
              return result2;
            }
            function baseSome(collection, predicate) {
              var result2;
              baseEach(collection, function(value, index, collection2) {
                result2 = predicate(value, index, collection2);
                return !result2;
              });
              return !!result2;
            }
            function baseSortedIndex(array, value, retHighest) {
              var low = 0, high = array == null ? low : array.length;
              if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                  var mid = low + high >>> 1, computed = array[mid];
                  if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                    low = mid + 1;
                  } else {
                    high = mid;
                  }
                }
                return high;
              }
              return baseSortedIndexBy(array, value, identity, retHighest);
            }
            function baseSortedIndexBy(array, value, iteratee2, retHighest) {
              var low = 0, high = array == null ? 0 : array.length;
              if (high === 0) {
                return 0;
              }
              value = iteratee2(value);
              var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
              while (low < high) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) {
                  var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                  setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                  setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                  setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                  setLow = false;
                } else {
                  setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return nativeMin(high, MAX_ARRAY_INDEX);
            }
            function baseSortedUniq(array, iteratee2) {
              var index = -1, length = array.length, resIndex = 0, result2 = [];
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                if (!index || !eq2(computed, seen)) {
                  var seen = computed;
                  result2[resIndex++] = value === 0 ? 0 : value;
                }
              }
              return result2;
            }
            function baseToNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              return +value;
            }
            function baseToString(value) {
              if (typeof value == "string") {
                return value;
              }
              if (isArray(value)) {
                return arrayMap(value, baseToString) + "";
              }
              if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : "";
              }
              var result2 = value + "";
              return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
            }
            function baseUniq(array, iteratee2, comparator) {
              var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
              if (comparator) {
                isCommon = false;
                includes2 = arrayIncludesWith;
              } else if (length >= LARGE_ARRAY_SIZE) {
                var set3 = iteratee2 ? null : createSet(array);
                if (set3) {
                  return setToArray(set3);
                }
                isCommon = false;
                includes2 = cacheHas;
                seen = new SetCache();
              } else {
                seen = iteratee2 ? [] : result2;
              }
              outer:
                while (++index < length) {
                  var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                  value = comparator || value !== 0 ? value : 0;
                  if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while (seenIndex--) {
                      if (seen[seenIndex] === computed) {
                        continue outer;
                      }
                    }
                    if (iteratee2) {
                      seen.push(computed);
                    }
                    result2.push(value);
                  } else if (!includes2(seen, computed, comparator)) {
                    if (seen !== result2) {
                      seen.push(computed);
                    }
                    result2.push(value);
                  }
                }
              return result2;
            }
            function baseUnset(object, path) {
              path = castPath(path, object);
              object = parent(object, path);
              return object == null || delete object[toKey(last(path))];
            }
            function baseUpdate(object, path, updater, customizer) {
              return baseSet(object, path, updater(baseGet2(object, path)), customizer);
            }
            function baseWhile(array, predicate, isDrop, fromRight) {
              var length = array.length, index = fromRight ? length : -1;
              while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
              }
              return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
            }
            function baseWrapperValue(value, actions) {
              var result2 = value;
              if (result2 instanceof LazyWrapper) {
                result2 = result2.value();
              }
              return arrayReduce(actions, function(result3, action) {
                return action.func.apply(action.thisArg, arrayPush([result3], action.args));
              }, result2);
            }
            function baseXor(arrays, iteratee2, comparator) {
              var length = arrays.length;
              if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
              }
              var index = -1, result2 = Array2(length);
              while (++index < length) {
                var array = arrays[index], othIndex = -1;
                while (++othIndex < length) {
                  if (othIndex != index) {
                    result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                  }
                }
              }
              return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
            }
            function baseZipObject(props, values2, assignFunc) {
              var index = -1, length = props.length, valsLength = values2.length, result2 = {};
              while (++index < length) {
                var value = index < valsLength ? values2[index] : undefined$1;
                assignFunc(result2, props[index], value);
              }
              return result2;
            }
            function castArrayLikeObject(value) {
              return isArrayLikeObject(value) ? value : [];
            }
            function castFunction(value) {
              return typeof value == "function" ? value : identity;
            }
            function castPath(value, object) {
              if (isArray(value)) {
                return value;
              }
              return isKey2(value, object) ? [value] : stringToPath2(toString(value));
            }
            var castRest = baseRest;
            function castSlice(array, start, end) {
              var length = array.length;
              end = end === undefined$1 ? length : end;
              return !start && end >= length ? array : baseSlice(array, start, end);
            }
            var clearTimeout2 = ctxClearTimeout || function(id) {
              return root2.clearTimeout(id);
            };
            function cloneBuffer(buffer, isDeep) {
              if (isDeep) {
                return buffer.slice();
              }
              var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
              buffer.copy(result2);
              return result2;
            }
            function cloneArrayBuffer(arrayBuffer) {
              var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
              new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
              return result2;
            }
            function cloneDataView(dataView, isDeep) {
              var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
              return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
            }
            function cloneRegExp(regexp) {
              var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
              result2.lastIndex = regexp.lastIndex;
              return result2;
            }
            function cloneSymbol(symbol) {
              return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
            }
            function cloneTypedArray(typedArray, isDeep) {
              var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
              return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
            }
            function compareAscending(value, other) {
              if (value !== other) {
                var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                  return 1;
                }
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                  return -1;
                }
              }
              return 0;
            }
            function compareMultiple(object, other, orders) {
              var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
              while (++index < length) {
                var result2 = compareAscending(objCriteria[index], othCriteria[index]);
                if (result2) {
                  if (index >= ordersLength) {
                    return result2;
                  }
                  var order = orders[index];
                  return result2 * (order == "desc" ? -1 : 1);
                }
              }
              return object.index - other.index;
            }
            function composeArgs(args, partials, holders, isCurried) {
              var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
              while (++leftIndex < leftLength) {
                result2[leftIndex] = partials[leftIndex];
              }
              while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result2[holders[argsIndex]] = args[argsIndex];
                }
              }
              while (rangeLength--) {
                result2[leftIndex++] = args[argsIndex++];
              }
              return result2;
            }
            function composeArgsRight(args, partials, holders, isCurried) {
              var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
              while (++argsIndex < rangeLength) {
                result2[argsIndex] = args[argsIndex];
              }
              var offset = argsIndex;
              while (++rightIndex < rightLength) {
                result2[offset + rightIndex] = partials[rightIndex];
              }
              while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                  result2[offset + holders[holdersIndex]] = args[argsIndex++];
                }
              }
              return result2;
            }
            function copyArray(source, array) {
              var index = -1, length = source.length;
              array || (array = Array2(length));
              while (++index < length) {
                array[index] = source[index];
              }
              return array;
            }
            function copyObject(source, props, object, customizer) {
              var isNew = !object;
              object || (object = {});
              var index = -1, length = props.length;
              while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
                if (newValue === undefined$1) {
                  newValue = source[key];
                }
                if (isNew) {
                  baseAssignValue(object, key, newValue);
                } else {
                  assignValue(object, key, newValue);
                }
              }
              return object;
            }
            function copySymbols(source, object) {
              return copyObject(source, getSymbols(source), object);
            }
            function copySymbolsIn(source, object) {
              return copyObject(source, getSymbolsIn(source), object);
            }
            function createAggregator(setter, initializer) {
              return function(collection, iteratee2) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
              };
            }
            function createAssigner(assigner) {
              return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
                customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$1;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                  customizer = length < 3 ? undefined$1 : customizer;
                  length = 1;
                }
                object = Object2(object);
                while (++index < length) {
                  var source = sources[index];
                  if (source) {
                    assigner(object, source, index, customizer);
                  }
                }
                return object;
              });
            }
            function createBaseEach(eachFunc, fromRight) {
              return function(collection, iteratee2) {
                if (collection == null) {
                  return collection;
                }
                if (!isArrayLike(collection)) {
                  return eachFunc(collection, iteratee2);
                }
                var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
                while (fromRight ? index-- : ++index < length) {
                  if (iteratee2(iterable[index], index, iterable) === false) {
                    break;
                  }
                }
                return collection;
              };
            }
            function createBaseFor(fromRight) {
              return function(object, iteratee2, keysFunc) {
                var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
                while (length--) {
                  var key = props[fromRight ? length : ++index];
                  if (iteratee2(iterable[key], key, iterable) === false) {
                    break;
                  }
                }
                return object;
              };
            }
            function createBind(func, bitmask, thisArg) {
              var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
              function wrapper() {
                var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
              }
              return wrapper;
            }
            function createCaseFirst(methodName) {
              return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
                return chr[methodName]() + trailing;
              };
            }
            function createCompounder(callback) {
              return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
              };
            }
            function createCtor(Ctor) {
              return function() {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return new Ctor();
                  case 1:
                    return new Ctor(args[0]);
                  case 2:
                    return new Ctor(args[0], args[1]);
                  case 3:
                    return new Ctor(args[0], args[1], args[2]);
                  case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                  case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                  case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                  case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
                return isObject2(result2) ? result2 : thisBinding;
              };
            }
            function createCurry(func, bitmask, arity) {
              var Ctor = createCtor(func);
              function wrapper() {
                var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
                while (index--) {
                  args[index] = arguments[index];
                }
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) {
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    undefined$1,
                    args,
                    holders,
                    undefined$1,
                    undefined$1,
                    arity - length
                  );
                }
                var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
              }
              return wrapper;
            }
            function createFind(findIndexFunc) {
              return function(collection, predicate, fromIndex) {
                var iterable = Object2(collection);
                if (!isArrayLike(collection)) {
                  var iteratee2 = getIteratee(predicate, 3);
                  collection = keys(collection);
                  predicate = function(key) {
                    return iteratee2(iterable[key], key, iterable);
                  };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$1;
              };
            }
            function createFlow(fromRight) {
              return flatRest(function(funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) {
                  funcs.reverse();
                }
                while (index--) {
                  var func = funcs[index];
                  if (typeof func != "function") {
                    throw new TypeError2(FUNC_ERROR_TEXT2);
                  }
                  if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                    var wrapper = new LodashWrapper([], true);
                  }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                  func = funcs[index];
                  var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined$1;
                  if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                  } else {
                    wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                  }
                }
                return function() {
                  var args = arguments, value = args[0];
                  if (wrapper && args.length == 1 && isArray(value)) {
                    return wrapper.plant(value).value();
                  }
                  var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                  while (++index2 < length) {
                    result2 = funcs[index2].call(this, result2);
                  }
                  return result2;
                };
              });
            }
            function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
              var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
              function wrapper() {
                var length = arguments.length, args = Array2(length), index = length;
                while (index--) {
                  args[index] = arguments[index];
                }
                if (isCurried) {
                  var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                  args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                  args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                  var newHolders = replaceHolders(args, placeholder);
                  return createRecurry(
                    func,
                    bitmask,
                    createHybrid,
                    wrapper.placeholder,
                    thisArg,
                    args,
                    newHolders,
                    argPos,
                    ary2,
                    arity - length
                  );
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) {
                  args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                  args.reverse();
                }
                if (isAry && ary2 < length) {
                  args.length = ary2;
                }
                if (this && this !== root2 && this instanceof wrapper) {
                  fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
              }
              return wrapper;
            }
            function createInverter(setter, toIteratee) {
              return function(object, iteratee2) {
                return baseInverter(object, setter, toIteratee(iteratee2), {});
              };
            }
            function createMathOperation(operator, defaultValue) {
              return function(value, other) {
                var result2;
                if (value === undefined$1 && other === undefined$1) {
                  return defaultValue;
                }
                if (value !== undefined$1) {
                  result2 = value;
                }
                if (other !== undefined$1) {
                  if (result2 === undefined$1) {
                    return other;
                  }
                  if (typeof value == "string" || typeof other == "string") {
                    value = baseToString(value);
                    other = baseToString(other);
                  } else {
                    value = baseToNumber(value);
                    other = baseToNumber(other);
                  }
                  result2 = operator(value, other);
                }
                return result2;
              };
            }
            function createOver(arrayFunc) {
              return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                  var thisArg = this;
                  return arrayFunc(iteratees, function(iteratee2) {
                    return apply(iteratee2, thisArg, args);
                  });
                });
              });
            }
            function createPadding(length, chars) {
              chars = chars === undefined$1 ? " " : baseToString(chars);
              var charsLength = chars.length;
              if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
              }
              var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
              return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
            }
            function createPartial(func, bitmask, thisArg, partials) {
              var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
              function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
                while (++leftIndex < leftLength) {
                  args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                  args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
              }
              return wrapper;
            }
            function createRange(fromRight) {
              return function(start, end, step) {
                if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                  end = step = undefined$1;
                }
                start = toFinite(start);
                if (end === undefined$1) {
                  end = start;
                  start = 0;
                } else {
                  end = toFinite(end);
                }
                step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
              };
            }
            function createRelationalOperation(operator) {
              return function(value, other) {
                if (!(typeof value == "string" && typeof other == "string")) {
                  value = toNumber(value);
                  other = toNumber(other);
                }
                return operator(value, other);
              };
            }
            function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
              var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
              bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
              bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
              if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
              }
              var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary2,
                arity
              ];
              var result2 = wrapFunc.apply(undefined$1, newData);
              if (isLaziable(func)) {
                setData(result2, newData);
              }
              result2.placeholder = placeholder;
              return setWrapToString(result2, func, bitmask);
            }
            function createRound(methodName) {
              var func = Math2[methodName];
              return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
                if (precision && nativeIsFinite(number)) {
                  var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                  pair = (toString(value) + "e").split("e");
                  return +(pair[0] + "e" + (+pair[1] - precision));
                }
                return func(number);
              };
            }
            var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
              return new Set2(values2);
            };
            function createToPairs(keysFunc) {
              return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                  return mapToArray(object);
                }
                if (tag == setTag) {
                  return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
              };
            }
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
              var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
              if (!isBindKey && typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              var length = partials ? partials.length : 0;
              if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined$1;
              }
              ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger2(ary2), 0);
              arity = arity === undefined$1 ? arity : toInteger2(arity);
              length -= holders ? holders.length : 0;
              if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined$1;
              }
              var data = isBindKey ? undefined$1 : getData(func);
              var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary2,
                arity
              ];
              if (data) {
                mergeData(newData, data);
              }
              func = newData[0];
              bitmask = newData[1];
              thisArg = newData[2];
              partials = newData[3];
              holders = newData[4];
              arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
              if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
              }
              if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result2 = createBind(func, bitmask, thisArg);
              } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                result2 = createCurry(func, bitmask, arity);
              } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                result2 = createPartial(func, bitmask, thisArg, partials);
              } else {
                result2 = createHybrid.apply(undefined$1, newData);
              }
              var setter = data ? baseSetData : setData;
              return setWrapToString(setter(result2, newData), func, bitmask);
            }
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
              if (objValue === undefined$1 || eq2(objValue, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
                return srcValue;
              }
              return objValue;
            }
            function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
              if (isObject2(objValue) && isObject2(srcValue)) {
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
                stack["delete"](srcValue);
              }
              return objValue;
            }
            function customOmitClone(value) {
              return isPlainObject2(value) ? undefined$1 : value;
            }
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
              if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
              }
              var arrStacked = stack.get(array);
              var othStacked = stack.get(other);
              if (arrStacked && othStacked) {
                return arrStacked == other && othStacked == array;
              }
              var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
              stack.set(array, other);
              stack.set(other, array);
              while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                  var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined$1) {
                  if (compared) {
                    continue;
                  }
                  result2 = false;
                  break;
                }
                if (seen) {
                  if (!arraySome(other, function(othValue2, othIndex) {
                    if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                      return seen.push(othIndex);
                    }
                  })) {
                    result2 = false;
                    break;
                  }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  result2 = false;
                  break;
                }
              }
              stack["delete"](array);
              stack["delete"](other);
              return result2;
            }
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
              switch (tag) {
                case dataViewTag:
                  if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                  }
                  object = object.buffer;
                  other = other.buffer;
                case arrayBufferTag:
                  if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                  }
                  return true;
                case boolTag:
                case dateTag:
                case numberTag:
                  return eq2(+object, +other);
                case errorTag:
                  return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                  return object == other + "";
                case mapTag:
                  var convert = mapToArray;
                case setTag:
                  var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                  convert || (convert = setToArray);
                  if (object.size != other.size && !isPartial) {
                    return false;
                  }
                  var stacked = stack.get(object);
                  if (stacked) {
                    return stacked == other;
                  }
                  bitmask |= COMPARE_UNORDERED_FLAG;
                  stack.set(object, other);
                  var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                  stack["delete"](object);
                  return result2;
                case symbolTag:
                  if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                  }
              }
              return false;
            }
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
              if (objLength != othLength && !isPartial) {
                return false;
              }
              var index = objLength;
              while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
                  return false;
                }
              }
              var objStacked = stack.get(object);
              var othStacked = stack.get(other);
              if (objStacked && othStacked) {
                return objStacked == other && othStacked == object;
              }
              var result2 = true;
              stack.set(object, other);
              stack.set(other, object);
              var skipCtor = isPartial;
              while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                  var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                  result2 = false;
                  break;
                }
                skipCtor || (skipCtor = key == "constructor");
              }
              if (result2 && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                  result2 = false;
                }
              }
              stack["delete"](object);
              stack["delete"](other);
              return result2;
            }
            function flatRest(func) {
              return setToString(overRest(func, undefined$1, flatten), func + "");
            }
            function getAllKeys(object) {
              return baseGetAllKeys(object, keys, getSymbols);
            }
            function getAllKeysIn(object) {
              return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }
            var getData = !metaMap ? noop : function(func) {
              return metaMap.get(func);
            };
            function getFuncName(func) {
              var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
              while (length--) {
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                  return data.name;
                }
              }
              return result2;
            }
            function getHolder(func) {
              var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
              return object.placeholder;
            }
            function getIteratee() {
              var result2 = lodash2.iteratee || iteratee;
              result2 = result2 === iteratee ? baseIteratee : result2;
              return arguments.length ? result2(arguments[0], arguments[1]) : result2;
            }
            function getMapData2(map2, key) {
              var data = map2.__data__;
              return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
            }
            function getMatchData(object) {
              var result2 = keys(object), length = result2.length;
              while (length--) {
                var key = result2[length], value = object[key];
                result2[length] = [key, value, isStrictComparable(value)];
              }
              return result2;
            }
            function getNative2(object, key) {
              var value = getValue2(object, key);
              return baseIsNative2(value) ? value : undefined$1;
            }
            function getRawTag(value) {
              var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
              try {
                value[symToStringTag] = undefined$1;
                var unmasked = true;
              } catch (e) {
              }
              var result2 = nativeObjectToString.call(value);
              if (unmasked) {
                if (isOwn) {
                  value[symToStringTag] = tag;
                } else {
                  delete value[symToStringTag];
                }
              }
              return result2;
            }
            var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
              if (object == null) {
                return [];
              }
              object = Object2(object);
              return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
              });
            };
            var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
              var result2 = [];
              while (object) {
                arrayPush(result2, getSymbols(object));
                object = getPrototype(object);
              }
              return result2;
            };
            var getTag = baseGetTag;
            if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
              getTag = function(value) {
                var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource2(Ctor) : "";
                if (ctorString) {
                  switch (ctorString) {
                    case dataViewCtorString:
                      return dataViewTag;
                    case mapCtorString:
                      return mapTag;
                    case promiseCtorString:
                      return promiseTag;
                    case setCtorString:
                      return setTag;
                    case weakMapCtorString:
                      return weakMapTag;
                  }
                }
                return result2;
              };
            }
            function getView2(start, end, transforms) {
              var index = -1, length = transforms.length;
              while (++index < length) {
                var data = transforms[index], size3 = data.size;
                switch (data.type) {
                  case "drop":
                    start += size3;
                    break;
                  case "dropRight":
                    end -= size3;
                    break;
                  case "take":
                    end = nativeMin(end, start + size3);
                    break;
                  case "takeRight":
                    start = nativeMax(start, end - size3);
                    break;
                }
              }
              return { "start": start, "end": end };
            }
            function getWrapDetails(source) {
              var match2 = source.match(reWrapDetails);
              return match2 ? match2[1].split(reSplitDetails) : [];
            }
            function hasPath(object, path, hasFunc) {
              path = castPath(path, object);
              var index = -1, length = path.length, result2 = false;
              while (++index < length) {
                var key = toKey(path[index]);
                if (!(result2 = object != null && hasFunc(object, key))) {
                  break;
                }
                object = object[key];
              }
              if (result2 || ++index != length) {
                return result2;
              }
              length = object == null ? 0 : object.length;
              return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
            }
            function initCloneArray(array) {
              var length = array.length, result2 = new array.constructor(length);
              if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
                result2.index = array.index;
                result2.input = array.input;
              }
              return result2;
            }
            function initCloneObject(object) {
              return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
            }
            function initCloneByTag(object, tag, isDeep) {
              var Ctor = object.constructor;
              switch (tag) {
                case arrayBufferTag:
                  return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                  return new Ctor(+object);
                case dataViewTag:
                  return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                  return cloneTypedArray(object, isDeep);
                case mapTag:
                  return new Ctor();
                case numberTag:
                case stringTag:
                  return new Ctor(object);
                case regexpTag:
                  return cloneRegExp(object);
                case setTag:
                  return new Ctor();
                case symbolTag:
                  return cloneSymbol(object);
              }
            }
            function insertWrapDetails(source, details) {
              var length = details.length;
              if (!length) {
                return source;
              }
              var lastIndex = length - 1;
              details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
              details = details.join(length > 2 ? ", " : " ");
              return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
            }
            function isFlattenable(value) {
              return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
            }
            function isIndex(value, length) {
              var type = typeof value;
              length = length == null ? MAX_SAFE_INTEGER : length;
              return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
            }
            function isIterateeCall(value, index, object) {
              if (!isObject2(object)) {
                return false;
              }
              var type = typeof index;
              if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
                return eq2(object[index], value);
              }
              return false;
            }
            function isKey2(value, object) {
              if (isArray(value)) {
                return false;
              }
              var type = typeof value;
              if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
                return true;
              }
              return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
            }
            function isKeyable2(value) {
              var type = typeof value;
              return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
            }
            function isLaziable(func) {
              var funcName = getFuncName(func), other = lodash2[funcName];
              if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
                return false;
              }
              if (func === other) {
                return true;
              }
              var data = getData(other);
              return !!data && func === data[0];
            }
            function isMasked2(func) {
              return !!maskSrcKey2 && maskSrcKey2 in func;
            }
            var isMaskable = coreJsData2 ? isFunction2 : stubFalse;
            function isPrototype(value) {
              var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
              return value === proto;
            }
            function isStrictComparable(value) {
              return value === value && !isObject2(value);
            }
            function matchesStrictComparable(key, srcValue) {
              return function(object) {
                if (object == null) {
                  return false;
                }
                return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
              };
            }
            function memoizeCapped(func) {
              var result2 = memoize2(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                  cache.clear();
                }
                return key;
              });
              var cache = result2.cache;
              return result2;
            }
            function mergeData(data, source) {
              var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
              var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
              if (!(isCommon || isCombo)) {
                return data;
              }
              if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
              }
              var value = source[3];
              if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
              }
              value = source[5];
              if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
              }
              value = source[7];
              if (value) {
                data[7] = value;
              }
              if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
              }
              if (data[9] == null) {
                data[9] = source[9];
              }
              data[0] = source[0];
              data[1] = newBitmask;
              return data;
            }
            function nativeKeysIn(object) {
              var result2 = [];
              if (object != null) {
                for (var key in Object2(object)) {
                  result2.push(key);
                }
              }
              return result2;
            }
            function objectToString2(value) {
              return nativeObjectToString.call(value);
            }
            function overRest(func, start, transform2) {
              start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
              return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
                while (++index < length) {
                  array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array2(start + 1);
                while (++index < start) {
                  otherArgs[index] = args[index];
                }
                otherArgs[start] = transform2(array);
                return apply(func, this, otherArgs);
              };
            }
            function parent(object, path) {
              return path.length < 2 ? object : baseGet2(object, baseSlice(path, 0, -1));
            }
            function reorder(array, indexes) {
              var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
              while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
              }
              return array;
            }
            function safeGet(object, key) {
              if (key === "constructor" && typeof object[key] === "function") {
                return;
              }
              if (key == "__proto__") {
                return;
              }
              return object[key];
            }
            var setData = shortOut(baseSetData);
            var setTimeout2 = ctxSetTimeout || function(func, wait) {
              return root2.setTimeout(func, wait);
            };
            var setToString = shortOut(baseSetToString);
            function setWrapToString(wrapper, reference, bitmask) {
              var source = reference + "";
              return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
            }
            function shortOut(func) {
              var count = 0, lastCalled = 0;
              return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                  if (++count >= HOT_COUNT) {
                    return arguments[0];
                  }
                } else {
                  count = 0;
                }
                return func.apply(undefined$1, arguments);
              };
            }
            function shuffleSelf(array, size3) {
              var index = -1, length = array.length, lastIndex = length - 1;
              size3 = size3 === undefined$1 ? length : size3;
              while (++index < size3) {
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
              }
              array.length = size3;
              return array;
            }
            var stringToPath2 = memoizeCapped(function(string) {
              var result2 = [];
              if (string.charCodeAt(0) === 46) {
                result2.push("");
              }
              string.replace(rePropName, function(match2, number, quote, subString) {
                result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
              });
              return result2;
            });
            function toKey(value) {
              if (typeof value == "string" || isSymbol(value)) {
                return value;
              }
              var result2 = value + "";
              return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
            }
            function toSource2(func) {
              if (func != null) {
                try {
                  return funcToString2.call(func);
                } catch (e) {
                }
                try {
                  return func + "";
                } catch (e) {
                }
              }
              return "";
            }
            function updateWrapDetails(details, bitmask) {
              arrayEach(wrapFlags, function(pair) {
                var value = "_." + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                  details.push(value);
                }
              });
              return details.sort();
            }
            function wrapperClone(wrapper) {
              if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
              }
              var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
              result2.__actions__ = copyArray(wrapper.__actions__);
              result2.__index__ = wrapper.__index__;
              result2.__values__ = wrapper.__values__;
              return result2;
            }
            function chunk(array, size3, guard) {
              if (guard ? isIterateeCall(array, size3, guard) : size3 === undefined$1) {
                size3 = 1;
              } else {
                size3 = nativeMax(toInteger2(size3), 0);
              }
              var length = array == null ? 0 : array.length;
              if (!length || size3 < 1) {
                return [];
              }
              var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size3));
              while (index < length) {
                result2[resIndex++] = baseSlice(array, index, index += size3);
              }
              return result2;
            }
            function compact2(array) {
              var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
              while (++index < length) {
                var value = array[index];
                if (value) {
                  result2[resIndex++] = value;
                }
              }
              return result2;
            }
            function concat() {
              var length = arguments.length;
              if (!length) {
                return [];
              }
              var args = Array2(length - 1), array = arguments[0], index = length;
              while (index--) {
                args[index - 1] = arguments[index];
              }
              return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
            }
            var difference = baseRest(function(array, values2) {
              return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
            });
            var differenceBy = baseRest(function(array, values2) {
              var iteratee2 = last(values2);
              if (isArrayLikeObject(iteratee2)) {
                iteratee2 = undefined$1;
              }
              return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
            });
            var differenceWith = baseRest(function(array, values2) {
              var comparator = last(values2);
              if (isArrayLikeObject(comparator)) {
                comparator = undefined$1;
              }
              return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
            });
            function drop(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined$1 ? 1 : toInteger2(n);
              return baseSlice(array, n < 0 ? 0 : n, length);
            }
            function dropRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined$1 ? 1 : toInteger2(n);
              n = length - n;
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }
            function dropRightWhile(array, predicate) {
              return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
            }
            function dropWhile(array, predicate) {
              return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
            }
            function fill(array, value, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
              }
              return baseFill(array, value, start, end);
            }
            function findIndex2(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger2(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index);
            }
            function findLastIndex(array, predicate, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length - 1;
              if (fromIndex !== undefined$1) {
                index = toInteger2(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
              }
              return baseFindIndex(array, getIteratee(predicate, 3), index, true);
            }
            function flatten(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, 1) : [];
            }
            function flattenDeep(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseFlatten(array, INFINITY) : [];
            }
            function flattenDepth(array, depth) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              depth = depth === undefined$1 ? 1 : toInteger2(depth);
              return baseFlatten(array, depth);
            }
            function fromPairs(pairs) {
              var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
              while (++index < length) {
                var pair = pairs[index];
                result2[pair[0]] = pair[1];
              }
              return result2;
            }
            function head(array) {
              return array && array.length ? array[0] : undefined$1;
            }
            function indexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = fromIndex == null ? 0 : toInteger2(fromIndex);
              if (index < 0) {
                index = nativeMax(length + index, 0);
              }
              return baseIndexOf(array, value, index);
            }
            function initial(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 0, -1) : [];
            }
            var intersection = baseRest(function(arrays) {
              var mapped = arrayMap(arrays, castArrayLikeObject);
              return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
            });
            var intersectionBy = baseRest(function(arrays) {
              var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
              if (iteratee2 === last(mapped)) {
                iteratee2 = undefined$1;
              } else {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
            });
            var intersectionWith = baseRest(function(arrays) {
              var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
              comparator = typeof comparator == "function" ? comparator : undefined$1;
              if (comparator) {
                mapped.pop();
              }
              return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
            });
            function join(array, separator) {
              return array == null ? "" : nativeJoin.call(array, separator);
            }
            function last(array) {
              var length = array == null ? 0 : array.length;
              return length ? array[length - 1] : undefined$1;
            }
            function lastIndexOf(array, value, fromIndex) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return -1;
              }
              var index = length;
              if (fromIndex !== undefined$1) {
                index = toInteger2(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
              }
              return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
            }
            function nth(array, n) {
              return array && array.length ? baseNth(array, toInteger2(n)) : undefined$1;
            }
            var pull = baseRest(pullAll);
            function pullAll(array, values2) {
              return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
            }
            function pullAllBy(array, values2, iteratee2) {
              return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
            }
            function pullAllWith(array, values2, comparator) {
              return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined$1, comparator) : array;
            }
            var pullAt = flatRest(function(array, indexes) {
              var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
              basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
              }).sort(compareAscending));
              return result2;
            });
            function remove(array, predicate) {
              var result2 = [];
              if (!(array && array.length)) {
                return result2;
              }
              var index = -1, indexes = [], length = array.length;
              predicate = getIteratee(predicate, 3);
              while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                  result2.push(value);
                  indexes.push(index);
                }
              }
              basePullAt(array, indexes);
              return result2;
            }
            function reverse(array) {
              return array == null ? array : nativeReverse.call(array);
            }
            function slice(array, start, end) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
              } else {
                start = start == null ? 0 : toInteger2(start);
                end = end === undefined$1 ? length : toInteger2(end);
              }
              return baseSlice(array, start, end);
            }
            function sortedIndex(array, value) {
              return baseSortedIndex(array, value);
            }
            function sortedIndexBy(array, value, iteratee2) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
            }
            function sortedIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq2(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }
            function sortedLastIndex(array, value) {
              return baseSortedIndex(array, value, true);
            }
            function sortedLastIndexBy(array, value, iteratee2) {
              return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
            }
            function sortedLastIndexOf(array, value) {
              var length = array == null ? 0 : array.length;
              if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq2(array[index], value)) {
                  return index;
                }
              }
              return -1;
            }
            function sortedUniq(array) {
              return array && array.length ? baseSortedUniq(array) : [];
            }
            function sortedUniqBy(array, iteratee2) {
              return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
            }
            function tail(array) {
              var length = array == null ? 0 : array.length;
              return length ? baseSlice(array, 1, length) : [];
            }
            function take(array, n, guard) {
              if (!(array && array.length)) {
                return [];
              }
              n = guard || n === undefined$1 ? 1 : toInteger2(n);
              return baseSlice(array, 0, n < 0 ? 0 : n);
            }
            function takeRight(array, n, guard) {
              var length = array == null ? 0 : array.length;
              if (!length) {
                return [];
              }
              n = guard || n === undefined$1 ? 1 : toInteger2(n);
              n = length - n;
              return baseSlice(array, n < 0 ? 0 : n, length);
            }
            function takeRightWhile(array, predicate) {
              return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
            }
            function takeWhile(array, predicate) {
              return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
            }
            var union = baseRest(function(arrays) {
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });
            var unionBy = baseRest(function(arrays) {
              var iteratee2 = last(arrays);
              if (isArrayLikeObject(iteratee2)) {
                iteratee2 = undefined$1;
              }
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
            });
            var unionWith = baseRest(function(arrays) {
              var comparator = last(arrays);
              comparator = typeof comparator == "function" ? comparator : undefined$1;
              return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
            });
            function uniq(array) {
              return array && array.length ? baseUniq(array) : [];
            }
            function uniqBy(array, iteratee2) {
              return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
            }
            function uniqWith(array, comparator) {
              comparator = typeof comparator == "function" ? comparator : undefined$1;
              return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
            }
            function unzip(array) {
              if (!(array && array.length)) {
                return [];
              }
              var length = 0;
              array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                  length = nativeMax(group.length, length);
                  return true;
                }
              });
              return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
              });
            }
            function unzipWith(array, iteratee2) {
              if (!(array && array.length)) {
                return [];
              }
              var result2 = unzip(array);
              if (iteratee2 == null) {
                return result2;
              }
              return arrayMap(result2, function(group) {
                return apply(iteratee2, undefined$1, group);
              });
            }
            var without = baseRest(function(array, values2) {
              return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
            });
            var xor = baseRest(function(arrays) {
              return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });
            var xorBy = baseRest(function(arrays) {
              var iteratee2 = last(arrays);
              if (isArrayLikeObject(iteratee2)) {
                iteratee2 = undefined$1;
              }
              return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
            });
            var xorWith = baseRest(function(arrays) {
              var comparator = last(arrays);
              comparator = typeof comparator == "function" ? comparator : undefined$1;
              return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
            });
            var zip = baseRest(unzip);
            function zipObject(props, values2) {
              return baseZipObject(props || [], values2 || [], assignValue);
            }
            function zipObjectDeep(props, values2) {
              return baseZipObject(props || [], values2 || [], baseSet);
            }
            var zipWith = baseRest(function(arrays) {
              var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$1;
              iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
              return unzipWith(arrays, iteratee2);
            });
            function chain(value) {
              var result2 = lodash2(value);
              result2.__chain__ = true;
              return result2;
            }
            function tap(value, interceptor) {
              interceptor(value);
              return value;
            }
            function thru(value, interceptor) {
              return interceptor(value);
            }
            var wrapperAt = flatRest(function(paths) {
              var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
              };
              if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                return this.thru(interceptor);
              }
              value = value.slice(start, +start + (length ? 1 : 0));
              value.__actions__.push({
                "func": thru,
                "args": [interceptor],
                "thisArg": undefined$1
              });
              return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) {
                  array.push(undefined$1);
                }
                return array;
              });
            });
            function wrapperChain() {
              return chain(this);
            }
            function wrapperCommit() {
              return new LodashWrapper(this.value(), this.__chain__);
            }
            function wrapperNext() {
              if (this.__values__ === undefined$1) {
                this.__values__ = toArray(this.value());
              }
              var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
              return { "done": done, "value": value };
            }
            function wrapperToIterator() {
              return this;
            }
            function wrapperPlant(value) {
              var result2, parent2 = this;
              while (parent2 instanceof baseLodash) {
                var clone2 = wrapperClone(parent2);
                clone2.__index__ = 0;
                clone2.__values__ = undefined$1;
                if (result2) {
                  previous.__wrapped__ = clone2;
                } else {
                  result2 = clone2;
                }
                var previous = clone2;
                parent2 = parent2.__wrapped__;
              }
              previous.__wrapped__ = value;
              return result2;
            }
            function wrapperReverse() {
              var value = this.__wrapped__;
              if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                  wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                  "func": thru,
                  "args": [reverse],
                  "thisArg": undefined$1
                });
                return new LodashWrapper(wrapped, this.__chain__);
              }
              return this.thru(reverse);
            }
            function wrapperValue() {
              return baseWrapperValue(this.__wrapped__, this.__actions__);
            }
            var countBy = createAggregator(function(result2, value, key) {
              if (hasOwnProperty2.call(result2, key)) {
                ++result2[key];
              } else {
                baseAssignValue(result2, key, 1);
              }
            });
            function every(collection, predicate, guard) {
              var func = isArray(collection) ? arrayEvery : baseEvery;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined$1;
              }
              return func(collection, getIteratee(predicate, 3));
            }
            function filter(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, getIteratee(predicate, 3));
            }
            var find = createFind(findIndex2);
            var findLast = createFind(findLastIndex);
            function flatMap(collection, iteratee2) {
              return baseFlatten(map(collection, iteratee2), 1);
            }
            function flatMapDeep(collection, iteratee2) {
              return baseFlatten(map(collection, iteratee2), INFINITY);
            }
            function flatMapDepth(collection, iteratee2, depth) {
              depth = depth === undefined$1 ? 1 : toInteger2(depth);
              return baseFlatten(map(collection, iteratee2), depth);
            }
            function forEach(collection, iteratee2) {
              var func = isArray(collection) ? arrayEach : baseEach;
              return func(collection, getIteratee(iteratee2, 3));
            }
            function forEachRight(collection, iteratee2) {
              var func = isArray(collection) ? arrayEachRight : baseEachRight;
              return func(collection, getIteratee(iteratee2, 3));
            }
            var groupBy = createAggregator(function(result2, value, key) {
              if (hasOwnProperty2.call(result2, key)) {
                result2[key].push(value);
              } else {
                baseAssignValue(result2, key, [value]);
              }
            });
            function includes(collection, value, fromIndex, guard) {
              collection = isArrayLike(collection) ? collection : values(collection);
              fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
              var length = collection.length;
              if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
              }
              return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
            }
            var invokeMap = baseRest(function(collection, path, args) {
              var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
              baseEach(collection, function(value) {
                result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
              });
              return result2;
            });
            var keyBy = createAggregator(function(result2, value, key) {
              baseAssignValue(result2, key, value);
            });
            function map(collection, iteratee2) {
              var func = isArray(collection) ? arrayMap : baseMap;
              return func(collection, getIteratee(iteratee2, 3));
            }
            function orderBy(collection, iteratees, orders, guard) {
              if (collection == null) {
                return [];
              }
              if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
              }
              orders = guard ? undefined$1 : orders;
              if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
              }
              return baseOrderBy(collection, iteratees, orders);
            }
            var partition = createAggregator(function(result2, value, key) {
              result2[key ? 0 : 1].push(value);
            }, function() {
              return [[], []];
            });
            function reduce(collection, iteratee2, accumulator) {
              var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
              return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
            }
            function reduceRight(collection, iteratee2, accumulator) {
              var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
              return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
            }
            function reject(collection, predicate) {
              var func = isArray(collection) ? arrayFilter : baseFilter;
              return func(collection, negate(getIteratee(predicate, 3)));
            }
            function sample(collection) {
              var func = isArray(collection) ? arraySample : baseSample;
              return func(collection);
            }
            function sampleSize(collection, n, guard) {
              if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
                n = 1;
              } else {
                n = toInteger2(n);
              }
              var func = isArray(collection) ? arraySampleSize : baseSampleSize;
              return func(collection, n);
            }
            function shuffle(collection) {
              var func = isArray(collection) ? arrayShuffle : baseShuffle;
              return func(collection);
            }
            function size2(collection) {
              if (collection == null) {
                return 0;
              }
              if (isArrayLike(collection)) {
                return isString2(collection) ? stringSize(collection) : collection.length;
              }
              var tag = getTag(collection);
              if (tag == mapTag || tag == setTag) {
                return collection.size;
              }
              return baseKeys(collection).length;
            }
            function some(collection, predicate, guard) {
              var func = isArray(collection) ? arraySome : baseSome;
              if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined$1;
              }
              return func(collection, getIteratee(predicate, 3));
            }
            var sortBy = baseRest(function(collection, iteratees) {
              if (collection == null) {
                return [];
              }
              var length = iteratees.length;
              if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
              } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [iteratees[0]];
              }
              return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });
            var now2 = ctxNow || function() {
              return root2.Date.now();
            };
            function after(n, func) {
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              n = toInteger2(n);
              return function() {
                if (--n < 1) {
                  return func.apply(this, arguments);
                }
              };
            }
            function ary(func, n, guard) {
              n = guard ? undefined$1 : n;
              n = func && n == null ? func.length : n;
              return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
            }
            function before(n, func) {
              var result2;
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              n = toInteger2(n);
              return function() {
                if (--n > 0) {
                  result2 = func.apply(this, arguments);
                }
                if (n <= 1) {
                  func = undefined$1;
                }
                return result2;
              };
            }
            var bind = baseRest(function(func, thisArg, partials) {
              var bitmask = WRAP_BIND_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(func, bitmask, thisArg, partials, holders);
            });
            var bindKey = baseRest(function(object, key, partials) {
              var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
              if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
              }
              return createWrap(key, bitmask, object, partials, holders);
            });
            function curry(func, arity, guard) {
              arity = guard ? undefined$1 : arity;
              var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
              result2.placeholder = curry.placeholder;
              return result2;
            }
            function curryRight(func, arity, guard) {
              arity = guard ? undefined$1 : arity;
              var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
              result2.placeholder = curryRight.placeholder;
              return result2;
            }
            function debounce(func, wait, options) {
              var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              wait = toNumber(wait) || 0;
              if (isObject2(options)) {
                leading = !!options.leading;
                maxing = "maxWait" in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined$1;
                lastInvokeTime = time;
                result2 = func.apply(thisArg, args);
                return result2;
              }
              function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout2(timerExpired, wait);
                return leading ? invokeFunc(time) : result2;
              }
              function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
              }
              function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
              }
              function timerExpired() {
                var time = now2();
                if (shouldInvoke(time)) {
                  return trailingEdge(time);
                }
                timerId = setTimeout2(timerExpired, remainingWait(time));
              }
              function trailingEdge(time) {
                timerId = undefined$1;
                if (trailing && lastArgs) {
                  return invokeFunc(time);
                }
                lastArgs = lastThis = undefined$1;
                return result2;
              }
              function cancel() {
                if (timerId !== undefined$1) {
                  clearTimeout2(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined$1;
              }
              function flush() {
                return timerId === undefined$1 ? result2 : trailingEdge(now2());
              }
              function debounced() {
                var time = now2(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                  if (timerId === undefined$1) {
                    return leadingEdge(lastCallTime);
                  }
                  if (maxing) {
                    clearTimeout2(timerId);
                    timerId = setTimeout2(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                  }
                }
                if (timerId === undefined$1) {
                  timerId = setTimeout2(timerExpired, wait);
                }
                return result2;
              }
              debounced.cancel = cancel;
              debounced.flush = flush;
              return debounced;
            }
            var defer = baseRest(function(func, args) {
              return baseDelay(func, 1, args);
            });
            var delay = baseRest(function(func, wait, args) {
              return baseDelay(func, toNumber(wait) || 0, args);
            });
            function flip(func) {
              return createWrap(func, WRAP_FLIP_FLAG);
            }
            function memoize2(func, resolver2) {
              if (typeof func != "function" || resolver2 != null && typeof resolver2 != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              var memoized = function() {
                var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                  return cache.get(key);
                }
                var result2 = func.apply(this, args);
                memoized.cache = cache.set(key, result2) || cache;
                return result2;
              };
              memoized.cache = new (memoize2.Cache || MapCache2)();
              return memoized;
            }
            memoize2.Cache = MapCache2;
            function negate(predicate) {
              if (typeof predicate != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              return function() {
                var args = arguments;
                switch (args.length) {
                  case 0:
                    return !predicate.call(this);
                  case 1:
                    return !predicate.call(this, args[0]);
                  case 2:
                    return !predicate.call(this, args[0], args[1]);
                  case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
              };
            }
            function once(func) {
              return before(2, func);
            }
            var overArgs = castRest(function(func, transforms) {
              transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
              var funcsLength = transforms.length;
              return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while (++index < length) {
                  args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
              });
            });
            var partial = baseRest(function(func, partials) {
              var holders = replaceHolders(partials, getHolder(partial));
              return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
            });
            var partialRight = baseRest(function(func, partials) {
              var holders = replaceHolders(partials, getHolder(partialRight));
              return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
            });
            var rearg = flatRest(function(func, indexes) {
              return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
            });
            function rest(func, start) {
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              start = start === undefined$1 ? start : toInteger2(start);
              return baseRest(func, start);
            }
            function spread(func, start) {
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              start = start == null ? 0 : nativeMax(toInteger2(start), 0);
              return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) {
                  arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
              });
            }
            function throttle(func, wait, options) {
              var leading = true, trailing = true;
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              if (isObject2(options)) {
                leading = "leading" in options ? !!options.leading : leading;
                trailing = "trailing" in options ? !!options.trailing : trailing;
              }
              return debounce(func, wait, {
                "leading": leading,
                "maxWait": wait,
                "trailing": trailing
              });
            }
            function unary(func) {
              return ary(func, 1);
            }
            function wrap(value, wrapper) {
              return partial(castFunction(wrapper), value);
            }
            function castArray() {
              if (!arguments.length) {
                return [];
              }
              var value = arguments[0];
              return isArray(value) ? value : [value];
            }
            function clone(value) {
              return baseClone(value, CLONE_SYMBOLS_FLAG);
            }
            function cloneWith(value, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }
            function cloneDeep(value) {
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }
            function cloneDeepWith(value, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
            }
            function conformsTo(object, source) {
              return source == null || baseConformsTo(object, source, keys(source));
            }
            function eq2(value, other) {
              return value === other || value !== value && other !== other;
            }
            var gt = createRelationalOperation(baseGt);
            var gte = createRelationalOperation(function(value, other) {
              return value >= other;
            });
            var isArguments = baseIsArguments(/* @__PURE__ */ function() {
              return arguments;
            }()) ? baseIsArguments : function(value) {
              return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
            };
            var isArray = Array2.isArray;
            var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
            function isArrayLike(value) {
              return value != null && isLength(value.length) && !isFunction2(value);
            }
            function isArrayLikeObject(value) {
              return isObjectLike(value) && isArrayLike(value);
            }
            function isBoolean2(value) {
              return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
            }
            var isBuffer2 = nativeIsBuffer || stubFalse;
            var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
            function isElement2(value) {
              return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
            }
            function isEmpty2(value) {
              if (value == null) {
                return true;
              }
              if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
              }
              var tag = getTag(value);
              if (tag == mapTag || tag == setTag) {
                return !value.size;
              }
              if (isPrototype(value)) {
                return !baseKeys(value).length;
              }
              for (var key in value) {
                if (hasOwnProperty2.call(value, key)) {
                  return false;
                }
              }
              return true;
            }
            function isEqual2(value, other) {
              return baseIsEqual(value, other);
            }
            function isEqualWith(value, other, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              var result2 = customizer ? customizer(value, other) : undefined$1;
              return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
            }
            function isError(value) {
              if (!isObjectLike(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
            }
            function isFinite(value) {
              return typeof value == "number" && nativeIsFinite(value);
            }
            function isFunction2(value) {
              if (!isObject2(value)) {
                return false;
              }
              var tag = baseGetTag(value);
              return tag == funcTag2 || tag == genTag2 || tag == asyncTag || tag == proxyTag;
            }
            function isInteger(value) {
              return typeof value == "number" && value == toInteger2(value);
            }
            function isLength(value) {
              return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }
            function isObject2(value) {
              var type = typeof value;
              return value != null && (type == "object" || type == "function");
            }
            function isObjectLike(value) {
              return value != null && typeof value == "object";
            }
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
            function isMatch(object, source) {
              return object === source || baseIsMatch(object, source, getMatchData(source));
            }
            function isMatchWith(object, source, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              return baseIsMatch(object, source, getMatchData(source), customizer);
            }
            function isNaN2(value) {
              return isNumber(value) && value != +value;
            }
            function isNative(value) {
              if (isMaskable(value)) {
                throw new Error2(CORE_ERROR_TEXT);
              }
              return baseIsNative2(value);
            }
            function isNull(value) {
              return value === null;
            }
            function isNil(value) {
              return value == null;
            }
            function isNumber(value) {
              return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
            }
            function isPlainObject2(value) {
              if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
              }
              var proto = getPrototype(value);
              if (proto === null) {
                return true;
              }
              var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
              return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString;
            }
            var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
            function isSafeInteger(value) {
              return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
            }
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
            function isString2(value) {
              return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
            }
            function isSymbol(value) {
              return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
            }
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
            function isUndefined2(value) {
              return value === undefined$1;
            }
            function isWeakMap(value) {
              return isObjectLike(value) && getTag(value) == weakMapTag;
            }
            function isWeakSet(value) {
              return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }
            var lt = createRelationalOperation(baseLt);
            var lte = createRelationalOperation(function(value, other) {
              return value <= other;
            });
            function toArray(value) {
              if (!value) {
                return [];
              }
              if (isArrayLike(value)) {
                return isString2(value) ? stringToArray(value) : copyArray(value);
              }
              if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
              }
              var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
              return func(value);
            }
            function toFinite(value) {
              if (!value) {
                return value === 0 ? value : 0;
              }
              value = toNumber(value);
              if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
              }
              return value === value ? value : 0;
            }
            function toInteger2(value) {
              var result2 = toFinite(value), remainder = result2 % 1;
              return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
            }
            function toLength(value) {
              return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
            }
            function toNumber(value) {
              if (typeof value == "number") {
                return value;
              }
              if (isSymbol(value)) {
                return NAN;
              }
              if (isObject2(value)) {
                var other = typeof value.valueOf == "function" ? value.valueOf() : value;
                value = isObject2(other) ? other + "" : other;
              }
              if (typeof value != "string") {
                return value === 0 ? value : +value;
              }
              value = baseTrim(value);
              var isBinary = reIsBinary.test(value);
              return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
            }
            function toPlainObject(value) {
              return copyObject(value, keysIn(value));
            }
            function toSafeInteger(value) {
              return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
            }
            function toString(value) {
              return value == null ? "" : baseToString(value);
            }
            var assign = createAssigner(function(object, source) {
              if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
              }
              for (var key in source) {
                if (hasOwnProperty2.call(source, key)) {
                  assignValue(object, key, source[key]);
                }
              }
            });
            var assignIn = createAssigner(function(object, source) {
              copyObject(source, keysIn(source), object);
            });
            var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
              copyObject(source, keysIn(source), object, customizer);
            });
            var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
              copyObject(source, keys(source), object, customizer);
            });
            var at = flatRest(baseAt);
            function create(prototype, properties) {
              var result2 = baseCreate(prototype);
              return properties == null ? result2 : baseAssign(result2, properties);
            }
            var defaults = baseRest(function(object, sources) {
              object = Object2(object);
              var index = -1;
              var length = sources.length;
              var guard = length > 2 ? sources[2] : undefined$1;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                length = 1;
              }
              while (++index < length) {
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while (++propsIndex < propsLength) {
                  var key = props[propsIndex];
                  var value = object[key];
                  if (value === undefined$1 || eq2(value, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
                    object[key] = source[key];
                  }
                }
              }
              return object;
            });
            var defaultsDeep = baseRest(function(args) {
              args.push(undefined$1, customDefaultsMerge);
              return apply(mergeWith, undefined$1, args);
            });
            function findKey2(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }
            function findLastKey(object, predicate) {
              return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
            }
            function forIn(object, iteratee2) {
              return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
            }
            function forInRight(object, iteratee2) {
              return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
            }
            function forOwn(object, iteratee2) {
              return object && baseForOwn(object, getIteratee(iteratee2, 3));
            }
            function forOwnRight(object, iteratee2) {
              return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
            }
            function functions(object) {
              return object == null ? [] : baseFunctions(object, keys(object));
            }
            function functionsIn(object) {
              return object == null ? [] : baseFunctions(object, keysIn(object));
            }
            function get2(object, path, defaultValue) {
              var result2 = object == null ? undefined$1 : baseGet2(object, path);
              return result2 === undefined$1 ? defaultValue : result2;
            }
            function has2(object, path) {
              return object != null && hasPath(object, path, baseHas);
            }
            function hasIn(object, path) {
              return object != null && hasPath(object, path, baseHasIn);
            }
            var invert = createInverter(function(result2, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }
              result2[value] = key;
            }, constant(identity));
            var invertBy = createInverter(function(result2, value, key) {
              if (value != null && typeof value.toString != "function") {
                value = nativeObjectToString.call(value);
              }
              if (hasOwnProperty2.call(result2, value)) {
                result2[value].push(key);
              } else {
                result2[value] = [key];
              }
            }, getIteratee);
            var invoke = baseRest(baseInvoke);
            function keys(object) {
              return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }
            function keysIn(object) {
              return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
            }
            function mapKeys(object, iteratee2) {
              var result2 = {};
              iteratee2 = getIteratee(iteratee2, 3);
              baseForOwn(object, function(value, key, object2) {
                baseAssignValue(result2, iteratee2(value, key, object2), value);
              });
              return result2;
            }
            function mapValues(object, iteratee2) {
              var result2 = {};
              iteratee2 = getIteratee(iteratee2, 3);
              baseForOwn(object, function(value, key, object2) {
                baseAssignValue(result2, key, iteratee2(value, key, object2));
              });
              return result2;
            }
            var merge = createAssigner(function(object, source, srcIndex) {
              baseMerge(object, source, srcIndex);
            });
            var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
              baseMerge(object, source, srcIndex, customizer);
            });
            var omit = flatRest(function(object, paths) {
              var result2 = {};
              if (object == null) {
                return result2;
              }
              var isDeep = false;
              paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
              });
              copyObject(object, getAllKeysIn(object), result2);
              if (isDeep) {
                result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
              }
              var length = paths.length;
              while (length--) {
                baseUnset(result2, paths[length]);
              }
              return result2;
            });
            function omitBy(object, predicate) {
              return pickBy(object, negate(getIteratee(predicate)));
            }
            var pick = flatRest(function(object, paths) {
              return object == null ? {} : basePick(object, paths);
            });
            function pickBy(object, predicate) {
              if (object == null) {
                return {};
              }
              var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [prop];
              });
              predicate = getIteratee(predicate);
              return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
              });
            }
            function result(object, path, defaultValue) {
              path = castPath(path, object);
              var index = -1, length = path.length;
              if (!length) {
                length = 1;
                object = undefined$1;
              }
              while (++index < length) {
                var value = object == null ? undefined$1 : object[toKey(path[index])];
                if (value === undefined$1) {
                  index = length;
                  value = defaultValue;
                }
                object = isFunction2(value) ? value.call(object) : value;
              }
              return object;
            }
            function set2(object, path, value) {
              return object == null ? object : baseSet(object, path, value);
            }
            function setWith(object, path, value, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              return object == null ? object : baseSet(object, path, value, customizer);
            }
            var toPairs = createToPairs(keys);
            var toPairsIn = createToPairs(keysIn);
            function transform(object, iteratee2, accumulator) {
              var isArr = isArray(object), isArrLike = isArr || isBuffer2(object) || isTypedArray(object);
              iteratee2 = getIteratee(iteratee2, 4);
              if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                  accumulator = isArr ? new Ctor() : [];
                } else if (isObject2(object)) {
                  accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
                } else {
                  accumulator = {};
                }
              }
              (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
                return iteratee2(accumulator, value, index, object2);
              });
              return accumulator;
            }
            function unset2(object, path) {
              return object == null ? true : baseUnset(object, path);
            }
            function update(object, path, updater) {
              return object == null ? object : baseUpdate(object, path, castFunction(updater));
            }
            function updateWith(object, path, updater, customizer) {
              customizer = typeof customizer == "function" ? customizer : undefined$1;
              return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
            }
            function values(object) {
              return object == null ? [] : baseValues(object, keys(object));
            }
            function valuesIn(object) {
              return object == null ? [] : baseValues(object, keysIn(object));
            }
            function clamp(number, lower, upper) {
              if (upper === undefined$1) {
                upper = lower;
                lower = undefined$1;
              }
              if (upper !== undefined$1) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
              }
              if (lower !== undefined$1) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
              }
              return baseClamp(toNumber(number), lower, upper);
            }
            function inRange(number, start, end) {
              start = toFinite(start);
              if (end === undefined$1) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              number = toNumber(number);
              return baseInRange(number, start, end);
            }
            function random(lower, upper, floating) {
              if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
                upper = floating = undefined$1;
              }
              if (floating === undefined$1) {
                if (typeof upper == "boolean") {
                  floating = upper;
                  upper = undefined$1;
                } else if (typeof lower == "boolean") {
                  floating = lower;
                  lower = undefined$1;
                }
              }
              if (lower === undefined$1 && upper === undefined$1) {
                lower = 0;
                upper = 1;
              } else {
                lower = toFinite(lower);
                if (upper === undefined$1) {
                  upper = lower;
                  lower = 0;
                } else {
                  upper = toFinite(upper);
                }
              }
              if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
              }
              if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
              }
              return baseRandom(lower, upper);
            }
            var camelCase = createCompounder(function(result2, word, index) {
              word = word.toLowerCase();
              return result2 + (index ? capitalize2(word) : word);
            });
            function capitalize2(string) {
              return upperFirst(toString(string).toLowerCase());
            }
            function deburr(string) {
              string = toString(string);
              return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
            }
            function endsWith(string, target, position) {
              string = toString(string);
              target = baseToString(target);
              var length = string.length;
              position = position === undefined$1 ? length : baseClamp(toInteger2(position), 0, length);
              var end = position;
              position -= target.length;
              return position >= 0 && string.slice(position, end) == target;
            }
            function escape(string) {
              string = toString(string);
              return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
            }
            function escapeRegExp(string) {
              string = toString(string);
              return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar2, "\\$&") : string;
            }
            var kebabCase = createCompounder(function(result2, word, index) {
              return result2 + (index ? "-" : "") + word.toLowerCase();
            });
            var lowerCase = createCompounder(function(result2, word, index) {
              return result2 + (index ? " " : "") + word.toLowerCase();
            });
            var lowerFirst = createCaseFirst("toLowerCase");
            function pad(string, length, chars) {
              string = toString(string);
              length = toInteger2(length);
              var strLength = length ? stringSize(string) : 0;
              if (!length || strLength >= length) {
                return string;
              }
              var mid = (length - strLength) / 2;
              return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
            }
            function padEnd(string, length, chars) {
              string = toString(string);
              length = toInteger2(length);
              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
            }
            function padStart2(string, length, chars) {
              string = toString(string);
              length = toInteger2(length);
              var strLength = length ? stringSize(string) : 0;
              return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
            }
            function parseInt2(string, radix, guard) {
              if (guard || radix == null) {
                radix = 0;
              } else if (radix) {
                radix = +radix;
              }
              return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
            }
            function repeat(string, n, guard) {
              if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
                n = 1;
              } else {
                n = toInteger2(n);
              }
              return baseRepeat(toString(string), n);
            }
            function replace() {
              var args = arguments, string = toString(args[0]);
              return args.length < 3 ? string : string.replace(args[1], args[2]);
            }
            var snakeCase = createCompounder(function(result2, word, index) {
              return result2 + (index ? "_" : "") + word.toLowerCase();
            });
            function split(string, separator, limit) {
              if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
                separator = limit = undefined$1;
              }
              limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
              if (!limit) {
                return [];
              }
              string = toString(string);
              if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                  return castSlice(stringToArray(string), 0, limit);
                }
              }
              return string.split(separator, limit);
            }
            var startCase = createCompounder(function(result2, word, index) {
              return result2 + (index ? " " : "") + upperFirst(word);
            });
            function startsWith(string, target, position) {
              string = toString(string);
              position = position == null ? 0 : baseClamp(toInteger2(position), 0, string.length);
              target = baseToString(target);
              return string.slice(position, position + target.length) == target;
            }
            function template(string, options, guard) {
              var settings = lodash2.templateSettings;
              if (guard && isIterateeCall(string, options, guard)) {
                options = undefined$1;
              }
              string = toString(string);
              options = assignInWith({}, options, settings, customDefaultsAssignIn);
              var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
              var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
              var reDelimiters = RegExp2(
                (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
                "g"
              );
              var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
              string.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                  isEscaping = true;
                  source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                  isEvaluating = true;
                  source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                  source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                }
                index = offset + match2.length;
                return match2;
              });
              source += "';\n";
              var variable = hasOwnProperty2.call(options, "variable") && options.variable;
              if (!variable) {
                source = "with (obj) {\n" + source + "\n}\n";
              } else if (reForbiddenIdentifierChars.test(variable)) {
                throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
              }
              source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
              source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
              var result2 = attempt(function() {
                return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
              });
              result2.source = source;
              if (isError(result2)) {
                throw result2;
              }
              return result2;
            }
            function toLower(value) {
              return toString(value).toLowerCase();
            }
            function toUpper(value) {
              return toString(value).toUpperCase();
            }
            function trim(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined$1)) {
                return baseTrim(string);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
              return castSlice(strSymbols, start, end).join("");
            }
            function trimEnd(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined$1)) {
                return string.slice(0, trimmedEndIndex(string) + 1);
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
              return castSlice(strSymbols, 0, end).join("");
            }
            function trimStart(string, chars, guard) {
              string = toString(string);
              if (string && (guard || chars === undefined$1)) {
                return string.replace(reTrimStart, "");
              }
              if (!string || !(chars = baseToString(chars))) {
                return string;
              }
              var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
              return castSlice(strSymbols, start).join("");
            }
            function truncate(string, options) {
              var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
              if (isObject2(options)) {
                var separator = "separator" in options ? options.separator : separator;
                length = "length" in options ? toInteger2(options.length) : length;
                omission = "omission" in options ? baseToString(options.omission) : omission;
              }
              string = toString(string);
              var strLength = string.length;
              if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
              }
              if (length >= strLength) {
                return string;
              }
              var end = length - stringSize(omission);
              if (end < 1) {
                return omission;
              }
              var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
              if (separator === undefined$1) {
                return result2 + omission;
              }
              if (strSymbols) {
                end += result2.length - end;
              }
              if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                  var match2, substring = result2;
                  if (!separator.global) {
                    separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                  }
                  separator.lastIndex = 0;
                  while (match2 = separator.exec(substring)) {
                    var newEnd = match2.index;
                  }
                  result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
                }
              } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result2.lastIndexOf(separator);
                if (index > -1) {
                  result2 = result2.slice(0, index);
                }
              }
              return result2 + omission;
            }
            function unescape(string) {
              string = toString(string);
              return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
            }
            var upperCase = createCompounder(function(result2, word, index) {
              return result2 + (index ? " " : "") + word.toUpperCase();
            });
            var upperFirst = createCaseFirst("toUpperCase");
            function words(string, pattern, guard) {
              string = toString(string);
              pattern = guard ? undefined$1 : pattern;
              if (pattern === undefined$1) {
                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
              }
              return string.match(pattern) || [];
            }
            var attempt = baseRest(function(func, args) {
              try {
                return apply(func, undefined$1, args);
              } catch (e) {
                return isError(e) ? e : new Error2(e);
              }
            });
            var bindAll = flatRest(function(object, methodNames) {
              arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
              });
              return object;
            });
            function cond(pairs) {
              var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
              pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT2);
                }
                return [toIteratee(pair[0]), pair[1]];
              });
              return baseRest(function(args) {
                var index = -1;
                while (++index < length) {
                  var pair = pairs[index];
                  if (apply(pair[0], this, args)) {
                    return apply(pair[1], this, args);
                  }
                }
              });
            }
            function conforms(source) {
              return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }
            function constant(value) {
              return function() {
                return value;
              };
            }
            function defaultTo(value, defaultValue) {
              return value == null || value !== value ? defaultValue : value;
            }
            var flow = createFlow();
            var flowRight = createFlow(true);
            function identity(value) {
              return value;
            }
            function iteratee(func) {
              return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
            }
            function matches(source) {
              return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }
            function matchesProperty(path, srcValue) {
              return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
            }
            var method = baseRest(function(path, args) {
              return function(object) {
                return baseInvoke(object, path, args);
              };
            });
            var methodOf = baseRest(function(object, args) {
              return function(path) {
                return baseInvoke(object, path, args);
              };
            });
            function mixin(object, source, options) {
              var props = keys(source), methodNames = baseFunctions(source, props);
              if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
              }
              var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
              arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                  object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain2 || chainAll) {
                      var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                      actions.push({ "func": func, "args": arguments, "thisArg": object });
                      result2.__chain__ = chainAll;
                      return result2;
                    }
                    return func.apply(object, arrayPush([this.value()], arguments));
                  };
                }
              });
              return object;
            }
            function noConflict() {
              if (root2._ === this) {
                root2._ = oldDash;
              }
              return this;
            }
            function noop() {
            }
            function nthArg(n) {
              n = toInteger2(n);
              return baseRest(function(args) {
                return baseNth(args, n);
              });
            }
            var over = createOver(arrayMap);
            var overEvery = createOver(arrayEvery);
            var overSome = createOver(arraySome);
            function property(path) {
              return isKey2(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }
            function propertyOf(object) {
              return function(path) {
                return object == null ? undefined$1 : baseGet2(object, path);
              };
            }
            var range = createRange();
            var rangeRight = createRange(true);
            function stubArray() {
              return [];
            }
            function stubFalse() {
              return false;
            }
            function stubObject() {
              return {};
            }
            function stubString() {
              return "";
            }
            function stubTrue() {
              return true;
            }
            function times(n, iteratee2) {
              n = toInteger2(n);
              if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
              }
              var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
              iteratee2 = getIteratee(iteratee2);
              n -= MAX_ARRAY_LENGTH;
              var result2 = baseTimes(length, iteratee2);
              while (++index < n) {
                iteratee2(index);
              }
              return result2;
            }
            function toPath(value) {
              if (isArray(value)) {
                return arrayMap(value, toKey);
              }
              return isSymbol(value) ? [value] : copyArray(stringToPath2(toString(value)));
            }
            function uniqueId(prefix) {
              var id = ++idCounter;
              return toString(prefix) + id;
            }
            var add = createMathOperation(function(augend, addend) {
              return augend + addend;
            }, 0);
            var ceil = createRound("ceil");
            var divide = createMathOperation(function(dividend, divisor) {
              return dividend / divisor;
            }, 1);
            var floor = createRound("floor");
            function max(array) {
              return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
            }
            function maxBy(array, iteratee2) {
              return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined$1;
            }
            function mean(array) {
              return baseMean(array, identity);
            }
            function meanBy(array, iteratee2) {
              return baseMean(array, getIteratee(iteratee2, 2));
            }
            function min(array) {
              return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
            }
            function minBy(array, iteratee2) {
              return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined$1;
            }
            var multiply = createMathOperation(function(multiplier, multiplicand) {
              return multiplier * multiplicand;
            }, 1);
            var round = createRound("round");
            var subtract = createMathOperation(function(minuend, subtrahend) {
              return minuend - subtrahend;
            }, 0);
            function sum(array) {
              return array && array.length ? baseSum(array, identity) : 0;
            }
            function sumBy(array, iteratee2) {
              return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
            }
            lodash2.after = after;
            lodash2.ary = ary;
            lodash2.assign = assign;
            lodash2.assignIn = assignIn;
            lodash2.assignInWith = assignInWith;
            lodash2.assignWith = assignWith;
            lodash2.at = at;
            lodash2.before = before;
            lodash2.bind = bind;
            lodash2.bindAll = bindAll;
            lodash2.bindKey = bindKey;
            lodash2.castArray = castArray;
            lodash2.chain = chain;
            lodash2.chunk = chunk;
            lodash2.compact = compact2;
            lodash2.concat = concat;
            lodash2.cond = cond;
            lodash2.conforms = conforms;
            lodash2.constant = constant;
            lodash2.countBy = countBy;
            lodash2.create = create;
            lodash2.curry = curry;
            lodash2.curryRight = curryRight;
            lodash2.debounce = debounce;
            lodash2.defaults = defaults;
            lodash2.defaultsDeep = defaultsDeep;
            lodash2.defer = defer;
            lodash2.delay = delay;
            lodash2.difference = difference;
            lodash2.differenceBy = differenceBy;
            lodash2.differenceWith = differenceWith;
            lodash2.drop = drop;
            lodash2.dropRight = dropRight;
            lodash2.dropRightWhile = dropRightWhile;
            lodash2.dropWhile = dropWhile;
            lodash2.fill = fill;
            lodash2.filter = filter;
            lodash2.flatMap = flatMap;
            lodash2.flatMapDeep = flatMapDeep;
            lodash2.flatMapDepth = flatMapDepth;
            lodash2.flatten = flatten;
            lodash2.flattenDeep = flattenDeep;
            lodash2.flattenDepth = flattenDepth;
            lodash2.flip = flip;
            lodash2.flow = flow;
            lodash2.flowRight = flowRight;
            lodash2.fromPairs = fromPairs;
            lodash2.functions = functions;
            lodash2.functionsIn = functionsIn;
            lodash2.groupBy = groupBy;
            lodash2.initial = initial;
            lodash2.intersection = intersection;
            lodash2.intersectionBy = intersectionBy;
            lodash2.intersectionWith = intersectionWith;
            lodash2.invert = invert;
            lodash2.invertBy = invertBy;
            lodash2.invokeMap = invokeMap;
            lodash2.iteratee = iteratee;
            lodash2.keyBy = keyBy;
            lodash2.keys = keys;
            lodash2.keysIn = keysIn;
            lodash2.map = map;
            lodash2.mapKeys = mapKeys;
            lodash2.mapValues = mapValues;
            lodash2.matches = matches;
            lodash2.matchesProperty = matchesProperty;
            lodash2.memoize = memoize2;
            lodash2.merge = merge;
            lodash2.mergeWith = mergeWith;
            lodash2.method = method;
            lodash2.methodOf = methodOf;
            lodash2.mixin = mixin;
            lodash2.negate = negate;
            lodash2.nthArg = nthArg;
            lodash2.omit = omit;
            lodash2.omitBy = omitBy;
            lodash2.once = once;
            lodash2.orderBy = orderBy;
            lodash2.over = over;
            lodash2.overArgs = overArgs;
            lodash2.overEvery = overEvery;
            lodash2.overSome = overSome;
            lodash2.partial = partial;
            lodash2.partialRight = partialRight;
            lodash2.partition = partition;
            lodash2.pick = pick;
            lodash2.pickBy = pickBy;
            lodash2.property = property;
            lodash2.propertyOf = propertyOf;
            lodash2.pull = pull;
            lodash2.pullAll = pullAll;
            lodash2.pullAllBy = pullAllBy;
            lodash2.pullAllWith = pullAllWith;
            lodash2.pullAt = pullAt;
            lodash2.range = range;
            lodash2.rangeRight = rangeRight;
            lodash2.rearg = rearg;
            lodash2.reject = reject;
            lodash2.remove = remove;
            lodash2.rest = rest;
            lodash2.reverse = reverse;
            lodash2.sampleSize = sampleSize;
            lodash2.set = set2;
            lodash2.setWith = setWith;
            lodash2.shuffle = shuffle;
            lodash2.slice = slice;
            lodash2.sortBy = sortBy;
            lodash2.sortedUniq = sortedUniq;
            lodash2.sortedUniqBy = sortedUniqBy;
            lodash2.split = split;
            lodash2.spread = spread;
            lodash2.tail = tail;
            lodash2.take = take;
            lodash2.takeRight = takeRight;
            lodash2.takeRightWhile = takeRightWhile;
            lodash2.takeWhile = takeWhile;
            lodash2.tap = tap;
            lodash2.throttle = throttle;
            lodash2.thru = thru;
            lodash2.toArray = toArray;
            lodash2.toPairs = toPairs;
            lodash2.toPairsIn = toPairsIn;
            lodash2.toPath = toPath;
            lodash2.toPlainObject = toPlainObject;
            lodash2.transform = transform;
            lodash2.unary = unary;
            lodash2.union = union;
            lodash2.unionBy = unionBy;
            lodash2.unionWith = unionWith;
            lodash2.uniq = uniq;
            lodash2.uniqBy = uniqBy;
            lodash2.uniqWith = uniqWith;
            lodash2.unset = unset2;
            lodash2.unzip = unzip;
            lodash2.unzipWith = unzipWith;
            lodash2.update = update;
            lodash2.updateWith = updateWith;
            lodash2.values = values;
            lodash2.valuesIn = valuesIn;
            lodash2.without = without;
            lodash2.words = words;
            lodash2.wrap = wrap;
            lodash2.xor = xor;
            lodash2.xorBy = xorBy;
            lodash2.xorWith = xorWith;
            lodash2.zip = zip;
            lodash2.zipObject = zipObject;
            lodash2.zipObjectDeep = zipObjectDeep;
            lodash2.zipWith = zipWith;
            lodash2.entries = toPairs;
            lodash2.entriesIn = toPairsIn;
            lodash2.extend = assignIn;
            lodash2.extendWith = assignInWith;
            mixin(lodash2, lodash2);
            lodash2.add = add;
            lodash2.attempt = attempt;
            lodash2.camelCase = camelCase;
            lodash2.capitalize = capitalize2;
            lodash2.ceil = ceil;
            lodash2.clamp = clamp;
            lodash2.clone = clone;
            lodash2.cloneDeep = cloneDeep;
            lodash2.cloneDeepWith = cloneDeepWith;
            lodash2.cloneWith = cloneWith;
            lodash2.conformsTo = conformsTo;
            lodash2.deburr = deburr;
            lodash2.defaultTo = defaultTo;
            lodash2.divide = divide;
            lodash2.endsWith = endsWith;
            lodash2.eq = eq2;
            lodash2.escape = escape;
            lodash2.escapeRegExp = escapeRegExp;
            lodash2.every = every;
            lodash2.find = find;
            lodash2.findIndex = findIndex2;
            lodash2.findKey = findKey2;
            lodash2.findLast = findLast;
            lodash2.findLastIndex = findLastIndex;
            lodash2.findLastKey = findLastKey;
            lodash2.floor = floor;
            lodash2.forEach = forEach;
            lodash2.forEachRight = forEachRight;
            lodash2.forIn = forIn;
            lodash2.forInRight = forInRight;
            lodash2.forOwn = forOwn;
            lodash2.forOwnRight = forOwnRight;
            lodash2.get = get2;
            lodash2.gt = gt;
            lodash2.gte = gte;
            lodash2.has = has2;
            lodash2.hasIn = hasIn;
            lodash2.head = head;
            lodash2.identity = identity;
            lodash2.includes = includes;
            lodash2.indexOf = indexOf;
            lodash2.inRange = inRange;
            lodash2.invoke = invoke;
            lodash2.isArguments = isArguments;
            lodash2.isArray = isArray;
            lodash2.isArrayBuffer = isArrayBuffer;
            lodash2.isArrayLike = isArrayLike;
            lodash2.isArrayLikeObject = isArrayLikeObject;
            lodash2.isBoolean = isBoolean2;
            lodash2.isBuffer = isBuffer2;
            lodash2.isDate = isDate2;
            lodash2.isElement = isElement2;
            lodash2.isEmpty = isEmpty2;
            lodash2.isEqual = isEqual2;
            lodash2.isEqualWith = isEqualWith;
            lodash2.isError = isError;
            lodash2.isFinite = isFinite;
            lodash2.isFunction = isFunction2;
            lodash2.isInteger = isInteger;
            lodash2.isLength = isLength;
            lodash2.isMap = isMap;
            lodash2.isMatch = isMatch;
            lodash2.isMatchWith = isMatchWith;
            lodash2.isNaN = isNaN2;
            lodash2.isNative = isNative;
            lodash2.isNil = isNil;
            lodash2.isNull = isNull;
            lodash2.isNumber = isNumber;
            lodash2.isObject = isObject2;
            lodash2.isObjectLike = isObjectLike;
            lodash2.isPlainObject = isPlainObject2;
            lodash2.isRegExp = isRegExp;
            lodash2.isSafeInteger = isSafeInteger;
            lodash2.isSet = isSet;
            lodash2.isString = isString2;
            lodash2.isSymbol = isSymbol;
            lodash2.isTypedArray = isTypedArray;
            lodash2.isUndefined = isUndefined2;
            lodash2.isWeakMap = isWeakMap;
            lodash2.isWeakSet = isWeakSet;
            lodash2.join = join;
            lodash2.kebabCase = kebabCase;
            lodash2.last = last;
            lodash2.lastIndexOf = lastIndexOf;
            lodash2.lowerCase = lowerCase;
            lodash2.lowerFirst = lowerFirst;
            lodash2.lt = lt;
            lodash2.lte = lte;
            lodash2.max = max;
            lodash2.maxBy = maxBy;
            lodash2.mean = mean;
            lodash2.meanBy = meanBy;
            lodash2.min = min;
            lodash2.minBy = minBy;
            lodash2.stubArray = stubArray;
            lodash2.stubFalse = stubFalse;
            lodash2.stubObject = stubObject;
            lodash2.stubString = stubString;
            lodash2.stubTrue = stubTrue;
            lodash2.multiply = multiply;
            lodash2.nth = nth;
            lodash2.noConflict = noConflict;
            lodash2.noop = noop;
            lodash2.now = now2;
            lodash2.pad = pad;
            lodash2.padEnd = padEnd;
            lodash2.padStart = padStart2;
            lodash2.parseInt = parseInt2;
            lodash2.random = random;
            lodash2.reduce = reduce;
            lodash2.reduceRight = reduceRight;
            lodash2.repeat = repeat;
            lodash2.replace = replace;
            lodash2.result = result;
            lodash2.round = round;
            lodash2.runInContext = runInContext2;
            lodash2.sample = sample;
            lodash2.size = size2;
            lodash2.snakeCase = snakeCase;
            lodash2.some = some;
            lodash2.sortedIndex = sortedIndex;
            lodash2.sortedIndexBy = sortedIndexBy;
            lodash2.sortedIndexOf = sortedIndexOf;
            lodash2.sortedLastIndex = sortedLastIndex;
            lodash2.sortedLastIndexBy = sortedLastIndexBy;
            lodash2.sortedLastIndexOf = sortedLastIndexOf;
            lodash2.startCase = startCase;
            lodash2.startsWith = startsWith;
            lodash2.subtract = subtract;
            lodash2.sum = sum;
            lodash2.sumBy = sumBy;
            lodash2.template = template;
            lodash2.times = times;
            lodash2.toFinite = toFinite;
            lodash2.toInteger = toInteger2;
            lodash2.toLength = toLength;
            lodash2.toLower = toLower;
            lodash2.toNumber = toNumber;
            lodash2.toSafeInteger = toSafeInteger;
            lodash2.toString = toString;
            lodash2.toUpper = toUpper;
            lodash2.trim = trim;
            lodash2.trimEnd = trimEnd;
            lodash2.trimStart = trimStart;
            lodash2.truncate = truncate;
            lodash2.unescape = unescape;
            lodash2.uniqueId = uniqueId;
            lodash2.upperCase = upperCase;
            lodash2.upperFirst = upperFirst;
            lodash2.each = forEach;
            lodash2.eachRight = forEachRight;
            lodash2.first = head;
            mixin(lodash2, function() {
              var source = {};
              baseForOwn(lodash2, function(func, methodName) {
                if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
                  source[methodName] = func;
                }
              });
              return source;
            }(), { "chain": false });
            lodash2.VERSION = VERSION;
            arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
              lodash2[methodName].placeholder = lodash2;
            });
            arrayEach(["drop", "take"], function(methodName, index) {
              LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined$1 ? 1 : nativeMax(toInteger2(n), 0);
                var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result2.__filtered__) {
                  result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
                } else {
                  result2.__views__.push({
                    "size": nativeMin(n, MAX_ARRAY_LENGTH),
                    "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                  });
                }
                return result2;
              };
              LazyWrapper.prototype[methodName + "Right"] = function(n) {
                return this.reverse()[methodName](n).reverse();
              };
            });
            arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
              var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
              LazyWrapper.prototype[methodName] = function(iteratee2) {
                var result2 = this.clone();
                result2.__iteratees__.push({
                  "iteratee": getIteratee(iteratee2, 3),
                  "type": type
                });
                result2.__filtered__ = result2.__filtered__ || isFilter;
                return result2;
              };
            });
            arrayEach(["head", "last"], function(methodName, index) {
              var takeName = "take" + (index ? "Right" : "");
              LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
              };
            });
            arrayEach(["initial", "tail"], function(methodName, index) {
              var dropName = "drop" + (index ? "" : "Right");
              LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
              };
            });
            LazyWrapper.prototype.compact = function() {
              return this.filter(identity);
            };
            LazyWrapper.prototype.find = function(predicate) {
              return this.filter(predicate).head();
            };
            LazyWrapper.prototype.findLast = function(predicate) {
              return this.reverse().find(predicate);
            };
            LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
              if (typeof path == "function") {
                return new LazyWrapper(this);
              }
              return this.map(function(value) {
                return baseInvoke(value, path, args);
              });
            });
            LazyWrapper.prototype.reject = function(predicate) {
              return this.filter(negate(getIteratee(predicate)));
            };
            LazyWrapper.prototype.slice = function(start, end) {
              start = toInteger2(start);
              var result2 = this;
              if (result2.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result2);
              }
              if (start < 0) {
                result2 = result2.takeRight(-start);
              } else if (start) {
                result2 = result2.drop(start);
              }
              if (end !== undefined$1) {
                end = toInteger2(end);
                result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
              }
              return result2;
            };
            LazyWrapper.prototype.takeRightWhile = function(predicate) {
              return this.reverse().takeWhile(predicate).reverse();
            };
            LazyWrapper.prototype.toArray = function() {
              return this.take(MAX_ARRAY_LENGTH);
            };
            baseForOwn(LazyWrapper.prototype, function(func, methodName) {
              var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
              if (!lodashFunc) {
                return;
              }
              lodash2.prototype[methodName] = function() {
                var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function(value2) {
                  var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
                  return isTaker && chainAll ? result3[0] : result3;
                };
                if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                  isLazy = useLazy = false;
                }
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                  value = onlyLazy ? value : new LazyWrapper(this);
                  var result2 = func.apply(value, args);
                  result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
                  return new LodashWrapper(result2, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                  return func.apply(this, args);
                }
                result2 = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
              };
            });
            arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
              var func = arrayProto2[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
              lodash2.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                  var value = this.value();
                  return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value2) {
                  return func.apply(isArray(value2) ? value2 : [], args);
                });
              };
            });
            baseForOwn(LazyWrapper.prototype, function(func, methodName) {
              var lodashFunc = lodash2[methodName];
              if (lodashFunc) {
                var key = lodashFunc.name + "";
                if (!hasOwnProperty2.call(realNames, key)) {
                  realNames[key] = [];
                }
                realNames[key].push({ "name": methodName, "func": lodashFunc });
              }
            });
            realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
              "name": "wrapper",
              "func": undefined$1
            }];
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;
            lodash2.prototype.at = wrapperAt;
            lodash2.prototype.chain = wrapperChain;
            lodash2.prototype.commit = wrapperCommit;
            lodash2.prototype.next = wrapperNext;
            lodash2.prototype.plant = wrapperPlant;
            lodash2.prototype.reverse = wrapperReverse;
            lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
            lodash2.prototype.first = lodash2.prototype.head;
            if (symIterator) {
              lodash2.prototype[symIterator] = wrapperToIterator;
            }
            return lodash2;
          };
          var _ = runInContext();
          if (freeModule) {
            (freeModule.exports = _)._ = _;
            freeExports._ = _;
          } else {
            root2._ = _;
          }
        }).call(commonjsGlobal);
      })(lodash, lodash.exports);
      var RangeInput = function(_a) {
        var label = _a.label, onChange = _a.onChange, id = _a.id, sliderConfig = _a.sliderConfig, mandatory = _a.mandatory, touchTooltipLabel = _a.touchTooltipLabel, _b = _a.onTouched, onTouched = _b === void 0 ? lodash.exports.noop : _b, props = __rest(_a, ["label", "onChange", "id", "sliderConfig", "mandatory", "touchTooltipLabel", "onTouched"]);
        var display_marks = sliderConfig.display_marks, is_value_tooltip_on = sliderConfig.is_value_tooltip_on, max = sliderConfig.max, max_label = sliderConfig.max_label, min = sliderConfig.min, min_label = sliderConfig.min_label, show_min_max_values = sliderConfig.show_min_max_values, step_value = sliderConfig.step_value;
        var style = {
          "--awell-step": step_value,
          "--awell-min": min,
          "--awell-max": max,
          "--awell-min-max-value": show_min_max_values ? "counter(x)" : "",
          "--awell-thick-color": display_marks ? "var(--awell-neutralLight50)" : "transparent",
          position: "relative"
        };
        var hasInitialValue = props.value !== void 0;
        var _c = React__default["default"].useState(hasInitialValue ? props.value : ""), internalValue = _c[0], setInternalValue = _c[1];
        var _d = React__default["default"].useState(hasInitialValue), touched = _d[0], setTouched = _d[1];
        var _e = React__default["default"].useState({
          left: 0,
          top: 0
        }), tooltipPosition = _e[0], setTooltipPosition = _e[1];
        var tooltipRef = React__default["default"].useRef(null);
        var renderValueTooltip = function(value, left, top, touched2) {
          if (touched2 === void 0) {
            touched2 = false;
          }
          return jsxRuntime.exports.jsx("div", __assign({ ref: tooltipRef, id: "awell__slider_tooltip", className: classes$i.tooltip, style: { left, top, display: touched2 ? "block" : "none" } }, { children: value }));
        };
        var renderTouchTooltip = function() {
          if (touched) {
            return null;
          }
          return jsxRuntime.exports.jsx("div", __assign({ id: "awell__slider_touch_tooltip", className: classes$i.tooltip_touched }, { children: touchTooltipLabel !== null && touchTooltipLabel !== void 0 ? touchTooltipLabel : "Touch to select a value" }));
        };
        var handleValueChange = function(event) {
          setTouched(true);
          onTouched(true);
          setInternalValue(event.target.value);
          onChange(event);
        };
        React__default["default"].useEffect(function() {
          var MIDPOINT_PERCENTAGE = 0.5;
          var THUMB_WIDTH = 16;
          var TOP_POSITION_ADJUSTMENT = -30;
          if (touched === true && is_value_tooltip_on && tooltipRef.current) {
            var input = tooltipRef.current.closest(".".concat(classes$i.awell_range_input_wrapper));
            if (input) {
              var inputWidth = input.clientWidth;
              var range = max - min;
              var percentage = (parseInt(internalValue) - min) / range;
              var thumbPosition = (isNaN(percentage) ? MIDPOINT_PERCENTAGE : percentage) * (inputWidth - THUMB_WIDTH);
              var tooltipLeft = thumbPosition + THUMB_WIDTH / 2;
              var tooltipTop = TOP_POSITION_ADJUSTMENT;
              setTooltipPosition({
                left: tooltipLeft,
                top: tooltipTop
              });
            }
          }
        }, [internalValue, is_value_tooltip_on, max, min, touched]);
        return jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label, mandatory, id: "".concat(id, "-label") }), jsxRuntime.exports.jsxs("div", __assign({ className: classes$i.input_container }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$i.touch_tooltip_wrapper, "  ").concat(is_value_tooltip_on ? classes$i.with_value_tooltip : "") }, { children: renderTouchTooltip() })), jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$i.awell_range_input_wrapper, " ").concat(display_marks ? classes$i.with_marks : ""), style }, { children: [is_value_tooltip_on && renderValueTooltip(internalValue, tooltipPosition.left, tooltipPosition.top, touched), jsxRuntime.exports.jsx("input", __assign({}, props, { "data-testid": id, type: "range", id: "awell__slider_input", min, max, step: step_value, className: "".concat(classes$i.awell_range_input, " ").concat(touched ? classes$i.showThumb : classes$i.hideThumb), onChange: handleValueChange, onFocus: function(e) {
          if (!touched) {
            handleValueChange(e);
          } else {
            setTouched(true);
            onTouched(true);
          }
        }, "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": props.value || min, "aria-labelledby": "".concat(id, "-label") }))] })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$i.min_max_wrapper }, { children: [show_min_max_values && jsxRuntime.exports.jsxs("div", __assign({ className: classes$i.min_max_data_list, "data-testid": "".concat(id, "-datalist-values") }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$i.min, "aria-label": "Minimum value" }, { children: min })), jsxRuntime.exports.jsx("div", __assign({ className: classes$i.max, "aria-label": "Maximum value" }, { children: max }))] })), (!lodash.exports.isEmpty(min_label) || !lodash.exports.isEmpty(max_label)) && jsxRuntime.exports.jsxs("div", __assign({ className: classes$i.min_max_data_list, "data-testid": "".concat(id, "-datalist-labels") }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$i.min, "aria-label": "Minimum label" }, { children: min_label })), jsxRuntime.exports.jsx("div", __assign({ className: classes$i.max, "aria-label": "Maximum label" }, { children: max_label }))] }))] }))] }))] });
      };
      var classes$h = { "scroll_indicator_container": "awell__ScrollIndicator_scroll_indicator_container", "scroll_indicator_svg": "awell__ScrollIndicator_scroll_indicator_svg" };
      var ScrollIndicator = function() {
        return jsxRuntime.exports.jsx("div", __assign({ className: classes$h.scroll_indicator_container }, { children: jsxRuntime.exports.jsx("svg", __assign({ xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: "1.5", stroke: "currentColor", className: classes$h.scroll_indicator_svg }, { children: jsxRuntime.exports.jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 4.5v15m0 0l6.75-6.75M12 19.5l-6.75-6.75" }) })) }));
      };
      var classes$g = { "select_wrapper": "awell__select_select_wrapper", "select_input_wrapper": "awell__select_select_input_wrapper", "select_input": "awell__select_select_input", "pointer": "awell__select_pointer", "dropdown": "awell__select_dropdown", "dropdown_open": "awell__select_dropdown_open", "dropdown_scroll": "awell__select_dropdown_scroll", "option": "awell__select_option", "checkbox": "awell__select_checkbox", "no_options": "awell__select_no_options", "error": "awell__select_error", "badge": "awell__select_badge", "chevron": "awell__select_chevron", "open": "awell__select_open" };
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _assertThisInitialized(self2) {
        if (self2 === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self2;
      }
      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
          o2.__proto__ = p2;
          return o2;
        };
        return _setPrototypeOf(o, p);
      }
      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        _setPrototypeOf(subClass, superClass);
      }
      var safeIsNaN = Number.isNaN || function ponyfill(value) {
        return typeof value === "number" && value !== value;
      };
      function isEqual(first, second) {
        if (first === second) {
          return true;
        }
        if (safeIsNaN(first) && safeIsNaN(second)) {
          return true;
        }
        return false;
      }
      function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
          return false;
        }
        for (var i = 0; i < newInputs.length; i++) {
          if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
          }
        }
        return true;
      }
      function memoizeOne(resultFn, isEqual2) {
        if (isEqual2 === void 0) {
          isEqual2 = areInputsEqual;
        }
        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;
        function memoized() {
          var newArgs = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
          }
          if (calledOnce && lastThis === this && isEqual2(newArgs, lastArgs)) {
            return lastResult;
          }
          lastResult = resultFn.apply(this, newArgs);
          calledOnce = true;
          lastThis = this;
          lastArgs = newArgs;
          return lastResult;
        }
        return memoized;
      }
      var hasNativePerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      var now = hasNativePerformanceNow ? function() {
        return performance.now();
      } : function() {
        return Date.now();
      };
      function cancelTimeout(timeoutID) {
        cancelAnimationFrame(timeoutID.id);
      }
      function requestTimeout(callback, delay) {
        var start = now();
        function tick() {
          if (now() - start >= delay) {
            callback.call(null);
          } else {
            timeoutID.id = requestAnimationFrame(tick);
          }
        }
        var timeoutID = {
          id: requestAnimationFrame(tick)
        };
        return timeoutID;
      }
      var size = -1;
      function getScrollbarSize(recalculate) {
        if (recalculate === void 0) {
          recalculate = false;
        }
        if (size === -1 || recalculate) {
          var div = document.createElement("div");
          var style = div.style;
          style.width = "50px";
          style.height = "50px";
          style.overflow = "scroll";
          document.body.appendChild(div);
          size = div.offsetWidth - div.clientWidth;
          document.body.removeChild(div);
        }
        return size;
      }
      var cachedRTLResult = null;
      function getRTLOffsetType(recalculate) {
        if (recalculate === void 0) {
          recalculate = false;
        }
        if (cachedRTLResult === null || recalculate) {
          var outerDiv = document.createElement("div");
          var outerStyle = outerDiv.style;
          outerStyle.width = "50px";
          outerStyle.height = "50px";
          outerStyle.overflow = "scroll";
          outerStyle.direction = "rtl";
          var innerDiv = document.createElement("div");
          var innerStyle = innerDiv.style;
          innerStyle.width = "100px";
          innerStyle.height = "100px";
          outerDiv.appendChild(innerDiv);
          document.body.appendChild(outerDiv);
          if (outerDiv.scrollLeft > 0) {
            cachedRTLResult = "positive-descending";
          } else {
            outerDiv.scrollLeft = 1;
            if (outerDiv.scrollLeft === 0) {
              cachedRTLResult = "negative";
            } else {
              cachedRTLResult = "positive-ascending";
            }
          }
          document.body.removeChild(outerDiv);
          return cachedRTLResult;
        }
        return cachedRTLResult;
      }
      if (true) ;
      var IS_SCROLLING_DEBOUNCE_INTERVAL$1 = 150;
      var defaultItemKey$1 = function defaultItemKey(index, data) {
        return index;
      };
      var devWarningsDirection = null;
      var devWarningsTagName$1 = null;
      if (true) {
        if (typeof window !== "undefined" && typeof window.WeakSet !== "undefined") {
          devWarningsDirection = /* @__PURE__ */ new WeakSet();
          devWarningsTagName$1 = /* @__PURE__ */ new WeakSet();
        }
      }
      function createListComponent(_ref) {
        var _class;
        var getItemOffset = _ref.getItemOffset, getEstimatedTotalSize = _ref.getEstimatedTotalSize, getItemSize = _ref.getItemSize, getOffsetForIndexAndAlignment = _ref.getOffsetForIndexAndAlignment, getStartIndexForOffset = _ref.getStartIndexForOffset, getStopIndexForStartIndex = _ref.getStopIndexForStartIndex, initInstanceProps = _ref.initInstanceProps, shouldResetStyleCacheOnItemSizeChange = _ref.shouldResetStyleCacheOnItemSizeChange, validateProps = _ref.validateProps;
        return _class = function(_PureComponent) {
          _inheritsLoose(List, _PureComponent);
          function List(props) {
            var _this;
            _this = _PureComponent.call(this, props) || this;
            _this._instanceProps = initInstanceProps(_this.props, _assertThisInitialized(_this));
            _this._outerRef = void 0;
            _this._resetIsScrollingTimeoutId = null;
            _this.state = {
              instance: _assertThisInitialized(_this),
              isScrolling: false,
              scrollDirection: "forward",
              scrollOffset: typeof _this.props.initialScrollOffset === "number" ? _this.props.initialScrollOffset : 0,
              scrollUpdateWasRequested: false
            };
            _this._callOnItemsRendered = void 0;
            _this._callOnItemsRendered = memoizeOne(function(overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex) {
              return _this.props.onItemsRendered({
                overscanStartIndex,
                overscanStopIndex,
                visibleStartIndex,
                visibleStopIndex
              });
            });
            _this._callOnScroll = void 0;
            _this._callOnScroll = memoizeOne(function(scrollDirection, scrollOffset, scrollUpdateWasRequested) {
              return _this.props.onScroll({
                scrollDirection,
                scrollOffset,
                scrollUpdateWasRequested
              });
            });
            _this._getItemStyle = void 0;
            _this._getItemStyle = function(index) {
              var _this$props = _this.props, direction = _this$props.direction, itemSize = _this$props.itemSize, layout = _this$props.layout;
              var itemStyleCache = _this._getItemStyleCache(shouldResetStyleCacheOnItemSizeChange && itemSize, shouldResetStyleCacheOnItemSizeChange && layout, shouldResetStyleCacheOnItemSizeChange && direction);
              var style;
              if (itemStyleCache.hasOwnProperty(index)) {
                style = itemStyleCache[index];
              } else {
                var _offset = getItemOffset(_this.props, index, _this._instanceProps);
                var size2 = getItemSize(_this.props, index, _this._instanceProps);
                var isHorizontal = direction === "horizontal" || layout === "horizontal";
                var isRtl = direction === "rtl";
                var offsetHorizontal = isHorizontal ? _offset : 0;
                itemStyleCache[index] = style = {
                  position: "absolute",
                  left: isRtl ? void 0 : offsetHorizontal,
                  right: isRtl ? offsetHorizontal : void 0,
                  top: !isHorizontal ? _offset : 0,
                  height: !isHorizontal ? size2 : "100%",
                  width: isHorizontal ? size2 : "100%"
                };
              }
              return style;
            };
            _this._getItemStyleCache = void 0;
            _this._getItemStyleCache = memoizeOne(function(_, __, ___) {
              return {};
            });
            _this._onScrollHorizontal = function(event) {
              var _event$currentTarget = event.currentTarget, clientWidth = _event$currentTarget.clientWidth, scrollLeft = _event$currentTarget.scrollLeft, scrollWidth = _event$currentTarget.scrollWidth;
              _this.setState(function(prevState) {
                if (prevState.scrollOffset === scrollLeft) {
                  return null;
                }
                var direction = _this.props.direction;
                var scrollOffset = scrollLeft;
                if (direction === "rtl") {
                  switch (getRTLOffsetType()) {
                    case "negative":
                      scrollOffset = -scrollLeft;
                      break;
                    case "positive-descending":
                      scrollOffset = scrollWidth - clientWidth - scrollLeft;
                      break;
                  }
                }
                scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
                return {
                  isScrolling: true,
                  scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                  scrollOffset,
                  scrollUpdateWasRequested: false
                };
              }, _this._resetIsScrollingDebounced);
            };
            _this._onScrollVertical = function(event) {
              var _event$currentTarget2 = event.currentTarget, clientHeight = _event$currentTarget2.clientHeight, scrollHeight = _event$currentTarget2.scrollHeight, scrollTop = _event$currentTarget2.scrollTop;
              _this.setState(function(prevState) {
                if (prevState.scrollOffset === scrollTop) {
                  return null;
                }
                var scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
                return {
                  isScrolling: true,
                  scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                  scrollOffset,
                  scrollUpdateWasRequested: false
                };
              }, _this._resetIsScrollingDebounced);
            };
            _this._outerRefSetter = function(ref) {
              var outerRef = _this.props.outerRef;
              _this._outerRef = ref;
              if (typeof outerRef === "function") {
                outerRef(ref);
              } else if (outerRef != null && typeof outerRef === "object" && outerRef.hasOwnProperty("current")) {
                outerRef.current = ref;
              }
            };
            _this._resetIsScrollingDebounced = function() {
              if (_this._resetIsScrollingTimeoutId !== null) {
                cancelTimeout(_this._resetIsScrollingTimeoutId);
              }
              _this._resetIsScrollingTimeoutId = requestTimeout(_this._resetIsScrolling, IS_SCROLLING_DEBOUNCE_INTERVAL$1);
            };
            _this._resetIsScrolling = function() {
              _this._resetIsScrollingTimeoutId = null;
              _this.setState(
                {
                  isScrolling: false
                },
                function() {
                  _this._getItemStyleCache(-1, null);
                }
              );
            };
            return _this;
          }
          List.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
            validateSharedProps$1(nextProps, prevState);
            validateProps(nextProps);
            return null;
          };
          var _proto = List.prototype;
          _proto.scrollTo = function scrollTo(scrollOffset) {
            scrollOffset = Math.max(0, scrollOffset);
            this.setState(function(prevState) {
              if (prevState.scrollOffset === scrollOffset) {
                return null;
              }
              return {
                scrollDirection: prevState.scrollOffset < scrollOffset ? "forward" : "backward",
                scrollOffset,
                scrollUpdateWasRequested: true
              };
            }, this._resetIsScrollingDebounced);
          };
          _proto.scrollToItem = function scrollToItem(index, align) {
            if (align === void 0) {
              align = "auto";
            }
            var _this$props2 = this.props, itemCount = _this$props2.itemCount, layout = _this$props2.layout;
            var scrollOffset = this.state.scrollOffset;
            index = Math.max(0, Math.min(index, itemCount - 1));
            var scrollbarSize = 0;
            if (this._outerRef) {
              var outerRef = this._outerRef;
              if (layout === "vertical") {
                scrollbarSize = outerRef.scrollWidth > outerRef.clientWidth ? getScrollbarSize() : 0;
              } else {
                scrollbarSize = outerRef.scrollHeight > outerRef.clientHeight ? getScrollbarSize() : 0;
              }
            }
            this.scrollTo(getOffsetForIndexAndAlignment(this.props, index, align, scrollOffset, this._instanceProps, scrollbarSize));
          };
          _proto.componentDidMount = function componentDidMount() {
            var _this$props3 = this.props, direction = _this$props3.direction, initialScrollOffset = _this$props3.initialScrollOffset, layout = _this$props3.layout;
            if (typeof initialScrollOffset === "number" && this._outerRef != null) {
              var outerRef = this._outerRef;
              if (direction === "horizontal" || layout === "horizontal") {
                outerRef.scrollLeft = initialScrollOffset;
              } else {
                outerRef.scrollTop = initialScrollOffset;
              }
            }
            this._callPropsCallbacks();
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            var _this$props4 = this.props, direction = _this$props4.direction, layout = _this$props4.layout;
            var _this$state = this.state, scrollOffset = _this$state.scrollOffset, scrollUpdateWasRequested = _this$state.scrollUpdateWasRequested;
            if (scrollUpdateWasRequested && this._outerRef != null) {
              var outerRef = this._outerRef;
              if (direction === "horizontal" || layout === "horizontal") {
                if (direction === "rtl") {
                  switch (getRTLOffsetType()) {
                    case "negative":
                      outerRef.scrollLeft = -scrollOffset;
                      break;
                    case "positive-ascending":
                      outerRef.scrollLeft = scrollOffset;
                      break;
                    default:
                      var clientWidth = outerRef.clientWidth, scrollWidth = outerRef.scrollWidth;
                      outerRef.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                      break;
                  }
                } else {
                  outerRef.scrollLeft = scrollOffset;
                }
              } else {
                outerRef.scrollTop = scrollOffset;
              }
            }
            this._callPropsCallbacks();
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            if (this._resetIsScrollingTimeoutId !== null) {
              cancelTimeout(this._resetIsScrollingTimeoutId);
            }
          };
          _proto.render = function render() {
            var _this$props5 = this.props, children = _this$props5.children, className2 = _this$props5.className, direction = _this$props5.direction, height = _this$props5.height, innerRef = _this$props5.innerRef, innerElementType = _this$props5.innerElementType, innerTagName = _this$props5.innerTagName, itemCount = _this$props5.itemCount, itemData = _this$props5.itemData, _this$props5$itemKey = _this$props5.itemKey, itemKey = _this$props5$itemKey === void 0 ? defaultItemKey$1 : _this$props5$itemKey, layout = _this$props5.layout, outerElementType = _this$props5.outerElementType, outerTagName = _this$props5.outerTagName, style = _this$props5.style, useIsScrolling = _this$props5.useIsScrolling, width = _this$props5.width;
            var isScrolling = this.state.isScrolling;
            var isHorizontal = direction === "horizontal" || layout === "horizontal";
            var onScroll = isHorizontal ? this._onScrollHorizontal : this._onScrollVertical;
            var _this$_getRangeToRend = this._getRangeToRender(), startIndex = _this$_getRangeToRend[0], stopIndex = _this$_getRangeToRend[1];
            var items = [];
            if (itemCount > 0) {
              for (var _index = startIndex; _index <= stopIndex; _index++) {
                items.push(React.createElement(children, {
                  data: itemData,
                  key: itemKey(_index, itemData),
                  index: _index,
                  isScrolling: useIsScrolling ? isScrolling : void 0,
                  style: this._getItemStyle(_index)
                }));
              }
            }
            var estimatedTotalSize = getEstimatedTotalSize(this.props, this._instanceProps);
            return React.createElement(
              outerElementType || outerTagName || "div",
              {
                className: className2,
                onScroll,
                ref: this._outerRefSetter,
                style: _extends(
                  {
                    position: "relative",
                    height,
                    width,
                    overflow: "auto",
                    WebkitOverflowScrolling: "touch",
                    willChange: "transform",
                    direction
                  },
                  style
                )
              },
              React.createElement(innerElementType || innerTagName || "div", {
                children: items,
                ref: innerRef,
                style: {
                  height: isHorizontal ? "100%" : estimatedTotalSize,
                  pointerEvents: isScrolling ? "none" : void 0,
                  width: isHorizontal ? estimatedTotalSize : "100%"
                }
              })
            );
          };
          _proto._callPropsCallbacks = function _callPropsCallbacks() {
            if (typeof this.props.onItemsRendered === "function") {
              var itemCount = this.props.itemCount;
              if (itemCount > 0) {
                var _this$_getRangeToRend2 = this._getRangeToRender(), _overscanStartIndex = _this$_getRangeToRend2[0], _overscanStopIndex = _this$_getRangeToRend2[1], _visibleStartIndex = _this$_getRangeToRend2[2], _visibleStopIndex = _this$_getRangeToRend2[3];
                this._callOnItemsRendered(_overscanStartIndex, _overscanStopIndex, _visibleStartIndex, _visibleStopIndex);
              }
            }
            if (typeof this.props.onScroll === "function") {
              var _this$state2 = this.state, _scrollDirection = _this$state2.scrollDirection, _scrollOffset = _this$state2.scrollOffset, _scrollUpdateWasRequested = _this$state2.scrollUpdateWasRequested;
              this._callOnScroll(_scrollDirection, _scrollOffset, _scrollUpdateWasRequested);
            }
          };
          _proto._getRangeToRender = function _getRangeToRender() {
            var _this$props6 = this.props, itemCount = _this$props6.itemCount, overscanCount = _this$props6.overscanCount;
            var _this$state3 = this.state, isScrolling = _this$state3.isScrolling, scrollDirection = _this$state3.scrollDirection, scrollOffset = _this$state3.scrollOffset;
            if (itemCount === 0) {
              return [0, 0, 0, 0];
            }
            var startIndex = getStartIndexForOffset(this.props, scrollOffset, this._instanceProps);
            var stopIndex = getStopIndexForStartIndex(this.props, startIndex, scrollOffset, this._instanceProps);
            var overscanBackward = !isScrolling || scrollDirection === "backward" ? Math.max(1, overscanCount) : 1;
            var overscanForward = !isScrolling || scrollDirection === "forward" ? Math.max(1, overscanCount) : 1;
            return [Math.max(0, startIndex - overscanBackward), Math.max(0, Math.min(itemCount - 1, stopIndex + overscanForward)), startIndex, stopIndex];
          };
          return List;
        }(React.PureComponent), _class.defaultProps = {
          direction: "ltr",
          itemData: void 0,
          layout: "vertical",
          overscanCount: 2,
          useIsScrolling: false
        }, _class;
      }
      var validateSharedProps$1 = function validateSharedProps(_ref2, _ref3) {
        var children = _ref2.children, direction = _ref2.direction, height = _ref2.height, layout = _ref2.layout, innerTagName = _ref2.innerTagName, outerTagName = _ref2.outerTagName, width = _ref2.width;
        var instance = _ref3.instance;
        if (true) {
          if (innerTagName != null || outerTagName != null) {
            if (devWarningsTagName$1 && !devWarningsTagName$1.has(instance)) {
              devWarningsTagName$1.add(instance);
              console.warn("The innerTagName and outerTagName props have been deprecated. Please use the innerElementType and outerElementType props instead.");
            }
          }
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          switch (direction) {
            case "horizontal":
            case "vertical":
              if (devWarningsDirection && !devWarningsDirection.has(instance)) {
                devWarningsDirection.add(instance);
                console.warn('The direction prop should be either "ltr" (default) or "rtl". Please use the layout prop to specify "vertical" (default) or "horizontal" orientation.');
              }
              break;
            case "ltr":
            case "rtl":
              break;
            default:
              throw Error('An invalid "direction" prop has been specified. Value should be either "ltr" or "rtl". ' + ('"' + direction + '" was specified.'));
          }
          switch (layout) {
            case "horizontal":
            case "vertical":
              break;
            default:
              throw Error('An invalid "layout" prop has been specified. Value should be either "horizontal" or "vertical". ' + ('"' + layout + '" was specified.'));
          }
          if (children == null) {
            throw Error('An invalid "children" prop has been specified. Value should be a React component. ' + ('"' + (children === null ? "null" : typeof children) + '" was specified.'));
          }
          if (isHorizontal && typeof width !== "number") {
            throw Error('An invalid "width" prop has been specified. Horizontal lists must specify a number for width. ' + ('"' + (width === null ? "null" : typeof width) + '" was specified.'));
          } else if (!isHorizontal && typeof height !== "number") {
            throw Error('An invalid "height" prop has been specified. Vertical lists must specify a number for height. ' + ('"' + (height === null ? "null" : typeof height) + '" was specified.'));
          }
        }
      };
      var FixedSizeList = createListComponent({
        getItemOffset: function getItemOffset(_ref, index) {
          var itemSize = _ref.itemSize;
          return index * itemSize;
        },
        getItemSize: function getItemSize(_ref2, index) {
          var itemSize = _ref2.itemSize;
          return itemSize;
        },
        getEstimatedTotalSize: function getEstimatedTotalSize(_ref3) {
          var itemCount = _ref3.itemCount, itemSize = _ref3.itemSize;
          return itemSize * itemCount;
        },
        getOffsetForIndexAndAlignment: function getOffsetForIndexAndAlignment(_ref4, index, align, scrollOffset, instanceProps, scrollbarSize) {
          var direction = _ref4.direction, height = _ref4.height, itemCount = _ref4.itemCount, itemSize = _ref4.itemSize, layout = _ref4.layout, width = _ref4.width;
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          var size2 = isHorizontal ? width : height;
          var lastItemOffset = Math.max(0, itemCount * itemSize - size2);
          var maxOffset = Math.min(lastItemOffset, index * itemSize);
          var minOffset = Math.max(0, index * itemSize - size2 + itemSize + scrollbarSize);
          if (align === "smart") {
            if (scrollOffset >= minOffset - size2 && scrollOffset <= maxOffset + size2) {
              align = "auto";
            } else {
              align = "center";
            }
          }
          switch (align) {
            case "start":
              return maxOffset;
            case "end":
              return minOffset;
            case "center": {
              var middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
              if (middleOffset < Math.ceil(size2 / 2)) {
                return 0;
              } else if (middleOffset > lastItemOffset + Math.floor(size2 / 2)) {
                return lastItemOffset;
              } else {
                return middleOffset;
              }
            }
            case "auto":
            default:
              if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
                return scrollOffset;
              } else if (scrollOffset < minOffset) {
                return minOffset;
              } else {
                return maxOffset;
              }
          }
        },
        getStartIndexForOffset: function getStartIndexForOffset(_ref5, offset) {
          var itemCount = _ref5.itemCount, itemSize = _ref5.itemSize;
          return Math.max(0, Math.min(itemCount - 1, Math.floor(offset / itemSize)));
        },
        getStopIndexForStartIndex: function getStopIndexForStartIndex(_ref6, startIndex, scrollOffset) {
          var direction = _ref6.direction, height = _ref6.height, itemCount = _ref6.itemCount, itemSize = _ref6.itemSize, layout = _ref6.layout, width = _ref6.width;
          var isHorizontal = direction === "horizontal" || layout === "horizontal";
          var offset = startIndex * itemSize;
          var size2 = isHorizontal ? width : height;
          var numVisibleItems = Math.ceil((size2 + scrollOffset - offset) / itemSize);
          return Math.max(0, Math.min(
            itemCount - 1,
            startIndex + numVisibleItems - 1
            // -1 is because stop index is inclusive
          ));
        },
        initInstanceProps: function initInstanceProps(props) {
        },
        shouldResetStyleCacheOnItemSizeChange: true,
        validateProps: function validateProps(_ref7) {
          var itemSize = _ref7.itemSize;
          if (true) {
            if (typeof itemSize !== "number") {
              throw Error('An invalid "itemSize" prop has been specified. Value should be a number. ' + ('"' + (itemSize === null ? "null" : typeof itemSize) + '" was specified.'));
            }
          }
        }
      });
      var truncateLabel = function(label, maxLength) {
        if (maxLength === void 0) {
          maxLength = 15;
        }
        if (maxLength === null) {
          return label;
        }
        if (label.length > maxLength) {
          return "".concat(label.slice(0, maxLength), "...");
        }
        return label;
      };
      var Select = function(_a) {
        var onChange = _a.onChange, onSearch = _a.onSearch, id = _a.id, labels = _a.labels, type = _a.type, mandatory = _a.mandatory, options = _a.options, _b = _a.optionsShown, optionsShown = _b === void 0 ? 4 : _b, _c = _a.showCount, showCount = _c === void 0 ? false : _c, _d = _a.displayMaxLength, displayMaxLength = _d === void 0 ? 15 : _d, value = _a.value, _e = _a.filtering, filtering = _e === void 0 ? false : _e, _f = _a.loading, loading = _f === void 0 ? false : _f, props = __rest(_a, ["onChange", "onSearch", "id", "labels", "type", "mandatory", "options", "optionsShown", "showCount", "displayMaxLength", "value", "filtering", "loading"]);
        var _g = React.useState(false), isOpen = _g[0], setIsOpen = _g[1];
        var _h = React.useState(options), filteredOptions = _h[0], setFilteredOptions = _h[1];
        var _j = React.useState(), searchValue = _j[0], setSearchValue = _j[1];
        var getInitialValue = function() {
          var _a2;
          if (value === void 0) {
            return [];
          }
          if (type === "multiple") {
            return value;
          }
          if (type === "single") {
            return [
              (_a2 = options.find(function(option) {
                return value === option.value;
              })) !== null && _a2 !== void 0 ? _a2 : void 0
            ].filter(function(option) {
              return option !== void 0;
            });
          }
          return [];
        };
        var _k = React.useState(getInitialValue()), selected = _k[0], setSelected = _k[1];
        var selectWrapperRef = React.useRef(null);
        var inputRef = React.useRef(null);
        var handleInputChange = function(event) {
          var _a2;
          var inputText = event.target.value.toLowerCase();
          if (!lodash.exports.isNil(onSearch)) {
            setSearchValue(inputText);
            onSearch(inputText);
            setIsOpen(true);
            (_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
            return;
          }
          if (inputText === "") {
            setSearchValue("");
            setFilteredOptions(options);
            return;
          }
          setSearchValue(inputText);
          var updatedFilteredOptions = options.filter(function(option) {
            return option.label.toLowerCase().includes(inputText);
          });
          setFilteredOptions(updatedFilteredOptions);
        };
        var handleClickOutside = React.useCallback(function(event) {
          if (selectWrapperRef.current && !selectWrapperRef.current.contains(event.target)) {
            setIsOpen(false);
          }
        }, [selectWrapperRef]);
        React.useEffect(function() {
          if (isOpen) {
            document.addEventListener("mousedown", handleClickOutside);
          } else {
            document.removeEventListener("mousedown", handleClickOutside);
          }
          return function() {
            document.removeEventListener("mousedown", handleClickOutside);
          };
        }, [isOpen, handleClickOutside]);
        React.useEffect(function() {
          if (!lodash.exports.isNil(onSearch) && options.length > 0) {
            setIsOpen(true);
            setFilteredOptions(options);
          }
        }, [options]);
        var toggleDropdown = React.useCallback(function() {
          setIsOpen(!isOpen);
        }, [isOpen]);
        var handleSelect = React.useCallback(function(event, option) {
          if (type === "single") {
            setSelected([option]);
            onChange(option.value);
            setIsOpen(false);
          } else {
            event.stopPropagation();
            var isSelected = selected.some(function(item) {
              return item.value === option.value;
            });
            var updatedSelected = void 0;
            if (isSelected) {
              updatedSelected = selected.filter(function(item) {
                return item.value !== option.value;
              }).sort();
            } else {
              updatedSelected = __spreadArray(__spreadArray([], selected, true), [option], false).sort();
            }
            setSelected(updatedSelected);
            onChange(updatedSelected);
          }
        }, [selected, type, onChange]);
        var rowRenderer = function(_a2) {
          var _b2;
          var index = _a2.index, style = _a2.style;
          var option = filteredOptions[index];
          return jsxRuntime.exports.jsxs("div", __assign({ className: classes$g.option, id: "option-".concat(option.value), style, onClick: function(event) {
            return handleSelect(event, option);
          }, onKeyUp: function(e) {
            return handleKeyUpOnOption(e, option);
          }, onKeyDown: function(e) {
            return handleKeyDownOnOption(e, option);
          }, role: "button", tabIndex: 0 }, { children: [option.label, type === "multiple" && jsxRuntime.exports.jsx("div", __assign({ className: classes$g.checkbox }, { children: jsxRuntime.exports.jsx("input", { type: "checkbox", id: "checkbox-".concat(option.value), checked: selected === null || selected === void 0 ? void 0 : selected.some(function(item) {
            return item.value === option.value;
          }), readOnly: true, tabIndex: -1 }) }))] }), (_b2 = option.id) !== null && _b2 !== void 0 ? _b2 : option.value);
        };
        var getDisplayValue = function() {
          var _a2, _b2;
          if (filtering && selected.length === 0) {
            return searchValue !== null && searchValue !== void 0 ? searchValue : "";
          }
          if (type === "single") {
            return (_b2 = (_a2 = selected[0]) === null || _a2 === void 0 ? void 0 : _a2.label) !== null && _b2 !== void 0 ? _b2 : "";
          }
          if (type === "multiple") {
            return selected.length > 0 ? selected.map(function(option) {
              return truncateLabel(option.label, displayMaxLength);
            }).join(", ") : "";
          }
          return "";
        };
        var handleKeyDownOnOption = React.useCallback(function(event, option) {
          if (event.code === "Space") {
            event.preventDefault();
            handleSelect(event, option);
          }
          if (event.key === "ArrowUp") {
            event.preventDefault();
            var index = filteredOptions.findIndex(function(item) {
              return item.value === option.value;
            });
            if (index > 0) {
              var previousOption = filteredOptions[index - 1];
              var previousOptionElement = document.getElementById("option-".concat(previousOption.value));
              if (previousOptionElement) {
                previousOptionElement.focus();
              }
            }
          }
          if (event.key === "ArrowDown") {
            event.preventDefault();
            var index = filteredOptions.findIndex(function(item) {
              return item.value === option.value;
            });
            if (index < filteredOptions.length - 1) {
              var nextOption = filteredOptions[index + 1];
              var nextOptionElement = document.getElementById("option-".concat(nextOption.value));
              if (nextOptionElement) {
                nextOptionElement.focus();
              }
            }
          }
        }, [filteredOptions, handleSelect]);
        var handleKeyUpOnOption = React.useCallback(function(event, option) {
          if (event.key === "Enter") {
            handleSelect(event, option);
          }
          if (event.key === "Escape") {
            setIsOpen(false);
          }
        }, [handleSelect]);
        var handleKeyUpOnInput = React.useCallback(function(event) {
          if (event.key === "Enter") {
            toggleDropdown();
          }
          if (event.key === "Escape") {
            setIsOpen(false);
          }
        }, [toggleDropdown]);
        var getPlaceholder = function(loading2) {
          var _a2, _b2;
          if (loading2) {
            return (_a2 = labels === null || labels === void 0 ? void 0 : labels.loading) !== null && _a2 !== void 0 ? _a2 : "Loading...";
          }
          return (_b2 = labels === null || labels === void 0 ? void 0 : labels.placeholder) !== null && _b2 !== void 0 ? _b2 : "Type to search or click to see options...";
        };
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$g.select_wrapper, ref: selectWrapperRef }, { children: [!lodash.exports.isNil(labels === null || labels === void 0 ? void 0 : labels.questionLabel) && jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label: labels.questionLabel, mandatory }), jsxRuntime.exports.jsxs("div", __assign({ className: classes$g.select_input_wrapper, onClick: toggleDropdown }, { children: [jsxRuntime.exports.jsx("input", __assign({}, props, { ref: inputRef, type: "text", id, value: getDisplayValue(), placeholder: getPlaceholder(loading), disabled: loading && filteredOptions.length === 0, className: "".concat(classes$g.select_input, " ").concat(filtering ? "" : classes$g.pointer), "data-testid": "input-".concat(id), onChange: filtering ? handleInputChange : lodash.exports.noop, readOnly: !filtering, onKeyUp: handleKeyUpOnInput, dir: "ltr" })), type === "multiple" && selected.length > 0 && showCount && jsxRuntime.exports.jsx("div", __assign({ className: classes$g.badge }, { children: selected.length })), jsxRuntime.exports.jsx("div", { className: "".concat(classes$g.chevron, " ").concat(isOpen ? "".concat(classes$g.open) : "") }), jsxRuntime.exports.jsx("div", __assign({ className: "".concat(isOpen ? classes$g.dropdown_open : classes$g.dropdown, " ").concat(options.length > optionsShown ? classes$g.dropdown_scroll : ""), role: "listbox" }, { children: filteredOptions.length === 0 ? jsxRuntime.exports.jsx("div", __assign({ className: classes$g.no_options }, { children: lodash.exports.isNil(searchValue) || searchValue.length === 0 ? labels.placeholder : labels.noOptions })) : jsxRuntime.exports.jsx(FixedSizeList, __assign({ height: Math.min(filteredOptions.length, 5) * 36, itemCount: filteredOptions.length, itemSize: 36, width: "100%" }, { children: rowRenderer })) }))] })), (labels === null || labels === void 0 ? void 0 : labels.customError) && jsxRuntime.exports.jsx("div", __assign({ className: classes$g.error }, { children: labels.customError }))] }));
      };
      var getHexColorFromString = function(string) {
        var regularExpression = /#(?:[0-9a-fA-F]{3}){1,2}/g;
        var extractedHexCodes = string.match(regularExpression);
        return (extractedHexCodes === null || extractedHexCodes === void 0 ? void 0 : extractedHexCodes[0]) || "";
      };
      var getTextColor = function(colorString) {
        var hexColor = getHexColorFromString(colorString);
        var r = parseInt(hexColor.substring(1, 3), 16);
        var g = parseInt(hexColor.substring(3, 5), 16);
        var b = parseInt(hexColor.substring(5, 7), 16);
        var yiq = (r * 299 + g * 587 + b * 114) / 1e3;
        return yiq >= 128 ? "#444" : "#fff";
      };
      var opacityColor = function(colorString, opacity) {
        var hexColor = getHexColorFromString(colorString);
        var R = parseInt(hexColor.substring(1, 3), 16);
        var G = parseInt(hexColor.substring(3, 5), 16);
        var B = parseInt(hexColor.substring(5, 7), 16);
        return "rgba(".concat(R, ", ").concat(G, ", ").concat(B, ", ").concat(opacity, ")");
      };
      var classes$f = { "awell_themeProvider": "awell__themeProvider_awell_themeProvider", "bold": "awell__themeProvider_bold", "strikethrough": "awell__themeProvider_strikethrough", "underline": "awell__themeProvider_underline", "italic": "awell__themeProvider_italic" };
      var defaultMode = "fullViewportHeight";
      var ThemeContext = React.createContext(void 0);
      var ThemeProvider = function(_a) {
        var children = _a.children, _b = _a.accentColor, accentColor = _b === void 0 ? "var(--awell-brand100, #004ac2)" : _b;
        var _c = React.useState(defaultMode), layoutMode = _c[0], setLayoutMode = _c[1];
        var style = {
          "--awell-accent-color": accentColor,
          "--awell-accent-text-color": getTextColor(accentColor),
          "--awell-accent-hover-color": opacityColor(accentColor, 0.9),
          "--awell-accent-ring-color-inputs": accentColor,
          "--awell-accent-ring-color-buttons": opacityColor(accentColor, 0.4),
          "--awell-secondary-color": opacityColor(accentColor, 0.2),
          "--awell-secondary-text-color": accentColor,
          "--awell-secondary-hover-color": opacityColor(accentColor, 0.3),
          "--awell-secondary-ring-color-inputs": accentColor,
          "--awell-secondary-ring-color-buttons": accentColor,
          height: "100%"
        };
        var updateLayoutMode = function(mode) {
          setLayoutMode(mode);
        };
        var resetLayoutMode = function() {
          setLayoutMode(defaultMode);
        };
        var contextValue = {
          accentColor,
          layoutMode,
          updateLayoutMode,
          resetLayoutMode
        };
        return jsxRuntime.exports.jsx(ThemeContext.Provider, __assign({ value: contextValue }, { children: jsxRuntime.exports.jsx("div", __assign({ className: classes$f.awell_themeProvider, style }, { children })) }));
      };
      var useTheme = function() {
        var context = React.useContext(ThemeContext);
        if (!context) {
          throw new Error("useTheme must be used within a ThemeProvider");
        }
        return context;
      };
      var classes$e = { "caret": "awell__typingCaret_caret" };
      var TypingCaret = function() {
        return jsxRuntime.exports.jsx("span", { "data-selector": "typingCarret", className: classes$e.caret });
      };
      var WithTypingCaret = function(_a) {
        var Component = _a.Component, children = _a.children, rest = __rest(_a, ["Component", "children"]);
        if (Component === "code" && (rest === null || rest === void 0 ? void 0 : rest.inline)) {
          rest = __assign(__assign({}, rest), { inline: "true" });
        }
        return jsxRuntime.exports.jsxs(Component, __assign({}, rest, { className: "markdown-node" }, { children: [children, jsxRuntime.exports.jsx(TypingCaret, {})] }));
      };
      var classes$d = { "awell_multiple_choice_question": "awell__multipleChoiceQuestion_awell_multiple_choice_question" };
      var MultipleChoiceQuestion = function(_a) {
        var questionId = _a.questionId, label = _a.label, _b = _a.options, options = _b === void 0 ? [] : _b, onChange = _a.onChange, _c = _a.values, values = _c === void 0 ? [] : _c, mandatory = _a.mandatory;
        var _d = React.useState(values), checkedOptions = _d[0], setCheckedOptions = _d[1];
        React.useEffect(function() {
          onChange(checkedOptions);
        }, [checkedOptions]);
        var handleSelectOption = function(event, option) {
          var newCheckedOptions = [];
          if (event.target.checked) {
            newCheckedOptions = __spreadArray(__spreadArray([], checkedOptions, true), [option], false);
          } else {
            newCheckedOptions = checkedOptions.filter(function(opt) {
              return option.id !== opt.id;
            });
          }
          setCheckedOptions(newCheckedOptions);
        };
        return jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx(QuestionLabel, { label, mandatory }), jsxRuntime.exports.jsx("fieldset", __assign({ className: classes$d.awell_multiple_choice_question }, { children: options.map(function(option) {
          return jsxRuntime.exports.jsx(CheckboxButton, { onChange: function(event) {
            return handleSelectOption(event, option);
          }, label: option.label, id: option.id, checked: checkedOptions.map(function(c) {
            return c.value;
          }).includes(option.value), name: questionId }, option.id);
        }) }))] });
      };
      var classes$c = { "awell_navbar": "awell__navbar_awell_navbar", "awell_navbar_keyboard_open": "awell__navbar_awell_navbar_keyboard_open" };
      var Navbar = function(_a) {
        var companyName = _a.companyName, logo = _a.logo;
        var _b = React__default["default"].useState(window.innerWidth), innerHeight = _b[0], setInnerHeight = _b[1];
        var originalHeight = React.useRef(window.innerHeight);
        var isHeightReduced = innerHeight < originalHeight.current * 0.8;
        React__default["default"].useEffect(function() {
          var handleResize = function() {
            if (window.innerHeight === innerHeight)
              return;
            setInnerHeight(window.innerHeight);
          };
          window.addEventListener("resize", handleResize);
          return function() {
            return window.removeEventListener("resize", handleResize);
          };
        }, []);
        return jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$c.awell_navbar, " ").concat(isHeightReduced ? classes$c.awell_navbar_keyboard_open : "") }, { children: isHeightReduced ? jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}) : jsxRuntime.exports.jsx(Logo, { logo, companyName }) }));
      };
      var isCheckBoxInput = (element) => element.type === "checkbox";
      var isDateObject = (value) => value instanceof Date;
      var isNullOrUndefined = (value) => value == null;
      const isObjectType = (value) => typeof value === "object";
      var isObject = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
      var getEventValue = (event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;
      var getNodeParentName = (name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name;
      var isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));
      var isPlainObject = (tempObject) => {
        const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
        return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
      };
      var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
      function cloneObject(data) {
        let copy;
        const isArray = Array.isArray(data);
        if (data instanceof Date) {
          copy = new Date(data);
        } else if (data instanceof Set) {
          copy = new Set(data);
        } else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) && (isArray || isObject(data))) {
          copy = isArray ? [] : {};
          if (!isArray && !isPlainObject(data)) {
            copy = data;
          } else {
            for (const key in data) {
              if (data.hasOwnProperty(key)) {
                copy[key] = cloneObject(data[key]);
              }
            }
          }
        } else {
          return data;
        }
        return copy;
      }
      var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
      var isUndefined = (val) => val === void 0;
      var get = (object, path, defaultValue) => {
        if (!path || !isObject(object)) {
          return defaultValue;
        }
        const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
        return isUndefined(result) || result === object ? isUndefined(object[path]) ? defaultValue : object[path] : result;
      };
      var isBoolean = (value) => typeof value === "boolean";
      var isKey = (value) => /^\w*$/.test(value);
      var stringToPath = (input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/));
      var set = (object, path, value) => {
        let index = -1;
        const tempPath = isKey(path) ? [path] : stringToPath(path);
        const length = tempPath.length;
        const lastIndex = length - 1;
        while (++index < length) {
          const key = tempPath[index];
          let newValue = value;
          if (index !== lastIndex) {
            const objValue = object[key];
            newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};
          }
          if (key === "__proto__") {
            return;
          }
          object[key] = newValue;
          object = object[key];
        }
        return object;
      };
      const EVENTS = {
        BLUR: "blur",
        FOCUS_OUT: "focusout",
        CHANGE: "change"
      };
      const VALIDATION_MODE = {
        onBlur: "onBlur",
        onChange: "onChange",
        onSubmit: "onSubmit",
        onTouched: "onTouched",
        all: "all"
      };
      const INPUT_VALIDATION_RULES = {
        max: "max",
        min: "min",
        maxLength: "maxLength",
        minLength: "minLength",
        pattern: "pattern",
        required: "required",
        validate: "validate"
      };
      const HookFormContext = React__default["default"].createContext(null);
      const useFormContext = () => React__default["default"].useContext(HookFormContext);
      var getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {
        const result = {
          defaultValues: control._defaultValues
        };
        for (const key in formState) {
          Object.defineProperty(result, key, {
            get: () => {
              const _key = key;
              if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
                control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
              }
              localProxyFormState && (localProxyFormState[_key] = true);
              return formState[_key];
            }
          });
        }
        return result;
      };
      var isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;
      var shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {
        updateFormState(formStateData);
        const { name, ...formState } = formStateData;
        return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
      };
      var convertToArrayPayload = (value) => Array.isArray(value) ? value : [value];
      var shouldSubscribeByName = (name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName)));
      function useSubscribe(props) {
        const _props = React__default["default"].useRef(props);
        _props.current = props;
        React__default["default"].useEffect(() => {
          const subscription = !props.disabled && _props.current.subject && _props.current.subject.subscribe({
            next: _props.current.next
          });
          return () => {
            subscription && subscription.unsubscribe();
          };
        }, [props.disabled]);
      }
      function useFormState(props) {
        const methods = useFormContext();
        const { control = methods.control, disabled, name, exact } = props || {};
        const [formState, updateFormState] = React__default["default"].useState(control._formState);
        const _mounted = React__default["default"].useRef(true);
        const _localProxyFormState = React__default["default"].useRef({
          isDirty: false,
          isLoading: false,
          dirtyFields: false,
          touchedFields: false,
          validatingFields: false,
          isValidating: false,
          isValid: false,
          errors: false
        });
        const _name = React__default["default"].useRef(name);
        _name.current = name;
        useSubscribe({
          disabled,
          next: (value) => _mounted.current && shouldSubscribeByName(_name.current, value.name, exact) && shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) && updateFormState({
            ...control._formState,
            ...value
          }),
          subject: control._subjects.state
        });
        React__default["default"].useEffect(() => {
          _mounted.current = true;
          _localProxyFormState.current.isValid && control._updateValid(true);
          return () => {
            _mounted.current = false;
          };
        }, [control]);
        return getProxyFormState(formState, control, _localProxyFormState.current, false);
      }
      var isString = (value) => typeof value === "string";
      var generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {
        if (isString(names)) {
          isGlobal && _names.watch.add(names);
          return get(formValues, names, defaultValue);
        }
        if (Array.isArray(names)) {
          return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
        }
        isGlobal && (_names.watchAll = true);
        return formValues;
      };
      function useWatch(props) {
        const methods = useFormContext();
        const { control = methods.control, name, defaultValue, disabled, exact } = props || {};
        const _name = React__default["default"].useRef(name);
        _name.current = name;
        useSubscribe({
          disabled,
          subject: control._subjects.values,
          next: (formState) => {
            if (shouldSubscribeByName(_name.current, formState.name, exact)) {
              updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));
            }
          }
        });
        const [value, updateValue] = React__default["default"].useState(control._getWatch(name, defaultValue));
        React__default["default"].useEffect(() => control._removeUnmounted());
        return value;
      }
      function useController(props) {
        const methods = useFormContext();
        const { name, disabled, control = methods.control, shouldUnregister } = props;
        const isArrayField = isNameInFieldArray(control._names.array, name);
        const value = useWatch({
          control,
          name,
          defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),
          exact: true
        });
        const formState = useFormState({
          control,
          name
        });
        const _registerProps = React__default["default"].useRef(control.register(name, {
          ...props.rules,
          value,
          ...isBoolean(props.disabled) ? { disabled: props.disabled } : {}
        }));
        React__default["default"].useEffect(() => {
          const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
          const updateMounted = (name2, value2) => {
            const field = get(control._fields, name2);
            if (field && field._f) {
              field._f.mount = value2;
            }
          };
          updateMounted(name, true);
          if (_shouldUnregisterField) {
            const value2 = cloneObject(get(control._options.defaultValues, name));
            set(control._defaultValues, name, value2);
            if (isUndefined(get(control._formValues, name))) {
              set(control._formValues, name, value2);
            }
          }
          return () => {
            (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
          };
        }, [name, control, isArrayField, shouldUnregister]);
        React__default["default"].useEffect(() => {
          if (get(control._fields, name)) {
            control._updateDisabledField({
              disabled,
              fields: control._fields,
              name,
              value: get(control._fields, name)._f.value
            });
          }
        }, [disabled, name, control]);
        return {
          field: {
            name,
            value,
            ...isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {},
            onChange: React__default["default"].useCallback(
              (event) => _registerProps.current.onChange({
                target: {
                  value: getEventValue(event),
                  name
                },
                type: EVENTS.CHANGE
              }),
              [name]
            ),
            onBlur: React__default["default"].useCallback(
              () => _registerProps.current.onBlur({
                target: {
                  value: get(control._formValues, name),
                  name
                },
                type: EVENTS.BLUR
              }),
              [name, control]
            ),
            ref: (elm) => {
              const field = get(control._fields, name);
              if (field && elm) {
                field._f.ref = {
                  focus: () => elm.focus(),
                  select: () => elm.select(),
                  setCustomValidity: (message) => elm.setCustomValidity(message),
                  reportValidity: () => elm.reportValidity()
                };
              }
            }
          },
          formState,
          fieldState: Object.defineProperties({}, {
            invalid: {
              enumerable: true,
              get: () => !!get(formState.errors, name)
            },
            isDirty: {
              enumerable: true,
              get: () => !!get(formState.dirtyFields, name)
            },
            isTouched: {
              enumerable: true,
              get: () => !!get(formState.touchedFields, name)
            },
            isValidating: {
              enumerable: true,
              get: () => !!get(formState.validatingFields, name)
            },
            error: {
              enumerable: true,
              get: () => get(formState.errors, name)
            }
          })
        };
      }
      const Controller = (props) => props.render(useController(props));
      var appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? {
        ...errors[name],
        types: {
          ...errors[name] && errors[name].types ? errors[name].types : {},
          [type]: message || true
        }
      } : {};
      var getValidationModes = (mode) => ({
        isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
        isOnBlur: mode === VALIDATION_MODE.onBlur,
        isOnChange: mode === VALIDATION_MODE.onChange,
        isOnAll: mode === VALIDATION_MODE.all,
        isOnTouch: mode === VALIDATION_MODE.onTouched
      });
      var isWatched = (name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length))));
      const iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {
        for (const key of fieldsNames || Object.keys(fields)) {
          const field = get(fields, key);
          if (field) {
            const { _f, ...currentField } = field;
            if (_f) {
              if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {
                break;
              } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {
                break;
              } else {
                iterateFieldsByAction(currentField, action);
              }
            } else if (isObject(currentField)) {
              iterateFieldsByAction(currentField, action);
            }
          }
        }
      };
      var updateFieldArrayRootError = (errors, error, name) => {
        const fieldArrayErrors = convertToArrayPayload(get(errors, name));
        set(fieldArrayErrors, "root", error[name]);
        set(errors, name, fieldArrayErrors);
        return errors;
      };
      var isFileInput = (element) => element.type === "file";
      var isFunction = (value) => typeof value === "function";
      var isHTMLElement = (value) => {
        if (!isWeb) {
          return false;
        }
        const owner = value ? value.ownerDocument : 0;
        return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
      };
      var isMessage = (value) => isString(value);
      var isRadioInput = (element) => element.type === "radio";
      var isRegex = (value) => value instanceof RegExp;
      const defaultResult = {
        value: false,
        isValid: false
      };
      const validResult = { value: true, isValid: true };
      var getCheckboxValue = (options) => {
        if (Array.isArray(options)) {
          if (options.length > 1) {
            const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
            return { value: values, isValid: !!values.length };
          }
          return options[0].checked && !options[0].disabled ? (
            // @ts-expect-error expected to work in the browser
            options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
          ) : defaultResult;
        }
        return defaultResult;
      };
      const defaultReturn = {
        isValid: false,
        value: null
      };
      var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
        isValid: true,
        value: option.value
      } : previous, defaultReturn) : defaultReturn;
      function getValidateError(result, ref, type = "validate") {
        if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
          return {
            type,
            message: isMessage(result) ? result : "",
            ref
          };
        }
      }
      var getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
        value: validationData,
        message: ""
      };
      var validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
        const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled } = field._f;
        const inputValue = get(formValues, name);
        if (!mount || disabled) {
          return {};
        }
        const inputRef = refs ? refs[0] : ref;
        const setCustomValidity = (message) => {
          if (shouldUseNativeValidation && inputRef.reportValidity) {
            inputRef.setCustomValidity(isBoolean(message) ? "" : message || "");
            inputRef.reportValidity();
          }
        };
        const error = {};
        const isRadio = isRadioInput(ref);
        const isCheckBox = isCheckBoxInput(ref);
        const isRadioOrCheckbox2 = isRadio || isCheckBox;
        const isEmpty2 = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
        const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
        const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
          const message = exceedMax ? maxLengthMessage : minLengthMessage;
          error[name] = {
            type: exceedMax ? maxType : minType,
            message,
            ref,
            ...appendErrorsCurry(exceedMax ? maxType : minType, message)
          };
        };
        if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty2 || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
          const { value, message } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
          if (value) {
            error[name] = {
              type: INPUT_VALIDATION_RULES.required,
              message,
              ref: inputRef,
              ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message)
            };
            if (!validateAllFieldCriteria) {
              setCustomValidity(message);
              return error;
            }
          }
        }
        if (!isEmpty2 && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {
          let exceedMax;
          let exceedMin;
          const maxOutput = getValueAndMessage(max);
          const minOutput = getValueAndMessage(min);
          if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
            const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
            if (!isNullOrUndefined(maxOutput.value)) {
              exceedMax = valueNumber > maxOutput.value;
            }
            if (!isNullOrUndefined(minOutput.value)) {
              exceedMin = valueNumber < minOutput.value;
            }
          } else {
            const valueDate = ref.valueAsDate || new Date(inputValue);
            const convertTimeToDate = (time) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time);
            const isTime = ref.type == "time";
            const isWeek = ref.type == "week";
            if (isString(maxOutput.value) && inputValue) {
              exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
            }
            if (isString(minOutput.value) && inputValue) {
              exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
            }
          }
          if (exceedMax || exceedMin) {
            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
            if (!validateAllFieldCriteria) {
              setCustomValidity(error[name].message);
              return error;
            }
          }
        }
        if ((maxLength || minLength) && !isEmpty2 && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
          const maxLengthOutput = getValueAndMessage(maxLength);
          const minLengthOutput = getValueAndMessage(minLength);
          const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
          const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
          if (exceedMax || exceedMin) {
            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
            if (!validateAllFieldCriteria) {
              setCustomValidity(error[name].message);
              return error;
            }
          }
        }
        if (pattern && !isEmpty2 && isString(inputValue)) {
          const { value: patternValue, message } = getValueAndMessage(pattern);
          if (isRegex(patternValue) && !inputValue.match(patternValue)) {
            error[name] = {
              type: INPUT_VALIDATION_RULES.pattern,
              message,
              ref,
              ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message)
            };
            if (!validateAllFieldCriteria) {
              setCustomValidity(message);
              return error;
            }
          }
        }
        if (validate) {
          if (isFunction(validate)) {
            const result = await validate(inputValue, formValues);
            const validateError = getValidateError(result, inputRef);
            if (validateError) {
              error[name] = {
                ...validateError,
                ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message)
              };
              if (!validateAllFieldCriteria) {
                setCustomValidity(validateError.message);
                return error;
              }
            }
          } else if (isObject(validate)) {
            let validationResult = {};
            for (const key in validate) {
              if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
                break;
              }
              const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
              if (validateError) {
                validationResult = {
                  ...validateError,
                  ...appendErrorsCurry(key, validateError.message)
                };
                setCustomValidity(validateError.message);
                if (validateAllFieldCriteria) {
                  error[name] = validationResult;
                }
              }
            }
            if (!isEmptyObject(validationResult)) {
              error[name] = {
                ref: inputRef,
                ...validationResult
              };
              if (!validateAllFieldCriteria) {
                return error;
              }
            }
          }
        }
        setCustomValidity(true);
        return error;
      };
      function baseGet(object, updatePath) {
        const length = updatePath.slice(0, -1).length;
        let index = 0;
        while (index < length) {
          object = isUndefined(object) ? index++ : object[updatePath[index++]];
        }
        return object;
      }
      function isEmptyArray(obj) {
        for (const key in obj) {
          if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
            return false;
          }
        }
        return true;
      }
      function unset(object, path) {
        const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
        const childObject = paths.length === 1 ? object : baseGet(object, paths);
        const index = paths.length - 1;
        const key = paths[index];
        if (childObject) {
          delete childObject[key];
        }
        if (index !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
          unset(object, paths.slice(0, -1));
        }
        return object;
      }
      var createSubject = () => {
        let _observers = [];
        const next = (value) => {
          for (const observer of _observers) {
            observer.next && observer.next(value);
          }
        };
        const subscribe = (observer) => {
          _observers.push(observer);
          return {
            unsubscribe: () => {
              _observers = _observers.filter((o) => o !== observer);
            }
          };
        };
        const unsubscribe = () => {
          _observers = [];
        };
        return {
          get observers() {
            return _observers;
          },
          next,
          subscribe,
          unsubscribe
        };
      };
      var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
      function deepEqual(object1, object2) {
        if (isPrimitive(object1) || isPrimitive(object2)) {
          return object1 === object2;
        }
        if (isDateObject(object1) && isDateObject(object2)) {
          return object1.getTime() === object2.getTime();
        }
        const keys1 = Object.keys(object1);
        const keys2 = Object.keys(object2);
        if (keys1.length !== keys2.length) {
          return false;
        }
        for (const key of keys1) {
          const val1 = object1[key];
          if (!keys2.includes(key)) {
            return false;
          }
          if (key !== "ref") {
            const val2 = object2[key];
            if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {
              return false;
            }
          }
        }
        return true;
      }
      var isMultipleSelect = (element) => element.type === `select-multiple`;
      var isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
      var live = (ref) => isHTMLElement(ref) && ref.isConnected;
      var objectHasFunction = (data) => {
        for (const key in data) {
          if (isFunction(data[key])) {
            return true;
          }
        }
        return false;
      };
      function markFieldsDirty(data, fields = {}) {
        const isParentNodeArray = Array.isArray(data);
        if (isObject(data) || isParentNodeArray) {
          for (const key in data) {
            if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
              fields[key] = Array.isArray(data[key]) ? [] : {};
              markFieldsDirty(data[key], fields[key]);
            } else if (!isNullOrUndefined(data[key])) {
              fields[key] = true;
            }
          }
        }
        return fields;
      }
      function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
        const isParentNodeArray = Array.isArray(data);
        if (isObject(data) || isParentNodeArray) {
          for (const key in data) {
            if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
              if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
                dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : { ...markFieldsDirty(data[key]) };
              } else {
                getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
              }
            } else {
              dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);
            }
          }
        }
        return dirtyFieldsFromValues;
      }
      var getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));
      var getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value;
      function getFieldValue(_f) {
        const ref = _f.ref;
        if (_f.refs ? _f.refs.every((ref2) => ref2.disabled) : ref.disabled) {
          return;
        }
        if (isFileInput(ref)) {
          return ref.files;
        }
        if (isRadioInput(ref)) {
          return getRadioValue(_f.refs).value;
        }
        if (isMultipleSelect(ref)) {
          return [...ref.selectedOptions].map(({ value }) => value);
        }
        if (isCheckBoxInput(ref)) {
          return getCheckboxValue(_f.refs).value;
        }
        return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);
      }
      var getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
        const fields = {};
        for (const name of fieldsNames) {
          const field = get(_fields, name);
          field && set(fields, name, field._f);
        }
        return {
          criteriaMode,
          names: [...fieldsNames],
          fields,
          shouldUseNativeValidation
        };
      };
      var getRuleValue = (rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule;
      var hasValidation = (options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);
      function schemaErrorLookup(errors, _fields, name) {
        const error = get(errors, name);
        if (error || isKey(name)) {
          return {
            error,
            name
          };
        }
        const names = name.split(".");
        while (names.length) {
          const fieldName = names.join(".");
          const field = get(_fields, fieldName);
          const foundError = get(errors, fieldName);
          if (field && !Array.isArray(field) && name !== fieldName) {
            return { name };
          }
          if (foundError && foundError.type) {
            return {
              name: fieldName,
              error: foundError
            };
          }
          names.pop();
        }
        return {
          name
        };
      }
      var skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
        if (mode.isOnAll) {
          return false;
        } else if (!isSubmitted && mode.isOnTouch) {
          return !(isTouched || isBlurEvent);
        } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
          return !isBlurEvent;
        } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
          return isBlurEvent;
        }
        return true;
      };
      var unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);
      const defaultOptions = {
        mode: VALIDATION_MODE.onSubmit,
        reValidateMode: VALIDATION_MODE.onChange,
        shouldFocusError: true
      };
      function createFormControl(props = {}) {
        let _options = {
          ...defaultOptions,
          ...props
        };
        let _formState = {
          submitCount: 0,
          isDirty: false,
          isLoading: isFunction(_options.defaultValues),
          isValidating: false,
          isSubmitted: false,
          isSubmitting: false,
          isSubmitSuccessful: false,
          isValid: false,
          touchedFields: {},
          dirtyFields: {},
          validatingFields: {},
          errors: _options.errors || {},
          disabled: _options.disabled || false
        };
        let _fields = {};
        let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values) ? cloneObject(_options.defaultValues || _options.values) || {} : {};
        let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
        let _state = {
          action: false,
          mount: false,
          watch: false
        };
        let _names = {
          mount: /* @__PURE__ */ new Set(),
          unMount: /* @__PURE__ */ new Set(),
          array: /* @__PURE__ */ new Set(),
          watch: /* @__PURE__ */ new Set()
        };
        let delayErrorCallback;
        let timer = 0;
        const _proxyFormState = {
          isDirty: false,
          dirtyFields: false,
          validatingFields: false,
          touchedFields: false,
          isValidating: false,
          isValid: false,
          errors: false
        };
        const _subjects = {
          values: createSubject(),
          array: createSubject(),
          state: createSubject()
        };
        const validationModeBeforeSubmit = getValidationModes(_options.mode);
        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
        const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
        const debounce = (callback) => (wait) => {
          clearTimeout(timer);
          timer = setTimeout(callback, wait);
        };
        const _updateValid = async (shouldUpdateValid) => {
          if (_proxyFormState.isValid || shouldUpdateValid) {
            const isValid2 = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuiltInValidation(_fields, true);
            if (isValid2 !== _formState.isValid) {
              _subjects.state.next({
                isValid: isValid2
              });
            }
          }
        };
        const _updateIsValidating = (names, isValidating) => {
          if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {
            (names || Array.from(_names.mount)).forEach((name) => {
              if (name) {
                isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
              }
            });
            _subjects.state.next({
              validatingFields: _formState.validatingFields,
              isValidating: !isEmptyObject(_formState.validatingFields)
            });
          }
        };
        const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
          if (args && method) {
            _state.action = true;
            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
              const fieldValues = method(get(_fields, name), args.argA, args.argB);
              shouldSetValues && set(_fields, name, fieldValues);
            }
            if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {
              const errors = method(get(_formState.errors, name), args.argA, args.argB);
              shouldSetValues && set(_formState.errors, name, errors);
              unsetEmptyArray(_formState.errors, name);
            }
            if (_proxyFormState.touchedFields && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {
              const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
              shouldSetValues && set(_formState.touchedFields, name, touchedFields);
            }
            if (_proxyFormState.dirtyFields) {
              _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
            }
            _subjects.state.next({
              name,
              isDirty: _getDirty(name, values),
              dirtyFields: _formState.dirtyFields,
              errors: _formState.errors,
              isValid: _formState.isValid
            });
          } else {
            set(_formValues, name, values);
          }
        };
        const updateErrors = (name, error) => {
          set(_formState.errors, name, error);
          _subjects.state.next({
            errors: _formState.errors
          });
        };
        const _setErrors = (errors) => {
          _formState.errors = errors;
          _subjects.state.next({
            errors: _formState.errors,
            isValid: false
          });
        };
        const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {
          const field = get(_fields, name);
          if (field) {
            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);
            isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);
            _state.mount && _updateValid();
          }
        };
        const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
          let shouldUpdateField = false;
          let isPreviousDirty = false;
          const output = {
            name
          };
          const disabledField = !!(get(_fields, name) && get(_fields, name)._f && get(_fields, name)._f.disabled);
          if (!isBlurEvent || shouldDirty) {
            if (_proxyFormState.isDirty) {
              isPreviousDirty = _formState.isDirty;
              _formState.isDirty = output.isDirty = _getDirty();
              shouldUpdateField = isPreviousDirty !== output.isDirty;
            }
            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);
            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));
            isCurrentFieldPristine || disabledField ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
            output.dirtyFields = _formState.dirtyFields;
            shouldUpdateField = shouldUpdateField || _proxyFormState.dirtyFields && isPreviousDirty !== !isCurrentFieldPristine;
          }
          if (isBlurEvent) {
            const isPreviousFieldTouched = get(_formState.touchedFields, name);
            if (!isPreviousFieldTouched) {
              set(_formState.touchedFields, name, isBlurEvent);
              output.touchedFields = _formState.touchedFields;
              shouldUpdateField = shouldUpdateField || _proxyFormState.touchedFields && isPreviousFieldTouched !== isBlurEvent;
            }
          }
          shouldUpdateField && shouldRender && _subjects.state.next(output);
          return shouldUpdateField ? output : {};
        };
        const shouldRenderByError = (name, isValid2, error, fieldState) => {
          const previousFieldError = get(_formState.errors, name);
          const shouldUpdateValid = _proxyFormState.isValid && isBoolean(isValid2) && _formState.isValid !== isValid2;
          if (props.delayError && error) {
            delayErrorCallback = debounce(() => updateErrors(name, error));
            delayErrorCallback(props.delayError);
          } else {
            clearTimeout(timer);
            delayErrorCallback = null;
            error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
          }
          if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
            const updatedFormState = {
              ...fieldState,
              ...shouldUpdateValid && isBoolean(isValid2) ? { isValid: isValid2 } : {},
              errors: _formState.errors,
              name
            };
            _formState = {
              ..._formState,
              ...updatedFormState
            };
            _subjects.state.next(updatedFormState);
          }
        };
        const _executeSchema = async (name) => {
          _updateIsValidating(name, true);
          const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
          _updateIsValidating(name);
          return result;
        };
        const executeSchemaAndUpdateState = async (names) => {
          const { errors } = await _executeSchema(names);
          if (names) {
            for (const name of names) {
              const error = get(errors, name);
              error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
            }
          } else {
            _formState.errors = errors;
          }
          return errors;
        };
        const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {
          valid: true
        }) => {
          for (const name in fields) {
            const field = fields[name];
            if (field) {
              const { _f, ...fieldValue } = field;
              if (_f) {
                const isFieldArrayRoot = _names.array.has(_f.name);
                _updateIsValidating([name], true);
                const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
                _updateIsValidating([name]);
                if (fieldError[_f.name]) {
                  context.valid = false;
                  if (shouldOnlyCheckValid) {
                    break;
                  }
                }
                !shouldOnlyCheckValid && (get(fieldError, _f.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name) : set(_formState.errors, _f.name, fieldError[_f.name]) : unset(_formState.errors, _f.name));
              }
              fieldValue && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
            }
          }
          return context.valid;
        };
        const _removeUnmounted = () => {
          for (const name of _names.unMount) {
            const field = get(_fields, name);
            field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
          }
          _names.unMount = /* @__PURE__ */ new Set();
        };
        const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));
        const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(
          names,
          _names,
          {
            ..._state.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? { [names]: defaultValue } : defaultValue
          },
          isGlobal,
          defaultValue
        );
        const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));
        const setFieldValue = (name, value, options = {}) => {
          const field = get(_fields, name);
          let fieldValue = value;
          if (field) {
            const fieldReference = field._f;
            if (fieldReference) {
              !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
              fieldValue = isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
              if (isMultipleSelect(fieldReference.ref)) {
                [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
              } else if (fieldReference.refs) {
                if (isCheckBoxInput(fieldReference.ref)) {
                  fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
                } else {
                  fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
                }
              } else if (isFileInput(fieldReference.ref)) {
                fieldReference.ref.value = "";
              } else {
                fieldReference.ref.value = fieldValue;
                if (!fieldReference.ref.type) {
                  _subjects.values.next({
                    name,
                    values: { ..._formValues }
                  });
                }
              }
            }
          }
          (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
          options.shouldValidate && trigger(name);
        };
        const setValues = (name, value, options) => {
          for (const fieldKey in value) {
            const fieldValue = value[fieldKey];
            const fieldName = `${name}.${fieldKey}`;
            const field = get(_fields, fieldName);
            (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
          }
        };
        const setValue = (name, value, options = {}) => {
          const field = get(_fields, name);
          const isFieldArray = _names.array.has(name);
          const cloneValue = cloneObject(value);
          set(_formValues, name, cloneValue);
          if (isFieldArray) {
            _subjects.array.next({
              name,
              values: { ..._formValues }
            });
            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {
              _subjects.state.next({
                name,
                dirtyFields: getDirtyFields(_defaultValues, _formValues),
                isDirty: _getDirty(name, cloneValue)
              });
            }
          } else {
            field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
          }
          isWatched(name, _names) && _subjects.state.next({ ..._formState });
          _subjects.values.next({
            name: _state.mount ? name : void 0,
            values: { ..._formValues }
          });
        };
        const onChange = async (event) => {
          _state.mount = true;
          const target = event.target;
          let name = target.name;
          let isFieldValueUpdated = true;
          const field = get(_fields, name);
          const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);
          const _updateIsFieldValueUpdated = (fieldValue) => {
            isFieldValueUpdated = Number.isNaN(fieldValue) || fieldValue === get(_formValues, name, fieldValue);
          };
          if (field) {
            let error;
            let isValid2;
            const fieldValue = getCurrentFieldValue();
            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
            const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
            const watched = isWatched(name, _names, isBlurEvent);
            set(_formValues, name, fieldValue);
            if (isBlurEvent) {
              field._f.onBlur && field._f.onBlur(event);
              delayErrorCallback && delayErrorCallback(0);
            } else if (field._f.onChange) {
              field._f.onChange(event);
            }
            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);
            const shouldRender = !isEmptyObject(fieldState) || watched;
            !isBlurEvent && _subjects.values.next({
              name,
              type: event.type,
              values: { ..._formValues }
            });
            if (shouldSkipValidation) {
              _proxyFormState.isValid && _updateValid();
              return shouldRender && _subjects.state.next({ name, ...watched ? {} : fieldState });
            }
            !isBlurEvent && watched && _subjects.state.next({ ..._formState });
            if (_options.resolver) {
              const { errors } = await _executeSchema([name]);
              _updateIsFieldValueUpdated(fieldValue);
              if (isFieldValueUpdated) {
                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
                error = errorLookupResult.error;
                name = errorLookupResult.name;
                isValid2 = isEmptyObject(errors);
              }
            } else {
              _updateIsValidating([name], true);
              error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
              _updateIsValidating([name]);
              _updateIsFieldValueUpdated(fieldValue);
              if (isFieldValueUpdated) {
                if (error) {
                  isValid2 = false;
                } else if (_proxyFormState.isValid) {
                  isValid2 = await executeBuiltInValidation(_fields, true);
                }
              }
            }
            if (isFieldValueUpdated) {
              field._f.deps && trigger(field._f.deps);
              shouldRenderByError(name, isValid2, error, fieldState);
            }
          }
        };
        const _focusInput = (ref, key) => {
          if (get(_formState.errors, key) && ref.focus) {
            ref.focus();
            return 1;
          }
          return;
        };
        const trigger = async (name, options = {}) => {
          let isValid2;
          let validationResult;
          const fieldNames = convertToArrayPayload(name);
          if (_options.resolver) {
            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
            isValid2 = isEmptyObject(errors);
            validationResult = name ? !fieldNames.some((name2) => get(errors, name2)) : isValid2;
          } else if (name) {
            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
              const field = get(_fields, fieldName);
              return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
            }))).every(Boolean);
            !(!validationResult && !_formState.isValid) && _updateValid();
          } else {
            validationResult = isValid2 = await executeBuiltInValidation(_fields);
          }
          _subjects.state.next({
            ...!isString(name) || _proxyFormState.isValid && isValid2 !== _formState.isValid ? {} : { name },
            ..._options.resolver || !name ? { isValid: isValid2 } : {},
            errors: _formState.errors
          });
          options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
          return validationResult;
        };
        const getValues = (fieldNames) => {
          const values = {
            ..._state.mount ? _formValues : _defaultValues
          };
          return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map((name) => get(values, name));
        };
        const getFieldState = (name, formState) => ({
          invalid: !!get((formState || _formState).errors, name),
          isDirty: !!get((formState || _formState).dirtyFields, name),
          error: get((formState || _formState).errors, name),
          isValidating: !!get(_formState.validatingFields, name),
          isTouched: !!get((formState || _formState).touchedFields, name)
        });
        const clearErrors = (name) => {
          name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
          _subjects.state.next({
            errors: name ? _formState.errors : {}
          });
        };
        const setError = (name, error, options) => {
          const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
          const currentError = get(_formState.errors, name) || {};
          const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;
          set(_formState.errors, name, {
            ...restOfErrorTree,
            ...error,
            ref
          });
          _subjects.state.next({
            name,
            errors: _formState.errors,
            isValid: false
          });
          options && options.shouldFocus && ref && ref.focus && ref.focus();
        };
        const watch = (name, defaultValue) => isFunction(name) ? _subjects.values.subscribe({
          next: (payload) => name(_getWatch(void 0, defaultValue), payload)
        }) : _getWatch(name, defaultValue, true);
        const unregister = (name, options = {}) => {
          for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
            _names.mount.delete(fieldName);
            _names.array.delete(fieldName);
            if (!options.keepValue) {
              unset(_fields, fieldName);
              unset(_formValues, fieldName);
            }
            !options.keepError && unset(_formState.errors, fieldName);
            !options.keepDirty && unset(_formState.dirtyFields, fieldName);
            !options.keepTouched && unset(_formState.touchedFields, fieldName);
            !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
            !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
          }
          _subjects.values.next({
            values: { ..._formValues }
          });
          _subjects.state.next({
            ..._formState,
            ...!options.keepDirty ? {} : { isDirty: _getDirty() }
          });
          !options.keepIsValid && _updateValid();
        };
        const _updateDisabledField = ({ disabled, name, field, fields, value }) => {
          if (isBoolean(disabled) && _state.mount || !!disabled) {
            const inputValue = disabled ? void 0 : isUndefined(value) ? getFieldValue(field ? field._f : get(fields, name)._f) : value;
            set(_formValues, name, inputValue);
            updateTouchAndDirty(name, inputValue, false, false, true);
          }
        };
        const register = (name, options = {}) => {
          let field = get(_fields, name);
          const disabledIsDefined = isBoolean(options.disabled);
          set(_fields, name, {
            ...field || {},
            _f: {
              ...field && field._f ? field._f : { ref: { name } },
              name,
              mount: true,
              ...options
            }
          });
          _names.mount.add(name);
          if (field) {
            _updateDisabledField({
              field,
              disabled: options.disabled,
              name,
              value: options.value
            });
          } else {
            updateValidAndValue(name, true, options.value);
          }
          return {
            ...disabledIsDefined ? { disabled: options.disabled } : {},
            ..._options.progressive ? {
              required: !!options.required,
              min: getRuleValue(options.min),
              max: getRuleValue(options.max),
              minLength: getRuleValue(options.minLength),
              maxLength: getRuleValue(options.maxLength),
              pattern: getRuleValue(options.pattern)
            } : {},
            name,
            onChange,
            onBlur: onChange,
            ref: (ref) => {
              if (ref) {
                register(name, options);
                field = get(_fields, name);
                const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
                const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
                const refs = field._f.refs || [];
                if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
                  return;
                }
                set(_fields, name, {
                  _f: {
                    ...field._f,
                    ...radioOrCheckbox ? {
                      refs: [
                        ...refs.filter(live),
                        fieldRef,
                        ...Array.isArray(get(_defaultValues, name)) ? [{}] : []
                      ],
                      ref: { type: fieldRef.type, name }
                    } : { ref: fieldRef }
                  }
                });
                updateValidAndValue(name, false, void 0, fieldRef);
              } else {
                field = get(_fields, name, {});
                if (field._f) {
                  field._f.mount = false;
                }
                (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
              }
            }
          };
        };
        const _focusError = () => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount);
        const _disableForm = (disabled) => {
          if (isBoolean(disabled)) {
            _subjects.state.next({ disabled });
            iterateFieldsByAction(_fields, (ref, name) => {
              const currentField = get(_fields, name);
              if (currentField) {
                ref.disabled = currentField._f.disabled || disabled;
                if (Array.isArray(currentField._f.refs)) {
                  currentField._f.refs.forEach((inputRef) => {
                    inputRef.disabled = currentField._f.disabled || disabled;
                  });
                }
              }
            }, 0, false);
          }
        };
        const handleSubmit = (onValid, onInvalid) => async (e) => {
          let onValidError = void 0;
          if (e) {
            e.preventDefault && e.preventDefault();
            e.persist && e.persist();
          }
          let fieldValues = cloneObject(_formValues);
          _subjects.state.next({
            isSubmitting: true
          });
          if (_options.resolver) {
            const { errors, values } = await _executeSchema();
            _formState.errors = errors;
            fieldValues = values;
          } else {
            await executeBuiltInValidation(_fields);
          }
          unset(_formState.errors, "root");
          if (isEmptyObject(_formState.errors)) {
            _subjects.state.next({
              errors: {}
            });
            try {
              await onValid(fieldValues, e);
            } catch (error) {
              onValidError = error;
            }
          } else {
            if (onInvalid) {
              await onInvalid({ ..._formState.errors }, e);
            }
            _focusError();
            setTimeout(_focusError);
          }
          _subjects.state.next({
            isSubmitted: true,
            isSubmitting: false,
            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
            submitCount: _formState.submitCount + 1,
            errors: _formState.errors
          });
          if (onValidError) {
            throw onValidError;
          }
        };
        const resetField = (name, options = {}) => {
          if (get(_fields, name)) {
            if (isUndefined(options.defaultValue)) {
              setValue(name, cloneObject(get(_defaultValues, name)));
            } else {
              setValue(name, options.defaultValue);
              set(_defaultValues, name, cloneObject(options.defaultValue));
            }
            if (!options.keepTouched) {
              unset(_formState.touchedFields, name);
            }
            if (!options.keepDirty) {
              unset(_formState.dirtyFields, name);
              _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get(_defaultValues, name))) : _getDirty();
            }
            if (!options.keepError) {
              unset(_formState.errors, name);
              _proxyFormState.isValid && _updateValid();
            }
            _subjects.state.next({ ..._formState });
          }
        };
        const _reset = (formValues, keepStateOptions = {}) => {
          const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
          const cloneUpdatedValues = cloneObject(updatedValues);
          const isEmptyResetValues = isEmptyObject(formValues);
          const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
          if (!keepStateOptions.keepDefaultValues) {
            _defaultValues = updatedValues;
          }
          if (!keepStateOptions.keepValues) {
            if (keepStateOptions.keepDirtyValues) {
              for (const fieldName of _names.mount) {
                get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));
              }
            } else {
              if (isWeb && isUndefined(formValues)) {
                for (const name of _names.mount) {
                  const field = get(_fields, name);
                  if (field && field._f) {
                    const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                    if (isHTMLElement(fieldReference)) {
                      const form = fieldReference.closest("form");
                      if (form) {
                        form.reset();
                        break;
                      }
                    }
                  }
                }
              }
              _fields = {};
            }
            _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneObject(values);
            _subjects.array.next({
              values: { ...values }
            });
            _subjects.values.next({
              values: { ...values }
            });
          }
          _names = {
            mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
            unMount: /* @__PURE__ */ new Set(),
            array: /* @__PURE__ */ new Set(),
            watch: /* @__PURE__ */ new Set(),
            watchAll: false,
            focus: ""
          };
          _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
          _state.watch = !!props.shouldUnregister;
          _subjects.state.next({
            submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
            isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual(formValues, _defaultValues)),
            isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
            dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
            touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
            errors: keepStateOptions.keepErrors ? _formState.errors : {},
            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
            isSubmitting: false
          });
        };
        const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions);
        const setFocus = (name, options = {}) => {
          const field = get(_fields, name);
          const fieldReference = field && field._f;
          if (fieldReference) {
            const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
            if (fieldRef.focus) {
              fieldRef.focus();
              options.shouldSelect && fieldRef.select();
            }
          }
        };
        const _updateFormState = (updatedFormState) => {
          _formState = {
            ..._formState,
            ...updatedFormState
          };
        };
        const _resetDefaultValues = () => isFunction(_options.defaultValues) && _options.defaultValues().then((values) => {
          reset(values, _options.resetOptions);
          _subjects.state.next({
            isLoading: false
          });
        });
        return {
          control: {
            register,
            unregister,
            getFieldState,
            handleSubmit,
            setError,
            _executeSchema,
            _getWatch,
            _getDirty,
            _updateValid,
            _removeUnmounted,
            _updateFieldArray,
            _updateDisabledField,
            _getFieldArray,
            _reset,
            _resetDefaultValues,
            _updateFormState,
            _disableForm,
            _subjects,
            _proxyFormState,
            _setErrors,
            get _fields() {
              return _fields;
            },
            get _formValues() {
              return _formValues;
            },
            get _state() {
              return _state;
            },
            set _state(value) {
              _state = value;
            },
            get _defaultValues() {
              return _defaultValues;
            },
            get _names() {
              return _names;
            },
            set _names(value) {
              _names = value;
            },
            get _formState() {
              return _formState;
            },
            set _formState(value) {
              _formState = value;
            },
            get _options() {
              return _options;
            },
            set _options(value) {
              _options = {
                ..._options,
                ...value
              };
            }
          },
          trigger,
          register,
          handleSubmit,
          watch,
          setValue,
          getValues,
          reset,
          resetField,
          clearErrors,
          unregister,
          setError,
          setFocus,
          getFieldState
        };
      }
      function useForm(props = {}) {
        const _formControl = React__default["default"].useRef();
        const _values = React__default["default"].useRef();
        const [formState, updateFormState] = React__default["default"].useState({
          isDirty: false,
          isValidating: false,
          isLoading: isFunction(props.defaultValues),
          isSubmitted: false,
          isSubmitting: false,
          isSubmitSuccessful: false,
          isValid: false,
          submitCount: 0,
          dirtyFields: {},
          touchedFields: {},
          validatingFields: {},
          errors: props.errors || {},
          disabled: props.disabled || false,
          defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
        });
        if (!_formControl.current) {
          _formControl.current = {
            ...createFormControl(props),
            formState
          };
        }
        const control = _formControl.current.control;
        control._options = props;
        useSubscribe({
          subject: control._subjects.state,
          next: (value) => {
            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {
              updateFormState({ ...control._formState });
            }
          }
        });
        React__default["default"].useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
        React__default["default"].useEffect(() => {
          if (control._proxyFormState.isDirty) {
            const isDirty = control._getDirty();
            if (isDirty !== formState.isDirty) {
              control._subjects.state.next({
                isDirty
              });
            }
          }
        }, [control, formState.isDirty]);
        React__default["default"].useEffect(() => {
          if (props.values && !deepEqual(props.values, _values.current)) {
            control._reset(props.values, control._options.resetOptions);
            _values.current = props.values;
            updateFormState((state) => ({ ...state }));
          } else {
            control._resetDefaultValues();
          }
        }, [props.values, control]);
        React__default["default"].useEffect(() => {
          if (props.errors) {
            control._setErrors(props.errors);
          }
        }, [props.errors, control]);
        React__default["default"].useEffect(() => {
          if (!control._state.mount) {
            control._updateValid();
            control._state.mount = true;
          }
          if (control._state.watch) {
            control._state.watch = false;
            control._subjects.state.next({ ...control._formState });
          }
          control._removeUnmounted();
        });
        React__default["default"].useEffect(() => {
          props.shouldUnregister && control._subjects.values.next({
            values: control._getWatch()
          });
        }, [props.shouldUnregister, control]);
        _formControl.current.formState = getProxyFormState(formState, control);
        return _formControl.current;
      }
      var classes$b = { "awell_single_choice_question": "awell__singleChoiceQuestion_awell_single_choice_question", "animate_flicker": "awell__singleChoiceQuestion_animate_flicker", "flickerAnimation": "awell__singleChoiceQuestion_flickerAnimation" };
      var SingleChoiceQuestion = function(_a) {
        var questionId = _a.questionId, label = _a.label, options = _a.options, onChange = _a.onChange, value = _a.value, mandatory = _a.mandatory, _b = _a.showFlickerOnSelected, showFlickerOnSelected = _b === void 0 ? false : _b;
        var _c = React.useState(value), checkedOption = _c[0], setCheckedOption = _c[1];
        var _d = React.useState(false), flickerAnimation = _d[0], setFlickerAnimation = _d[1];
        React.useEffect(function() {
          onChange(checkedOption);
          if ((value === null || value === void 0 ? void 0 : value.id) !== (checkedOption === null || checkedOption === void 0 ? void 0 : checkedOption.id)) {
            setFlickerAnimation(true);
          }
          return function() {
            setFlickerAnimation(false);
          };
        }, [checkedOption]);
        var handleSelectOption = function(option) {
          setCheckedOption(option);
        };
        return jsxRuntime.exports.jsxs("div", { children: [jsxRuntime.exports.jsx(QuestionLabel, { label, mandatory }), jsxRuntime.exports.jsx("fieldset", __assign({ className: classes$b.awell_single_choice_question }, { children: (options || []).map(function(option) {
          return jsxRuntime.exports.jsx(RadioButton, { onChange: function() {
            return handleSelectOption(option);
          }, label: option.label, id: option.id, checked: option.id === (checkedOption === null || checkedOption === void 0 ? void 0 : checkedOption.id), name: questionId, customWrapperClass: flickerAnimation && option.id === (checkedOption === null || checkedOption === void 0 ? void 0 : checkedOption.id) && showFlickerOnSelected ? classes$b.animate_flicker : "" }, option.id);
        }) }))] });
      };
      var classes$a = { "awell_question": "awell__question_awell_question", "error": "awell__question_error" };
      var classes$9 = { "awell_input_field_wrapper": "awell__phoneInputField_awell_input_field_wrapper", "awell_phone_input_field_container": "awell__phoneInputField_awell_phone_input_field_container", "input_wrapper_with_error": "awell__phoneInputField_input_wrapper_with_error", "has_error": "awell__phoneInputField_has_error", "error_message": "awell__phoneInputField_error_message", "error_icon": "awell__phoneInputField_error_icon", "awell_input_field": "awell__phoneInputField_awell_input_field" };
      var build = { exports: {} };
      (function(module2, exports3) {
        !function(e, a) {
          module2.exports = a(React__default["default"]);
        }(commonjsGlobal, (e) => (() => {
          var a = { 0: (e2, a2, r2) => {
            r2.r(a2);
          }, 374: (e2, a2, r2) => {
            r2.r(a2);
          }, 840: (e2, a2, r2) => {
            r2.r(a2);
          }, 481: (e2, a2, r2) => {
            r2.r(a2);
          }, 549: (e2, a2, r2) => {
            r2.r(a2);
          }, 153: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), o = this && this.__setModuleDefault || (Object.create ? function(e3, a3) {
              Object.defineProperty(e3, "default", { enumerable: true, value: a3 });
            } : function(e3, a3) {
              e3.default = a3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var a3 = {};
              if (null != e3) for (var r3 in e3) "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(a3, e3, r3);
              return o(a3, e3), a3;
            }, u = this && this.__rest || function(e3, a3) {
              var r3 = {};
              for (var t3 in e3) Object.prototype.hasOwnProperty.call(e3, t3) && a3.indexOf(t3) < 0 && (r3[t3] = e3[t3]);
              if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
                var n3 = 0;
                for (t3 = Object.getOwnPropertySymbols(e3); n3 < t3.length; n3++) a3.indexOf(t3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, t3[n3]) && (r3[t3[n3]] = e3[t3[n3]]);
              }
              return r3;
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.CountrySelector = void 0, r2(0);
            var l = i(r2(156)), s = r2(946), c = r2(515), d = r2(332), f = r2(425), p = r2(60);
            a2.CountrySelector = function(e3) {
              var a3, r3, n3 = e3.selectedCountry, o2 = e3.onSelect, i2 = e3.disabled, y = e3.hideDropdown, h = e3.countries, v = void 0 === h ? s.defaultCountries : h, m = e3.renderButtonWrapper, b = u(e3, ["selectedCountry", "onSelect", "disabled", "hideDropdown", "countries", "renderButtonWrapper"]), C = (0, l.useState)(false), g = C[0], P = C[1], _ = (0, l.useMemo)(function() {
                if (n3) return (0, d.getCountry)({ value: n3, field: "iso2", countries: v });
              }, [v, n3]), O = (0, l.useRef)(null);
              return l.default.createElement("div", { className: (0, c.buildClassNames)({ addPrefix: ["country-selector"], rawClassNames: [b.className] }), style: b.style, ref: O }, (a3 = { title: null == _ ? void 0 : _.name, onClick: function() {
                return P(function(e4) {
                  return !e4;
                });
              }, onMouseDown: function(e4) {
                return e4.preventDefault();
              }, onKeyDown: function(e4) {
                e4.key && ["ArrowUp", "ArrowDown"].includes(e4.key) && (e4.preventDefault(), P(true));
              }, disabled: y || i2, role: "combobox", "aria-label": "Country selector", "aria-haspopup": "listbox", "aria-expanded": g }, r3 = l.default.createElement("div", { className: (0, c.buildClassNames)({ addPrefix: ["country-selector-button__button-content"], rawClassNames: [b.buttonContentWrapperClassName] }), style: b.buttonContentWrapperStyle }, l.default.createElement(f.FlagEmoji, { iso2: n3, className: (0, c.buildClassNames)({ addPrefix: ["country-selector-button__flag-emoji", i2 && "country-selector-button__flag-emoji--disabled"], rawClassNames: [b.flagClassName] }), style: t2({ visibility: n3 ? "visible" : "hidden" }, b.flagStyle) }), !y && l.default.createElement("div", { className: (0, c.buildClassNames)({ addPrefix: ["country-selector-button__dropdown-arrow", i2 && "country-selector-button__dropdown-arrow--disabled", g && "country-selector-button__dropdown-arrow--active"], rawClassNames: [b.dropdownArrowClassName] }), style: b.dropdownArrowStyle })), m ? m({ children: r3, rootProps: a3 }) : l.default.createElement("button", t2({}, a3, { type: "button", className: (0, c.buildClassNames)({ addPrefix: ["country-selector-button", g && "country-selector-button--active", i2 && "country-selector-button--disabled", y && "country-selector-button--hide-dropdown"], rawClassNames: [b.buttonClassName] }), "data-country": n3, style: b.buttonStyle }), r3)), l.default.createElement(p.CountrySelectorDropdown, t2({ show: g, countries: v, onSelect: function(e4) {
                P(false), null == o2 || o2(e4);
              }, selectedCountry: n3, onClose: function() {
                P(false);
              } }, b.dropdownStyleProps)));
            };
          }, 60: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), o = this && this.__setModuleDefault || (Object.create ? function(e3, a3) {
              Object.defineProperty(e3, "default", { enumerable: true, value: a3 });
            } : function(e3, a3) {
              e3.default = a3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var a3 = {};
              if (null != e3) for (var r3 in e3) "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(a3, e3, r3);
              return o(a3, e3), a3;
            }, u = this && this.__rest || function(e3, a3) {
              var r3 = {};
              for (var t3 in e3) Object.prototype.hasOwnProperty.call(e3, t3) && a3.indexOf(t3) < 0 && (r3[t3] = e3[t3]);
              if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
                var n3 = 0;
                for (t3 = Object.getOwnPropertySymbols(e3); n3 < t3.length; n3++) a3.indexOf(t3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, t3[n3]) && (r3[t3[n3]] = e3[t3[n3]]);
              }
              return r3;
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.CountrySelectorDropdown = void 0, r2(374);
            var l = i(r2(156)), s = r2(946), c = r2(515), d = r2(332), f = r2(425);
            a2.CountrySelectorDropdown = function(e3) {
              var a3 = e3.show, r3 = e3.dialCodePrefix, n3 = void 0 === r3 ? "+" : r3, o2 = e3.selectedCountry, i2 = e3.countries, p = void 0 === i2 ? s.defaultCountries : i2, y = e3.onSelect, h = e3.onClose, v = u(e3, ["show", "dialCodePrefix", "selectedCountry", "countries", "onSelect", "onClose"]), m = (0, l.useRef)(null), b = (0, l.useRef)(), C = (0, l.useCallback)(function(e4) {
                return p.findIndex(function(a4) {
                  return (0, d.parseCountry)(a4).iso2 === e4;
                });
              }, [p]), g = (0, l.useState)(C(o2)), P = g[0], _ = g[1], O = function() {
                b.current !== o2 && _(C(o2));
              }, w = (0, l.useCallback)(function(e4) {
                _(C(e4.iso2)), null == y || y(e4);
              }, [y, C]), j = function(e4) {
                var a4 = p.length - 1;
                _(function(r4) {
                  var t3, n4 = (t3 = r4, "prev" === e4 ? t3 - 1 : "next" === e4 ? t3 + 1 : "last" === e4 ? a4 : 0);
                  return n4 < 0 ? 0 : n4 > a4 ? a4 : n4;
                });
              }, D = (0, l.useCallback)(function() {
                if (m.current && void 0 !== P) {
                  var e4 = (0, d.parseCountry)(p[P]).iso2;
                  if (e4 !== b.current) {
                    var a4 = m.current.querySelector('[data-country="'.concat(e4, '"]'));
                    a4 && ((0, d.scrollToChild)(m.current, a4), b.current = e4);
                  }
                }
              }, [P, p]);
              return (0, l.useEffect)(function() {
                D();
              }, [P, D]), (0, l.useEffect)(function() {
                m.current && (a3 ? m.current.focus() : O());
              }, [a3]), (0, l.useEffect)(function() {
                O();
              }, [o2]), l.default.createElement("ul", { ref: m, role: "listbox", className: (0, c.buildClassNames)({ addPrefix: ["country-selector-dropdown"], rawClassNames: [v.className] }), style: t2({ display: a3 ? "block" : "none" }, v.style), onKeyDown: function(e4) {
                if ("Enter" !== e4.key) {
                  if ("Escape" !== e4.key) return "ArrowUp" === e4.key ? (e4.preventDefault(), void j("prev")) : "ArrowDown" === e4.key ? (e4.preventDefault(), void j("next")) : "PageUp" === e4.key ? (e4.preventDefault(), void j("first")) : "PageDown" === e4.key ? (e4.preventDefault(), void j("last")) : void 0;
                  null == h || h();
                } else {
                  var a4 = (0, d.parseCountry)(p[P]);
                  w(a4);
                }
              }, onBlur: h, tabIndex: -1, "aria-activedescendant": "".concat((0, d.parseCountry)(p[P]).iso2, "-option") }, p.map(function(e4, a4) {
                var r4 = (0, d.parseCountry)(e4), t3 = r4.iso2 === o2, i3 = a4 === P;
                return l.default.createElement("li", { key: r4.iso2, "data-country": r4.iso2, role: "option", "aria-selected": t3, "aria-label": "".concat(r4.name, " ").concat(n3).concat(r4.dialCode), id: "".concat(r4.iso2, "-option"), className: (0, c.buildClassNames)({ addPrefix: ["country-selector-dropdown__list-item", t3 && "country-selector-dropdown__list-item--selected", i3 && "country-selector-dropdown__list-item--focused"], rawClassNames: [v.listItemClassName] }), onClick: function() {
                  return w(r4);
                }, style: v.listItemStyle }, l.default.createElement(f.FlagEmoji, { iso2: r4.iso2, className: (0, c.buildClassNames)({ addPrefix: ["country-selector-dropdown__list-item-flag-emoji"], rawClassNames: [v.listItemFlagClassName] }), style: v.listItemFlagStyle }), l.default.createElement("span", { className: (0, c.buildClassNames)({ addPrefix: ["country-selector-dropdown__list-item-country-name"], rawClassNames: [v.listItemCountryNameClassName] }), style: v.listItemCountryNameStyle }, r4.name), l.default.createElement("span", { className: (0, c.buildClassNames)({ addPrefix: ["country-selector-dropdown__list-item-dial-code"], rawClassNames: [v.listItemDialCodeClassName] }), style: v.listItemDialCodeStyle }, n3, r4.dialCode));
              }));
            };
          }, 7: function(e2, a2, r2) {
            var t2 = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.DialCodePreview = void 0, r2(840);
            var n2 = t2(r2(156)), o = r2(515);
            a2.DialCodePreview = function(e3) {
              var a3 = e3.dialCode, r3 = e3.prefix, t3 = e3.disabled, i = e3.style, u = e3.className;
              return n2.default.createElement("div", { className: (0, o.buildClassNames)({ addPrefix: ["dial-code-preview", t3 && "dial-code-preview--disabled"], rawClassNames: [u] }), style: i }, "".concat(r3).concat(a3));
            };
          }, 425: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__rest || function(e3, a3) {
              var r3 = {};
              for (var t3 in e3) Object.prototype.hasOwnProperty.call(e3, t3) && a3.indexOf(t3) < 0 && (r3[t3] = e3[t3]);
              if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
                var n3 = 0;
                for (t3 = Object.getOwnPropertySymbols(e3); n3 < t3.length; n3++) a3.indexOf(t3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, t3[n3]) && (r3[t3[n3]] = e3[t3[n3]]);
              }
              return r3;
            }, o = this && this.__importDefault || function(e3) {
              return e3 && e3.__esModule ? e3 : { default: e3 };
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.FlagEmoji = void 0, r2(481);
            var i = o(r2(156)), u = r2(515), l = "abcdefghijklmnopqrstuvwxyz".split("").reduce(function(e3, a3, r3) {
              var n3, o2, i2;
              return t2(t2({}, e3), ((n3 = {})[a3] = (o2 = r3, i2 = parseInt("1f1e6", 16), Number(i2 + o2).toString(16)), n3));
            }, {});
            a2.FlagEmoji = function(e3) {
              var a3 = e3.iso2, r3 = e3.size, o2 = void 0 === r3 ? "24px" : r3, s = e3.protocol, c = void 0 === s ? "https" : s, d = e3.disableLazyLoading, f = e3.className, p = n2(e3, ["iso2", "size", "protocol", "disableLazyLoading", "className"]);
              if (!a3) return i.default.createElement("img", t2({ width: o2, height: o2 }, p));
              var y = function(e4) {
                return [l[e4[0]], l[e4[1]]].join("-");
              }(a3), h = "".concat(c, "://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/").concat(y, ".svg");
              return i.default.createElement("img", t2({ className: (0, u.buildClassNames)({ addPrefix: ["flag-emoji"], rawClassNames: [f] }), src: h, width: o2, height: o2, draggable: false, "data-country": a3, loading: d ? void 0 : "lazy" }, p));
            };
          }, 28: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), o = this && this.__setModuleDefault || (Object.create ? function(e3, a3) {
              Object.defineProperty(e3, "default", { enumerable: true, value: a3 });
            } : function(e3, a3) {
              e3.default = a3;
            }), i = this && this.__importStar || function(e3) {
              if (e3 && e3.__esModule) return e3;
              var a3 = {};
              if (null != e3) for (var r3 in e3) "default" !== r3 && Object.prototype.hasOwnProperty.call(e3, r3) && n2(a3, e3, r3);
              return o(a3, e3), a3;
            }, u = this && this.__rest || function(e3, a3) {
              var r3 = {};
              for (var t3 in e3) Object.prototype.hasOwnProperty.call(e3, t3) && a3.indexOf(t3) < 0 && (r3[t3] = e3[t3]);
              if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
                var n3 = 0;
                for (t3 = Object.getOwnPropertySymbols(e3); n3 < t3.length; n3++) a3.indexOf(t3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, t3[n3]) && (r3[t3[n3]] = e3[t3[n3]]);
              }
              return r3;
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.PhoneInput = void 0, r2(549);
            var l = i(r2(156)), s = r2(946), c = r2(882), d = r2(515), f = r2(332), p = r2(153), y = r2(7);
            a2.PhoneInput = function(e3) {
              var a3, r3 = e3.hideDropdown, n3 = e3.placeholder, o2 = e3.disabled, i2 = e3.showDisabledDialCodeAndPrefix, h = e3.inputProps, v = e3.onChange, m = e3.style, b = e3.className, C = e3.inputStyle, g = e3.inputClassName, P = e3.countrySelectorStyleProps, _ = e3.dialCodePreviewStyleProps, O = e3.countries, w = void 0 === O ? s.defaultCountries : O, j = u(e3, ["hideDropdown", "placeholder", "disabled", "showDisabledDialCodeAndPrefix", "inputProps", "onChange", "style", "className", "inputStyle", "inputClassName", "countrySelectorStyleProps", "dialCodePreviewStyleProps", "countries"]), D = (0, c.usePhoneInput)(t2(t2({}, j), { countries: w, onCountryChange: function(e4) {
                null == v || v(e4);
              } })), S = D.phone, x = D.inputRef, M = D.country, N = D.setCountry, k = D.handlePhoneValueChange, A2 = (0, l.useMemo)(function() {
                if (M) return (0, f.getCountry)({ value: M, field: "iso2", countries: w });
              }, [w, M]), E = j.disableDialCodeAndPrefix && i2 && (null == A2 ? void 0 : A2.dialCode);
              return l.default.createElement("div", { className: (0, d.buildClassNames)({ addPrefix: ["input-container"], rawClassNames: [b] }), style: m }, l.default.createElement(p.CountrySelector, t2({ onSelect: function(e4) {
                return N(e4.iso2);
              }, selectedCountry: M, countries: w, disabled: o2, hideDropdown: r3 }, P)), E && l.default.createElement(y.DialCodePreview, t2({ dialCode: A2.dialCode, prefix: null !== (a3 = j.prefix) && void 0 !== a3 ? a3 : "+", disabled: o2 }, _)), l.default.createElement("input", t2({ onChange: function(e4) {
                var a4 = k(e4);
                null == v || v(a4);
              }, value: S, type: "tel", ref: x, className: (0, d.buildClassNames)({ addPrefix: ["input", o2 && "input--disabled"], rawClassNames: [g] }), placeholder: n3, disabled: o2, style: C }, h)));
            };
          }, 946: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.defaultCountries = void 0, a2.defaultCountries = [["Afghanistan", ["asia"], "af", "93"], ["Albania", ["europe"], "al", "355"], ["Algeria", ["africa", "north-africa"], "dz", "213"], ["Andorra", ["europe"], "ad", "376"], ["Angola", ["africa"], "ao", "244"], ["Antigua and Barbuda", ["america", "carribean"], "ag", "1268"], ["Argentina", ["america", "south-america"], "ar", "54", "(..) ........", 0, ["11", "221", "223", "261", "264", "2652", "280", "2905", "291", "2920", "2966", "299", "341", "342", "343", "351", "376", "379", "381", "3833", "385", "387", "388"]], ["Armenia", ["asia", "ex-ussr"], "am", "374", ".. ......"], ["Aruba", ["america", "carribean"], "aw", "297"], ["Australia", ["oceania"], "au", "61", "(..) .... ....", 0, ["2", "3", "4", "7", "8", "02", "03", "04", "07", "08"]], ["Austria", ["europe", "eu-union"], "at", "43"], ["Azerbaijan", ["asia", "ex-ussr"], "az", "994", "(..) ... .. .."], ["Bahamas", ["america", "carribean"], "bs", "1242"], ["Bahrain", ["middle-east"], "bh", "973"], ["Bangladesh", ["asia"], "bd", "880"], ["Barbados", ["america", "carribean"], "bb", "1246"], ["Belarus", ["europe", "ex-ussr"], "by", "375", "(..) ... .. .."], ["Belgium", ["europe", "eu-union"], "be", "32", "... .. .. .."], ["Belize", ["america", "central-america"], "bz", "501"], ["Benin", ["africa"], "bj", "229"], ["Bhutan", ["asia"], "bt", "975"], ["Bolivia", ["america", "south-america"], "bo", "591"], ["Bosnia and Herzegovina", ["europe", "ex-yugos"], "ba", "387"], ["Botswana", ["africa"], "bw", "267"], ["Brazil", ["america", "south-america"], "br", "55", "(..) ........."], ["British Indian Ocean Territory", ["asia"], "io", "246"], ["Brunei", ["asia"], "bn", "673"], ["Bulgaria", ["europe", "eu-union"], "bg", "359"], ["Burkina Faso", ["africa"], "bf", "226"], ["Burundi", ["africa"], "bi", "257"], ["Cambodia", ["asia"], "kh", "855"], ["Cameroon", ["africa"], "cm", "237"], ["Canada", ["america", "north-america"], "ca", "1", "(...) ...-....", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]], ["Cape Verde", ["africa"], "cv", "238"], ["Caribbean Netherlands", ["america", "carribean"], "bq", "599", "", 1], ["Central African Republic", ["africa"], "cf", "236"], ["Chad", ["africa"], "td", "235"], ["Chile", ["america", "south-america"], "cl", "56"], ["China", ["asia"], "cn", "86", "... .... ...."], ["Colombia", ["america", "south-america"], "co", "57", "... ... ...."], ["Comoros", ["africa"], "km", "269"], ["Congo", ["africa"], "cd", "243"], ["Congo", ["africa"], "cg", "242"], ["Costa Rica", ["america", "central-america"], "cr", "506", "....-...."], ["Côte d'Ivoire", ["africa"], "ci", "225", ".. .. .. .."], ["Croatia", ["europe", "eu-union", "ex-yugos"], "hr", "385"], ["Cuba", ["america", "carribean"], "cu", "53"], ["Curaçao", ["america", "carribean"], "cw", "599", "", 0], ["Cyprus", ["europe", "eu-union"], "cy", "357", ".. ......"], ["Czech Republic", ["europe", "eu-union"], "cz", "420", "... ... ..."], ["Denmark", ["europe", "eu-union", "baltic"], "dk", "45", ".. .. .. .."], ["Djibouti", ["africa"], "dj", "253"], ["Dominica", ["america", "carribean"], "dm", "1767"], ["Dominican Republic", ["america", "carribean"], "do", "1", "", 2], ["Ecuador", ["america", "south-america"], "ec", "593"], ["Egypt", ["africa", "north-africa"], "eg", "20"], ["El Salvador", ["america", "central-america"], "sv", "503", "....-...."], ["Equatorial Guinea", ["africa"], "gq", "240"], ["Eritrea", ["africa"], "er", "291"], ["Estonia", ["europe", "eu-union", "ex-ussr", "baltic"], "ee", "372", ".... ......"], ["Ethiopia", ["africa"], "et", "251"], ["Fiji", ["oceania"], "fj", "679"], ["Finland", ["europe", "eu-union", "baltic"], "fi", "358", ".. ... .. .."], ["France", ["europe", "eu-union"], "fr", "33", ". .. .. .. .."], ["French Guiana", ["america", "south-america"], "gf", "594"], ["French Polynesia", ["oceania"], "pf", "689"], ["Gabon", ["africa"], "ga", "241"], ["Gambia", ["africa"], "gm", "220"], ["Georgia", ["asia", "ex-ussr"], "ge", "995"], ["Germany", ["europe", "eu-union", "baltic"], "de", "49", ".... ........"], ["Ghana", ["africa"], "gh", "233"], ["Greece", ["europe", "eu-union"], "gr", "30"], ["Grenada", ["america", "carribean"], "gd", "1473"], ["Guadeloupe", ["america", "carribean"], "gp", "590", "", 0], ["Guam", ["oceania"], "gu", "1671"], ["Guatemala", ["america", "central-america"], "gt", "502", "....-...."], ["Guinea", ["africa"], "gn", "224"], ["Guinea-Bissau", ["africa"], "gw", "245"], ["Guyana", ["america", "south-america"], "gy", "592"], ["Haiti", ["america", "carribean"], "ht", "509", "....-...."], ["Honduras", ["america", "central-america"], "hn", "504"], ["Hong Kong", ["asia"], "hk", "852", ".... ...."], ["Hungary", ["europe", "eu-union"], "hu", "36"], ["Iceland", ["europe"], "is", "354", "... ...."], ["India", ["asia"], "in", "91", ".....-....."], ["Indonesia", ["asia"], "id", "62"], ["Iran", ["middle-east"], "ir", "98", "... ... ...."], ["Iraq", ["middle-east"], "iq", "964"], ["Ireland", ["europe", "eu-union"], "ie", "353", ".. ......."], ["Israel", ["middle-east"], "il", "972", "... ... ...."], ["Italy", ["europe", "eu-union"], "it", "39", "... .......", 0], ["Jamaica", ["america", "carribean"], "jm", "1876"], ["Japan", ["asia"], "jp", "81", ".. .... ...."], ["Jordan", ["middle-east"], "jo", "962"], ["Kazakhstan", ["asia", "ex-ussr"], "kz", "7", "... ...-..-..", 0, ["310", "311", "312", "313", "315", "318", "321", "324", "325", "326", "327", "336", "7172", "73622"]], ["Kenya", ["africa"], "ke", "254"], ["Kiribati", ["oceania"], "ki", "686"], ["Kosovo", ["europe", "ex-yugos"], "xk", "383"], ["Kuwait", ["middle-east"], "kw", "965"], ["Kyrgyzstan", ["asia", "ex-ussr"], "kg", "996", "... ... ..."], ["Laos", ["asia"], "la", "856"], ["Latvia", ["europe", "eu-union", "ex-ussr", "baltic"], "lv", "371", ".. ... ..."], ["Lebanon", ["middle-east"], "lb", "961"], ["Lesotho", ["africa"], "ls", "266"], ["Liberia", ["africa"], "lr", "231"], ["Libya", ["africa", "north-africa"], "ly", "218"], ["Liechtenstein", ["europe"], "li", "423"], ["Lithuania", ["europe", "eu-union", "ex-ussr", "baltic"], "lt", "370"], ["Luxembourg", ["europe", "eu-union"], "lu", "352"], ["Macau", ["asia"], "mo", "853"], ["Macedonia", ["europe", "ex-yugos"], "mk", "389"], ["Madagascar", ["africa"], "mg", "261"], ["Malawi", ["africa"], "mw", "265"], ["Malaysia", ["asia"], "my", "60", "..-....-...."], ["Maldives", ["asia"], "mv", "960"], ["Mali", ["africa"], "ml", "223"], ["Malta", ["europe", "eu-union"], "mt", "356"], ["Marshall Islands", ["oceania"], "mh", "692"], ["Martinique", ["america", "carribean"], "mq", "596"], ["Mauritania", ["africa"], "mr", "222"], ["Mauritius", ["africa"], "mu", "230"], ["Mexico", ["america", "central-america"], "mx", "52", "... ... ....", 0, ["33", "55", "81", "229", "656", "664", "774", "998"]], ["Micronesia", ["oceania"], "fm", "691"], ["Moldova", ["europe"], "md", "373", "(..) ..-..-.."], ["Monaco", ["europe"], "mc", "377"], ["Mongolia", ["asia"], "mn", "976"], ["Montenegro", ["europe", "ex-yugos"], "me", "382"], ["Morocco", ["africa", "north-africa"], "ma", "212"], ["Mozambique", ["africa"], "mz", "258"], ["Myanmar", ["asia"], "mm", "95"], ["Namibia", ["africa"], "na", "264"], ["Nauru", ["africa"], "nr", "674"], ["Nepal", ["asia"], "np", "977"], ["Netherlands", ["europe", "eu-union"], "nl", "31", ".. ........"], ["New Caledonia", ["oceania"], "nc", "687"], ["New Zealand", ["oceania"], "nz", "64", "...-...-...."], ["Nicaragua", ["america", "central-america"], "ni", "505"], ["Niger", ["africa"], "ne", "227"], ["Nigeria", ["africa"], "ng", "234"], ["North Korea", ["asia"], "kp", "850"], ["Norway", ["europe", "baltic"], "no", "47", "... .. ..."], ["Oman", ["middle-east"], "om", "968"], ["Pakistan", ["asia"], "pk", "92", "...-......."], ["Palau", ["oceania"], "pw", "680"], ["Palestine", ["middle-east"], "ps", "970"], ["Panama", ["america", "central-america"], "pa", "507"], ["Papua New Guinea", ["oceania"], "pg", "675"], ["Paraguay", ["america", "south-america"], "py", "595"], ["Peru", ["america", "south-america"], "pe", "51"], ["Philippines", ["asia"], "ph", "63", ".... ......."], ["Poland", ["europe", "eu-union", "baltic"], "pl", "48", "...-...-..."], ["Portugal", ["europe", "eu-union"], "pt", "351"], ["Puerto Rico", ["america", "carribean"], "pr", "1", "", 3], ["Qatar", ["middle-east"], "qa", "974"], ["Réunion", ["africa"], "re", "262"], ["Romania", ["europe", "eu-union"], "ro", "40"], ["Russia", ["europe", "asia", "ex-ussr", "baltic"], "ru", "7", "(...) ...-..-..", 1], ["Rwanda", ["africa"], "rw", "250"], ["Saint Kitts and Nevis", ["america", "carribean"], "kn", "1869"], ["Saint Lucia", ["america", "carribean"], "lc", "1758"], ["Saint Vincent and the Grenadines", ["america", "carribean"], "vc", "1784"], ["Samoa", ["oceania"], "ws", "685"], ["San Marino", ["europe"], "sm", "378"], ["São Tomé and Príncipe", ["africa"], "st", "239"], ["Saudi Arabia", ["middle-east"], "sa", "966"], ["Senegal", ["africa"], "sn", "221"], ["Serbia", ["europe", "ex-yugos"], "rs", "381"], ["Seychelles", ["africa"], "sc", "248"], ["Sierra Leone", ["africa"], "sl", "232"], ["Singapore", ["asia"], "sg", "65", "....-...."], ["Slovakia", ["europe", "eu-union"], "sk", "421"], ["Slovenia", ["europe", "eu-union", "ex-yugos"], "si", "386"], ["Solomon Islands", ["oceania"], "sb", "677"], ["Somalia", ["africa"], "so", "252"], ["South Africa", ["africa"], "za", "27"], ["South Korea", ["asia"], "kr", "82", "... .... ...."], ["South Sudan", ["africa", "north-africa"], "ss", "211"], ["Spain", ["europe", "eu-union"], "es", "34", "... ... ..."], ["Sri Lanka", ["asia"], "lk", "94"], ["Sudan", ["africa"], "sd", "249"], ["Suriname", ["america", "south-america"], "sr", "597"], ["Swaziland", ["africa"], "sz", "268"], ["Sweden", ["europe", "eu-union", "baltic"], "se", "46", "(...) ...-..."], ["Switzerland", ["europe"], "ch", "41", ".. ... .. .."], ["Syria", ["middle-east"], "sy", "963"], ["Taiwan", ["asia"], "tw", "886"], ["Tajikistan", ["asia", "ex-ussr"], "tj", "992"], ["Tanzania", ["africa"], "tz", "255"], ["Thailand", ["asia"], "th", "66"], ["Timor-Leste", ["asia"], "tl", "670"], ["Togo", ["africa"], "tg", "228"], ["Tonga", ["oceania"], "to", "676"], ["Trinidad and Tobago", ["america", "carribean"], "tt", "1868"], ["Tunisia", ["africa", "north-africa"], "tn", "216"], ["Turkey", ["europe"], "tr", "90", "... ... .. .."], ["Turkmenistan", ["asia", "ex-ussr"], "tm", "993"], ["Tuvalu", ["asia"], "tv", "688"], ["Uganda", ["africa"], "ug", "256"], ["Ukraine", ["europe", "ex-ussr"], "ua", "380", "(..) ... .. .."], ["United Arab Emirates", ["middle-east"], "ae", "971"], ["United Kingdom", ["europe", "eu-union"], "gb", "44", ".... ......"], ["United States", ["america", "north-america"], "us", "1", "(...) ...-....", 0, ["201", "202", "203", "205", "206", "207", "208", "209", "210", "212", "213", "214", "215", "216", "217", "218", "219", "225", "228", "229", "231", "239", "248", "251", "252", "253", "254", "256", "260", "262", "269", "270", "276", "281", "301", "302", "303", "304", "305", "307", "308", "309", "310", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "323", "325", "330", "334", "336", "337", "352", "360", "361", "386", "401", "402", "404", "405", "406", "407", "408", "409", "410", "412", "413", "414", "415", "417", "419", "423", "425", "432", "434", "435", "440", "478", "479", "480", "501", "502", "503", "504", "505", "507", "508", "509", "510", "512", "513", "515", "516", "517", "518", "520", "530", "540", "541", "559", "561", "562", "563", "570", "573", "574", "575", "580", "585", "586", "601", "602", "603", "605", "606", "607", "608", "609", "610", "612", "614", "615", "616", "617", "618", "619", "620", "623", "626", "630", "631", "636", "641", "650", "651", "660", "661", "662", "701", "702", "703", "704", "706", "707", "708", "712", "713", "714", "715", "716", "717", "718", "719", "724", "727", "731", "732", "734", "740", "757", "760", "763", "765", "770", "772", "773", "775", "781", "785", "801", "802", "803", "804", "805", "806", "808", "810", "812", "813", "814", "815", "816", "817", "818", "828", "830", "831", "843", "845", "847", "850", "856", "858", "859", "860", "863", "864", "865", "870", "901", "903", "904", "906", "907", "908", "909", "910", "912", "913", "914", "915", "916", "918", "919", "920", "925", "928", "931", "936", "937", "940", "941", "949", "951", "952", "954", "956", "970", "972", "973", "978", "979", "985", "989"]], ["Uruguay", ["america", "south-america"], "uy", "598"], ["Uzbekistan", ["asia", "ex-ussr"], "uz", "998", ".. ... .. .."], ["Vanuatu", ["oceania"], "vu", "678"], ["Vatican City", ["europe"], "va", "39", ".. .... ....", 1], ["Venezuela", ["america", "south-america"], "ve", "58"], ["Vietnam", ["asia"], "vn", "84"], ["Yemen", ["middle-east"], "ye", "967"], ["Zambia", ["africa"], "zm", "260"], ["Zimbabwe", ["africa"], "zw", "263"]];
          }, 11: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__spreadArray || function(e3, a3, r3) {
              if (r3 || 2 === arguments.length) for (var t3, n3 = 0, o2 = a3.length; n3 < o2; n3++) !t3 && n3 in a3 || (t3 || (t3 = Array.prototype.slice.call(a3, 0, n3)), t3[n3] = a3[n3]);
              return e3.concat(t3 || Array.prototype.slice.call(a3));
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.useHistoryState = void 0;
            var o = r2(156), i = { size: 20 };
            a2.useHistoryState = function(e3, a3) {
              var r3 = t2(t2({}, i), a3).size, u = (0, o.useState)(e3), l = u[0], s = u[1], c = (0, o.useState)([e3]), d = c[0], f = c[1], p = (0, o.useState)(0), y = p[0], h = p[1], v = (0, o.useCallback)(function(e4, a4) {
                if (e4 !== l) {
                  if (null == a4 ? void 0 : a4.overrideLastHistoryItem) f(function(a5) {
                    return n2(n2([], a5.slice(0, y), true), [e4], false);
                  });
                  else {
                    var t3 = d.length >= r3;
                    f(function(a5) {
                      return n2(n2([], a5.slice(t3 ? 1 : 0, y + 1), true), [e4], false);
                    }), t3 || h(function(e5) {
                      return e5 + 1;
                    });
                  }
                  s(e4);
                }
              }, [l, y, d.length, r3]), m = (0, o.useCallback)(function() {
                return !(y <= 0 || (s(d[y - 1]), h(function(e4) {
                  return e4 - 1;
                }), 0));
              }, [d, y]), b = (0, o.useCallback)(function() {
                return !(y + 1 >= d.length || (s(d[y + 1]), h(function(e4) {
                  return e4 + 1;
                }), 0));
              }, [d, y]);
              return [l, v, m, b];
            };
          }, 452: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.usePhone = a2.defaultPhoneConfig = a2.MASK_CHAR = void 0;
            var n2 = r2(156), o = r2(946), i = r2(332), u = r2(11), l = r2(795);
            a2.MASK_CHAR = ".", a2.defaultPhoneConfig = { prefix: "+", defaultMask: "............", charAfterDialCode: " ", historySaveDebounceMS: 200, disableCountryGuess: false, disableDialCodePrefill: false, forceDialCode: false, disableDialCodeAndPrefix: false, countries: o.defaultCountries }, a2.usePhone = function(e3, r3) {
              var o2 = t2(t2({}, a2.defaultPhoneConfig), r3), s = o2.country, c = o2.countries, d = o2.prefix, f = o2.defaultMask, p = o2.charAfterDialCode, y = o2.historySaveDebounceMS, h = o2.disableCountryGuess, v = o2.disableDialCodePrefill, m = o2.forceDialCode, b = o2.disableDialCodeAndPrefix, C = o2.onCountryGuess, g = o2.onPhoneUpdate, P = !b && !h, _ = (0, l.useTimer)(), O = (0, n2.useMemo)(function() {
                if (s) return (0, i.getCountry)({ value: s, field: "iso2", countries: c });
              }, [s, c]), w = function(e4, r4) {
                var t3, n3 = void 0 === r4 ? {} : r4, o3 = n3.trimNonDigitsEnd, u2 = n3.insertDialCodeOnEmpty, l2 = n3.forceDisableCountryGuess, s2 = n3.forcedCountry, y2 = l2 || !P || s2 ? void 0 : (0, i.guessCountryByPartialNumber)({ phone: e4, countries: c, currentCountryIso2: null == O ? void 0 : O.iso2 }), h2 = null !== (t3 = null != s2 ? s2 : null == y2 ? void 0 : y2.country) && void 0 !== t3 ? t3 : O;
                return { phone: h2 ? (0, i.formatPhone)(e4, { prefix: d, mask: h2.format || f, maskChar: a2.MASK_CHAR, dialCode: h2.dialCode, trimNonDigitsEnd: o3, charAfterDialCode: p, forceDialCode: m, insertDialCodeOnEmpty: u2, disableDialCodeAndPrefix: b }) : e4, countryGuessResult: y2, formatCountry: h2 };
              }, j = (0, u.useHistoryState)(w(e3, { insertDialCodeOnEmpty: !v }).phone), D = j[0], S = j[1], x = j[2], M = j[3], N = (0, n2.useState)(false), k = N[0], A2 = N[1], E = function(e4, a3) {
                var r4, t3 = void 0 === a3 ? {} : a3, n3 = t3.deletion, o3 = t3.cursorPosition, u2 = t3.insertDialCodeOnEmpty, l2 = t3.inserted, c2 = t3.forcedCountry, f2 = e4, p2 = o3;
                m && !b && O && !(0, i.removeNonDigits)(e4).startsWith(O.dialCode) && e4 && (l2 && e4.startsWith(d) && e4.length - (null != o3 ? o3 : 0) == 0 ? f2 = e4 : (f2 = D, p2 = 0));
                var h2 = w(f2, { trimNonDigitsEnd: "backward" === n3, insertDialCodeOnEmpty: u2 || !k && !v, forceDisableCountryGuess: m && !!n3 && (0, i.removeNonDigits)(f2).length < (null !== (r4 = null == O ? void 0 : O.dialCode.length) && void 0 !== r4 ? r4 : 0), forcedCountry: c2 }), j2 = h2.phone, x2 = h2.countryGuessResult, M2 = h2.formatCountry, N2 = _.check();
                return S(j2, { overrideLastHistoryItem: !(!N2 || N2 > y) }), null == g || g(j2, { formatCountry: M2, unformattedValue: f2, cursorPosition: null != p2 ? p2 : 0, deletion: n3 }), P && (null == x2 ? void 0 : x2.country) && x2.country.name !== s && (null == C || C(x2)), k || A2(true), j2;
              };
              return (0, n2.useEffect)(function() {
                k && e3 === D || E(e3);
              }, [e3]), { phone: D, initialized: k, undo: x, redo: M, handleValueChange: E };
            };
          }, 882: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            }, n2 = this && this.__rest || function(e3, a3) {
              var r3 = {};
              for (var t3 in e3) Object.prototype.hasOwnProperty.call(e3, t3) && a3.indexOf(t3) < 0 && (r3[t3] = e3[t3]);
              if (null != e3 && "function" == typeof Object.getOwnPropertySymbols) {
                var n3 = 0;
                for (t3 = Object.getOwnPropertySymbols(e3); n3 < t3.length; n3++) a3.indexOf(t3[n3]) < 0 && Object.prototype.propertyIsEnumerable.call(e3, t3[n3]) && (r3[t3[n3]] = e3[t3[n3]]);
              }
              return r3;
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.usePhoneInput = void 0;
            var o = r2(156), i = r2(946), u = r2(332), l = r2(452);
            a2.usePhoneInput = function(e3) {
              var a3, r3, s, c = e3.initialCountry, d = e3.value, f = void 0 === d ? "" : d, p = e3.prefix, y = void 0 === p ? "+" : p, h = e3.countries, v = void 0 === h ? i.defaultCountries : h, m = e3.disableDialCodeAndPrefix, b = e3.hideSpaceAfterDialCode, C = e3.onCountryChange, g = n2(e3, ["initialCountry", "value", "prefix", "countries", "disableDialCodeAndPrefix", "hideSpaceAfterDialCode", "onCountryChange"]), P = (0, o.useRef)(null), _ = (0, o.useRef)({ shouldFocus: false, shouldSetCursorToEnd: false }), O = (0, o.useState)(null !== (r3 = null === (a3 = (0, u.guessCountryByPartialNumber)({ phone: f, countries: v, currentCountryIso2: c }).country) || void 0 === a3 ? void 0 : a3.iso2) && void 0 !== r3 ? r3 : c), w = O[0], j = O[1], D = (0, o.useMemo)(function() {
                if (w) return (0, u.getCountry)({ value: w, field: "iso2", countries: v });
              }, [v, w]), S = b ? "" : " ", x = null !== (s = null == D ? void 0 : D.dialCode) && void 0 !== s ? s : "", M = m ? (0, u.removeDialCode)({ phone: f, dialCode: x, charAfterDialCode: S, prefix: y }) : f, N = (0, l.usePhone)(M, t2({ country: w, countries: v, prefix: y, disableDialCodeAndPrefix: m, charAfterDialCode: S, onCountryGuess: function(e4) {
                var a4 = e4.country;
                e4.fullDialCodeMatch && j(a4.iso2);
              }, onPhoneUpdate: function(e4, a4) {
                var r4, t3, n3 = a4.formatCountry, o2 = a4.unformattedValue, i2 = a4.cursorPosition, l2 = a4.deletion, s2 = A2 && !_.current.shouldSetCursorToEnd ? (0, u.getCursorPosition)({ cursorPositionAfterInput: i2, phoneBeforeInput: k, phoneAfterInput: o2, phoneAfterFormatted: e4, leftOffset: g.forceDialCode ? y.length + (null !== (t3 = null === (r4 = null == n3 ? void 0 : n3.dialCode) || void 0 === r4 ? void 0 : r4.length) && void 0 !== t3 ? t3 : 0) + S.length : 0, deletion: l2 }) : e4.length;
                Promise.resolve().then(function() {
                  var e5, a5;
                  null === (e5 = P.current) || void 0 === e5 || e5.setSelectionRange(s2, s2), _.current.shouldFocus && (null === (a5 = P.current) || void 0 === a5 || a5.focus()), _.current = { shouldFocus: false, shouldSetCursorToEnd: false };
                });
              } }, g)), k = N.phone, A2 = N.initialized, E = N.undo, I2 = N.redo, B = N.handleValueChange;
              return (0, o.useEffect)(function() {
                var e4 = P.current;
                if (e4) {
                  var a4 = function(e5) {
                    if (e5.key) {
                      var a5 = e5.ctrlKey, r4 = e5.shiftKey, t3 = "z" === e5.key.toLowerCase();
                      if (a5 && t3) return r4 ? I2() : E();
                    }
                  };
                  return e4.addEventListener("keydown", a4), function() {
                    e4.removeEventListener("keydown", a4);
                  };
                }
              }, [P, E, I2]), { phone: k, handlePhoneValueChange: function(e4) {
                var a4;
                e4.preventDefault();
                var r4 = e4.nativeEvent.inputType, t3 = null == r4 ? void 0 : r4.startsWith("insertFrom"), n3 = B(e4.target.value, { deletion: function() {
                  var e5;
                  if (null !== (e5 = null == r4 ? void 0 : r4.toLocaleLowerCase().includes("delete")) && void 0 !== e5 && e5) return (null == r4 ? void 0 : r4.toLocaleLowerCase().includes("forward")) ? "forward" : "backward";
                }(), inserted: t3, cursorPosition: null !== (a4 = e4.target.selectionStart) && void 0 !== a4 ? a4 : 0 });
                return m ? (0, u.addDialCode)({ phone: n3, dialCode: x, charAfterDialCode: S, prefix: y }) : n3;
              }, inputRef: P, country: w, setCountry: function(e4) {
                var a4 = (0, u.getCountry)({ value: e4, field: "iso2", countries: v });
                if (a4) {
                  _.current = { shouldFocus: true, shouldSetCursorToEnd: true };
                  var r4 = B(m ? "" : "".concat(y).concat(S).concat(a4.dialCode), { forcedCountry: a4 });
                  j(a4.iso2), null == C || C(r4);
                }
              } };
            };
          }, 393: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.usePhoneValidation = void 0;
            var t2 = r2(332);
            a2.usePhoneValidation = function(e3, a3) {
              return (0, t2.validatePhone)(e3, a3);
            };
          }, 795: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.useTimer = void 0;
            var t2 = r2(156);
            a2.useTimer = function() {
              var e3 = (0, t2.useState)(), a3 = e3[0], r3 = e3[1], n2 = (0, t2.useState)(Date.now()), o = n2[0], i = n2[1];
              return { check: function() {
                var e4 = Date.now(), t3 = a3 ? e4 - o : void 0;
                return r3(o), i(e4), t3;
              } };
            };
          }, 515: function(e2, a2) {
            var r2 = this && this.__spreadArray || function(e3, a3, r3) {
              if (r3 || 2 === arguments.length) for (var t2, n2 = 0, o = a3.length; n2 < o; n2++) !t2 && n2 in a3 || (t2 || (t2 = Array.prototype.slice.call(a3, 0, n2)), t2[n2] = a3[n2]);
              return e3.concat(t2 || Array.prototype.slice.call(a3));
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.buildClassNames = a2.classNamesWithPrefix = a2.joinClasses = a2.classPrefix = void 0, a2.classPrefix = "react-international-phone-", a2.joinClasses = function() {
              for (var e3 = [], a3 = 0; a3 < arguments.length; a3++) e3[a3] = arguments[a3];
              return e3.filter(function(e4) {
                return !!e4;
              }).join(" ").trim();
            }, a2.classNamesWithPrefix = function() {
              for (var e3 = [], r3 = 0; r3 < arguments.length; r3++) e3[r3] = arguments[r3];
              return a2.joinClasses.apply(void 0, e3).split(" ").map(function(e4) {
                return "".concat(a2.classPrefix).concat(e4);
              }).join(" ");
            }, a2.buildClassNames = function(e3) {
              var t2 = e3.addPrefix, n2 = e3.rawClassNames;
              return a2.joinClasses.apply(void 0, r2([a2.classNamesWithPrefix.apply(void 0, t2)], n2, false));
            };
          }, 62: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.applyMask = void 0, a2.applyMask = function(e3) {
              var a3 = e3.value, r2 = e3.mask, t2 = e3.maskSymbol, n2 = e3.offset, o = void 0 === n2 ? 0 : n2, i = e3.trimNonMaskCharsLeftover, u = void 0 !== i && i;
              if (a3.length < o) return a3;
              for (var l = a3.slice(0, o), s = a3.slice(o), c = l, d = 0, f = 0, p = r2.split(""); f < p.length; f++) {
                var y = p[f];
                if (d >= s.length) {
                  if (!u && y !== t2) {
                    c += y;
                    continue;
                  }
                  break;
                }
                y === t2 ? (c += s[d], d += 1) : c += y;
              }
              return c;
            };
          }, 239: function(e2, a2, r2) {
            var t2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), n2 = this && this.__exportStar || function(e3, a3) {
              for (var r3 in e3) "default" === r3 || Object.prototype.hasOwnProperty.call(a3, r3) || t2(a3, e3, r3);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), n2(r2(62), a2), n2(r2(939), a2), n2(r2(222), a2);
          }, 939: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.removeNonDigits = void 0, a2.removeNonDigits = function(e3) {
              return e3.replace(/\D/g, "");
            };
          }, 222: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.scrollToChild = void 0, a2.scrollToChild = function(e3, a3) {
              var r2 = e3.style.display;
              "block" !== r2 && (e3.style.display = "block");
              var t2 = e3.getBoundingClientRect(), n2 = a3.getBoundingClientRect(), o = n2.top - t2.top, i = t2.bottom - n2.bottom;
              o >= 0 && i >= 0 || (Math.abs(o) < Math.abs(i) ? e3.scrollTop += o : e3.scrollTop -= i), e3.style.display = r2;
            };
          }, 298: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.buildCountryData = void 0, a2.buildCountryData = function(e3) {
              return [e3.name, e3.regions, e3.iso2, e3.dialCode, e3.format, e3.priority, e3.areaCodes].filter(Boolean);
            };
          }, 891: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.getCountry = void 0;
            var t2 = r2(300);
            a2.getCountry = function(e3) {
              var a3 = e3.value, r3 = e3.field, n2 = e3.countries;
              if (["regions", "priority"].includes(r3)) throw new Error(function(e4) {
                return 'Field "'.concat(e4, '" is not supported');
              }(r3));
              var o = n2.find(function(e4) {
                var n3 = (0, t2.parseCountry)(e4);
                return a3 === n3[r3];
              });
              if (o) return (0, t2.parseCountry)(o);
            };
          }, 4: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.guessCountryByPartialNumber = void 0;
            var t2 = r2(239), n2 = r2(891), o = r2(300);
            a2.guessCountryByPartialNumber = function(e3) {
              var a3, r3 = e3.phone, i = e3.countries, u = e3.currentCountryIso2, l = { country: void 0, fullDialCodeMatch: false, areaCodeMatch: void 0 };
              if (!r3) return l;
              var s = (0, t2.removeNonDigits)(r3);
              if (!s) return l;
              for (var c = l, d = function(e4) {
                var a4, r4, t3, n3, o2 = e4.country, i2 = e4.fullDialCodeMatch, u2 = e4.areaCodeMatch, l2 = o2.dialCode === (null === (a4 = c.country) || void 0 === a4 ? void 0 : a4.dialCode), s2 = (null !== (r4 = o2.priority) && void 0 !== r4 ? r4 : 0) < (null !== (n3 = null === (t3 = c.country) || void 0 === t3 ? void 0 : t3.priority) && void 0 !== n3 ? n3 : 0);
                l2 && !s2 || (c = { country: o2, fullDialCodeMatch: i2, areaCodeMatch: u2 });
              }, f = 0, p = i; f < p.length; f++) {
                var y = p[f], h = (0, o.parseCountry)(y), v = h.dialCode, m = h.areaCodes;
                if (s.startsWith(v)) {
                  var b = !c.country || Number(v) >= Number(c.country.dialCode);
                  if (m) for (var C = s.substring(v.length), g = 0, P = m; g < P.length; g++) {
                    var _ = P[g];
                    if (C.startsWith(_)) return { country: h, fullDialCodeMatch: true, areaCodeMatch: true };
                  }
                  !b && v !== s && c.fullDialCodeMatch || d({ country: h, fullDialCodeMatch: true, areaCodeMatch: m ? !m : void 0 });
                }
                c.fullDialCodeMatch || s.length < v.length && v.startsWith(s) && (!c.country || Number(v) <= Number(c.country.dialCode)) && d({ country: h, fullDialCodeMatch: false });
              }
              if (u) {
                var O = (0, n2.getCountry)({ value: u, field: "iso2", countries: i });
                c && O && (null === (a3 = c.country) || void 0 === a3 ? void 0 : a3.dialCode) === O.dialCode && c.country !== O && c.fullDialCodeMatch && !c.areaCodeMatch && (c.country = O);
              }
              return c;
            };
          }, 88: function(e2, a2, r2) {
            var t2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), n2 = this && this.__exportStar || function(e3, a3) {
              for (var r3 in e3) "default" === r3 || Object.prototype.hasOwnProperty.call(a3, r3) || t2(a3, e3, r3);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), n2(r2(298), a2), n2(r2(891), a2), n2(r2(4), a2), n2(r2(300), a2);
          }, 300: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.parseCountry = void 0, a2.parseCountry = function(e3) {
              return { name: e3[0], regions: e3[1], iso2: e3[2], dialCode: e3[3], format: e3[4], priority: e3[5], areaCodes: e3[6] };
            };
          }, 332: function(e2, a2, r2) {
            var t2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), n2 = this && this.__exportStar || function(e3, a3) {
              for (var r3 in e3) "default" === r3 || Object.prototype.hasOwnProperty.call(a3, r3) || t2(a3, e3, r3);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), n2(r2(239), a2), n2(r2(88), a2), n2(r2(165), a2);
          }, 820: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.addDialCode = void 0;
            var t2 = r2(214);
            a2.addDialCode = function(e3) {
              var a3 = e3.phone, r3 = e3.dialCode, n2 = e3.prefix, o = void 0 === n2 ? "+" : n2, i = e3.charAfterDialCode, u = void 0 === i ? " " : i;
              return "".concat(o).concat(r3).concat(u).concat((0, t2.removeDialCode)({ phone: a3, dialCode: r3, charAfterDialCode: u, prefix: o }));
            };
          }, 380: (e2, a2, r2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.formatPhone = void 0;
            var t2 = r2(239);
            a2.formatPhone = function(e3, a3) {
              var r3 = !a3.disableDialCodeAndPrefix && a3.forceDialCode, n2 = !a3.disableDialCodeAndPrefix && a3.insertDialCodeOnEmpty, o = e3, i = function(e4) {
                return a3.trimNonDigitsEnd ? e4.trim() : e4;
              };
              if (!o) return n2 && !o.length || r3 ? i("".concat(a3.prefix).concat(a3.dialCode).concat(a3.charAfterDialCode)) : i(o);
              if ((o = (0, t2.removeNonDigits)(o)) === a3.dialCode && !a3.disableDialCodeAndPrefix) return i("".concat(a3.prefix).concat(a3.dialCode).concat(a3.charAfterDialCode));
              if (a3.dialCode.startsWith(o) && !a3.disableDialCodeAndPrefix) return i(r3 ? "".concat(a3.prefix).concat(a3.dialCode).concat(a3.charAfterDialCode) : "".concat(a3.prefix).concat(o));
              if (!o.startsWith(a3.dialCode) && !a3.disableDialCodeAndPrefix) {
                if (r3) return i("".concat(a3.prefix).concat(a3.dialCode).concat(a3.charAfterDialCode));
                if (o.length < a3.dialCode.length) return i("".concat(a3.prefix).concat(o));
              }
              var u, l = (u = a3.dialCode.length, a3.disableDialCodeAndPrefix && (u = 0), { phoneLeftSide: o.slice(0, u), phoneRightSide: o.slice(u) }), s = l.phoneLeftSide, c = l.phoneRightSide;
              return s = "".concat(a3.prefix).concat(s).concat(a3.charAfterDialCode), c = (0, t2.applyMask)({ value: c, mask: a3.mask, maskSymbol: a3.maskChar, trimNonMaskCharsLeftover: a3.trimNonDigitsEnd }), a3.disableDialCodeAndPrefix && (s = ""), i("".concat(s).concat(c));
            };
          }, 775: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.getCursorPosition = void 0;
            var r2 = function(e3) {
              return /\d/.test(e3);
            };
            a2.getCursorPosition = function(e3) {
              var a3 = e3.phoneBeforeInput, t2 = e3.phoneAfterInput, n2 = e3.phoneAfterFormatted, o = e3.cursorPositionAfterInput, i = e3.leftOffset, u = void 0 === i ? 0 : i, l = e3.deletion;
              if (o < u) return u;
              if (!a3) return n2.length;
              var s = "backward" === l;
              if (0 === o && t2.length > 0 && n2.length > 0) {
                if (s) return 0;
                for (var c = 0; c < n2.length; c += 1) if (r2(n2[c])) return c;
                return n2.length;
              }
              if (t2.length < a3.length && 1 === t2.length) return n2.length;
              var d = null;
              for (c = o - 1; c >= 0; c -= 1) if (r2(t2[c])) {
                d = c;
                break;
              }
              if (null === d) return 0 !== o ? o : n2.length;
              var f = 0;
              for (c = 0; c < d; c += 1) r2(t2[c]) && (f += 1);
              s && (f -= 1);
              var p = 0, y = 0;
              for (c = 0; c < n2.length && (p += 1, r2(n2[c]) && (y += 1), y !== f + 1); c += 1) ;
              for (; !r2(n2[p]) && p < n2.length; ) p += 1;
              return s && (p += 1), p;
            };
          }, 165: function(e2, a2, r2) {
            var t2 = this && this.__createBinding || (Object.create ? function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3);
              var n3 = Object.getOwnPropertyDescriptor(a3, r3);
              n3 && !("get" in n3 ? !a3.__esModule : n3.writable || n3.configurable) || (n3 = { enumerable: true, get: function() {
                return a3[r3];
              } }), Object.defineProperty(e3, t3, n3);
            } : function(e3, a3, r3, t3) {
              void 0 === t3 && (t3 = r3), e3[t3] = a3[r3];
            }), n2 = this && this.__exportStar || function(e3, a3) {
              for (var r3 in e3) "default" === r3 || Object.prototype.hasOwnProperty.call(a3, r3) || t2(a3, e3, r3);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), n2(r2(820), a2), n2(r2(380), a2), n2(r2(775), a2), n2(r2(214), a2), n2(r2(684), a2);
          }, 214: (e2, a2) => {
            Object.defineProperty(a2, "__esModule", { value: true }), a2.removeDialCode = void 0, a2.removeDialCode = function(e3) {
              var a3 = e3.phone, r2 = e3.dialCode, t2 = e3.prefix, n2 = void 0 === t2 ? "+" : t2, o = e3.charAfterDialCode, i = void 0 === o ? " " : o;
              if (!a3 || !r2) return a3;
              var u = a3;
              return u.startsWith(n2) && (u = u.replace(n2, "")), u.startsWith(r2) ? ((u = u.replace(r2, "")).startsWith(i) && (u = u.replace(i, "")), u) : a3;
            };
          }, 684: function(e2, a2, r2) {
            var t2 = this && this.__assign || function() {
              return t2 = Object.assign || function(e3) {
                for (var a3, r3 = 1, t3 = arguments.length; r3 < t3; r3++) for (var n3 in a3 = arguments[r3]) Object.prototype.hasOwnProperty.call(a3, n3) && (e3[n3] = a3[n3]);
                return e3;
              }, t2.apply(this, arguments);
            };
            Object.defineProperty(a2, "__esModule", { value: true }), a2.validatePhone = void 0;
            var n2 = r2(452), o = r2(239), i = r2(88);
            a2.validatePhone = function(e3, a3) {
              var r3 = t2(t2({}, n2.defaultPhoneConfig), a3), u = r3.countries, l = r3.defaultMask, s = r3.defaultMaskMinPhoneLength, c = void 0 === s ? 10 : s, d = r3.prefix, f = r3.charAfterDialCode, p = (0, i.guessCountryByPartialNumber)({ phone: e3, countries: u }), y = p.country, h = p.fullDialCodeMatch, v = p.areaCodeMatch;
              if (!y || !h) return { country: void 0, lengthMatch: false, areaCodeMatch: v, isValid: false };
              var m = "".concat(d).concat(y.dialCode).concat(f);
              if (!e3.startsWith(m)) return { country: y, lengthMatch: false, areaCodeMatch: v, isValid: false };
              var b = e3.substring(m.length), C = !y.format, g = C ? l : y.format;
              if (C && (0, o.removeNonDigits)(e3).length < c) return { country: y, lengthMatch: false, areaCodeMatch: v, isValid: false };
              if (!C && b.length !== g.length) return { country: y, lengthMatch: false, areaCodeMatch: v, isValid: false };
              for (var P = 0; P < b.length; P += 1) if (b[P] !== g[P] && g[P] !== n2.MASK_CHAR) return { country: y, lengthMatch: false, areaCodeMatch: v, isValid: false };
              return { country: y, lengthMatch: true, areaCodeMatch: v, isValid: null == v || v };
            };
          }, 156: (a2) => {
            a2.exports = e;
          } }, r = {};
          function t(e2) {
            var n2 = r[e2];
            if (void 0 !== n2) return n2.exports;
            var o = r[e2] = { exports: {} };
            return a[e2].call(o.exports, o, o.exports, t), o.exports;
          }
          t.r = (e2) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
          };
          var n = {};
          return (() => {
            var e2 = n;
            Object.defineProperty(e2, "__esModule", { value: true }), e2.validatePhone = e2.parseCountry = e2.buildCountryData = e2.usePhoneValidation = e2.usePhoneInput = e2.usePhone = e2.defaultCountries = e2.PhoneInput = e2.FlagEmoji = e2.DialCodePreview = e2.CountrySelectorDropdown = e2.CountrySelector = void 0;
            var a2 = t(153);
            Object.defineProperty(e2, "CountrySelector", { enumerable: true, get: function() {
              return a2.CountrySelector;
            } });
            var r2 = t(60);
            Object.defineProperty(e2, "CountrySelectorDropdown", { enumerable: true, get: function() {
              return r2.CountrySelectorDropdown;
            } });
            var o = t(7);
            Object.defineProperty(e2, "DialCodePreview", { enumerable: true, get: function() {
              return o.DialCodePreview;
            } });
            var i = t(425);
            Object.defineProperty(e2, "FlagEmoji", { enumerable: true, get: function() {
              return i.FlagEmoji;
            } });
            var u = t(28);
            Object.defineProperty(e2, "PhoneInput", { enumerable: true, get: function() {
              return u.PhoneInput;
            } });
            var l = t(946);
            Object.defineProperty(e2, "defaultCountries", { enumerable: true, get: function() {
              return l.defaultCountries;
            } });
            var s = t(452);
            Object.defineProperty(e2, "usePhone", { enumerable: true, get: function() {
              return s.usePhone;
            } });
            var c = t(882);
            Object.defineProperty(e2, "usePhoneInput", { enumerable: true, get: function() {
              return c.usePhoneInput;
            } });
            var d = t(393);
            Object.defineProperty(e2, "usePhoneValidation", { enumerable: true, get: function() {
              return d.usePhoneValidation;
            } });
            var f = t(332);
            Object.defineProperty(e2, "buildCountryData", { enumerable: true, get: function() {
              return f.buildCountryData;
            } }), Object.defineProperty(e2, "parseCountry", { enumerable: true, get: function() {
              return f.parseCountry;
            } }), Object.defineProperty(e2, "validatePhone", { enumerable: true, get: function() {
              return f.validatePhone;
            } });
          })(), n;
        })());
      })(build);
      var getDefaultCountries = function(availableCountries, initialCountry) {
        var countries = build.exports.defaultCountries.map(function(country) {
          var parsedCountry = build.exports.parseCountry(country);
          if (lodash.exports.isNil(parsedCountry.format))
            return country;
          var newFormatMask = parsedCountry.format.replace(/[^\\.]*/g, "");
          var fallbackFormatMask = "...............";
          return build.exports.buildCountryData(__assign(__assign({}, parsedCountry), { format: newFormatMask === "" ? fallbackFormatMask : newFormatMask }));
        });
        if (!lodash.exports.isNil(availableCountries) && lodash.exports.isArray(availableCountries) && availableCountries.length > 0) {
          countries = countries.filter(function(c) {
            var availableCountriesLowerCased = availableCountries.map(function(c2) {
              return c2.toLowerCase();
            });
            if (!lodash.exports.isNil(initialCountry) && c[2] === initialCountry) {
              return true;
            }
            return availableCountriesLowerCased.includes(c[2]);
          });
        }
        var usIndex = countries.findIndex(function(c) {
          return c[2] === "us";
        });
        var ukIndex = countries.findIndex(function(c) {
          return c[2] === "gb";
        });
        var beIndex = countries.findIndex(function(c) {
          return c[2] === "be";
        });
        var us = countries.splice(usIndex, 1);
        var uk = countries.splice(ukIndex, 1);
        var be = countries.splice(beIndex, 1);
        countries.unshift.apply(countries, __spreadArray(__spreadArray(__spreadArray([], us, false), uk, false), be, false));
        return countries;
      };
      var PhoneInputField = function(_a) {
        var onChange = _a.onChange, id = _a.id, label = _a.label, mandatory = _a.mandatory, value = _a.value, placeholder = _a.placeholder, _b = _a.initialCountry, initialCountry = _b === void 0 ? "us" : _b, availableCountries = _a.availableCountries, props = __rest(_a, ["onChange", "id", "label", "mandatory", "value", "placeholder", "initialCountry", "availableCountries"]);
        var countries = getDefaultCountries(availableCountries, initialCountry);
        var _c = build.exports.usePhoneInput({
          initialCountry,
          value,
          hideSpaceAfterDialCode: true,
          countries
        }), phone = _c.phone, handlePhoneValueChange = _c.handlePhoneValueChange, inputRef = _c.inputRef, country = _c.country, setCountry = _c.setCountry;
        var handleInputChange = function(e) {
          handlePhoneValueChange(e);
          onChange(e);
        };
        var handleCountrySelect = function(_a2) {
          var iso2 = _a2.iso2;
          setCountry(iso2);
        };
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$9.awell_input_field_wrapper }, { children: [jsxRuntime.exports.jsx(QuestionLabel, { htmlFor: id, label, mandatory }), jsxRuntime.exports.jsxs("div", __assign({ className: classes$9.awell_phone_input_field_container }, { children: [
          jsxRuntime.exports.jsx(build.exports.CountrySelector, { countries, selectedCountry: country, onSelect: handleCountrySelect, buttonStyle: {
            border: 0,
            height: 42,
            marginRight: 2,
            backgroundColor: "transparent"
          } }),
          jsxRuntime.exports.jsx("input", __assign({}, props, { type: "tel", id, ref: inputRef, className: classes$9.awell_input_field, placeholder, onChange: handleInputChange, "data-1p-ignore": true, value: phone, "data-testid": "input-".concat(id), dir: "ltr" }))
        ] }))] }));
      };
      PhoneInputField.displayName = "PhoneInputField";
      var handleUSException = function(number, originalValidation) {
        var _a;
        var areaCodes = (_a = originalValidation.country) === null || _a === void 0 ? void 0 : _a.areaCodes;
        var providedAreaCode = number.slice(2, 5);
        if (providedAreaCode.length === 3 && (areaCodes === null || areaCodes === void 0 ? void 0 : areaCodes.includes(providedAreaCode))) {
          return originalValidation;
        }
        var USValidation = build.exports.validatePhone(number, {
          countries: getDefaultCountries(["us"], void 0),
          charAfterDialCode: "",
          prefix: "+"
        });
        return USValidation;
      };
      var useValidate = function() {
        var validatePhoneNumber = function(number, availableCountries) {
          var validation = build.exports.validatePhone(number, {
            countries: getDefaultCountries(availableCountries, void 0),
            charAfterDialCode: "",
            prefix: "+"
          });
          if (number.startsWith("+1") && validation.isValid === false) {
            return handleUSException(number, validation);
          }
          return validation;
        };
        var isValidE164Number = function(number, availableCountries) {
          var validation = build.exports.validatePhone(number, {
            countries: getDefaultCountries(availableCountries, void 0),
            charAfterDialCode: "",
            prefix: "+"
          });
          if (number.startsWith("+1") && validation.isValid === false) {
            return handleUSException(number, validation).isValid;
          }
          return validation.isValid;
        };
        var numberMatchesAvailableCountries = function(number, availableCountries) {
          var _a;
          try {
            var validation = build.exports.validatePhone(number, {
              countries: getDefaultCountries(availableCountries, void 0),
              charAfterDialCode: "",
              prefix: "+"
            });
            if (number.startsWith("+1") && validation.isValid === false) {
              validation = handleUSException(number, validation);
            }
            if (!validation.country) {
              return false;
            }
            if (typeof availableCountries === "string") {
              return (_a = availableCountries === validation.country.iso2) !== null && _a !== void 0 ? _a : false;
            }
            return availableCountries.includes(validation.country.iso2);
          } catch (_b) {
            return false;
          }
        };
        var isPossibleE164Number = function(number) {
          return /^\+?[1-9]\d{1,14}$/.test(number);
        };
        var validateDateResponse = function(questionConfig, value) {
          var inputRequired = questionConfig === null || questionConfig === void 0 ? void 0 : questionConfig.mandatory;
          if (inputRequired === false && lodash.exports.isEmpty(value)) {
            return {
              isValid: true
            };
          }
          if (!questionConfig || !questionConfig.date) {
            return {
              isValid: true
            };
          }
          var parsedDate = new Date(value);
          var dateIsToday = isToday(parsedDate);
          var _a = questionConfig.date, allowed_dates = _a.allowed_dates, _b = _a.include_date_of_response, include_date_of_response = _b === void 0 ? false : _b;
          if (allowed_dates === exports2.AllowedDatesOptions.All) {
            return {
              isValid: true
            };
          }
          if (dateIsToday) {
            if (include_date_of_response === true) {
              return {
                isValid: true
              };
            } else {
              return {
                isValid: false,
                errorType: "DATE_CANNOT_BE_TODAY"
              };
            }
          }
          if (allowed_dates === exports2.AllowedDatesOptions.Past && parsedDate >= /* @__PURE__ */ new Date()) {
            return {
              isValid: false,
              errorType: "DATE_CANNOT_BE_IN_THE_FUTURE"
            };
          }
          if (allowed_dates === exports2.AllowedDatesOptions.Future && parsedDate <= /* @__PURE__ */ new Date()) {
            return {
              isValid: false,
              errorType: "DATE_CANNOT_BE_IN_THE_PAST"
            };
          }
          return {
            isValid: true
          };
        };
        var validateNumberResponse = function(questionConfig, value) {
          var _a, _b, _c, _d;
          var inputRequired = questionConfig === null || questionConfig === void 0 ? void 0 : questionConfig.mandatory;
          if (inputRequired === false && lodash.exports.isEmpty(value)) {
            return {
              isValid: true
            };
          }
          var isNumber = !isNaN(Number(value));
          if (!isNumber) {
            return {
              isValid: false,
              errorType: "NOT_A_NUMBER"
            };
          }
          if (!questionConfig || !questionConfig.number) {
            return {
              isValid: true
            };
          }
          var isRangeEnabled = !lodash.exports.isNil((_a = questionConfig === null || questionConfig === void 0 ? void 0 : questionConfig.number) === null || _a === void 0 ? void 0 : _a.range) && questionConfig.number.range.enabled === true;
          if (isRangeEnabled) {
            var range = (_b = questionConfig.number) === null || _b === void 0 ? void 0 : _b.range;
            var min = (_c = range === null || range === void 0 ? void 0 : range.min) !== null && _c !== void 0 ? _c : 0;
            var max = (_d = range === null || range === void 0 ? void 0 : range.max) !== null && _d !== void 0 ? _d : 0;
            var number = Number(value);
            if (number < min || number > max) {
              return {
                isValid: false,
                errorType: "OUT_OF_RANGE"
              };
            }
          }
          return {
            isValid: true
          };
        };
        return {
          isValidE164Number,
          isPossibleE164Number,
          validatePhoneNumber,
          numberMatchesAvailableCountries,
          validateDateResponse,
          validateNumberResponse
        };
      };
      var getMinValueForDateInput = function(dateConfig) {
        if (lodash.exports.isNil(dateConfig)) {
          return void 0;
        }
        if (dateConfig.allowed_dates === exports2.AllowedDatesOptions.Future) {
          if (dateConfig.include_date_of_response === true) {
            return format(/* @__PURE__ */ new Date(), "yyyy-MM-dd");
          }
          var datePlusOneDay = addDays(/* @__PURE__ */ new Date(), 1);
          return format(datePlusOneDay, "yyyy-MM-dd");
        }
        return void 0;
      };
      var getMaxValueForDateInput = function(dateConfig) {
        if (lodash.exports.isNil(dateConfig)) {
          return void 0;
        }
        if (dateConfig.allowed_dates === exports2.AllowedDatesOptions.Past) {
          if (dateConfig.include_date_of_response === true) {
            return format(/* @__PURE__ */ new Date(), "yyyy-MM-dd");
          }
          var dateMinusOneDay = subDays(/* @__PURE__ */ new Date(), 1);
          return format(dateMinusOneDay, "yyyy-MM-dd");
        }
        return void 0;
      };
      var getMinValueForNumberInput = function(numberConfig) {
        if (numberConfig && numberConfig.range && numberConfig.range.enabled === true) {
          return numberConfig.range.min;
        }
        return void 0;
      };
      var getMaxValueForNumberInput = function(numberConfig) {
        if (numberConfig && numberConfig.range && numberConfig.range.enabled === true) {
          return numberConfig.range.max;
        }
        return void 0;
      };
      var AUTO_PROGRESS_DELAY = 850;
      var QuestionData = function(_a) {
        var _b, _c, _d, _e, _f;
        var question = _a.question, control = _a.control, getValues = _a.getValues, labels = _a.labels, _g = _a.inputAutoFocus, inputAutoFocus = _g === void 0 ? false : _g, _h = _a.submitAndMoveToNextQuestion, submitAndMoveToNextQuestion = _h === void 0 ? lodash.exports.noop : _h, _j = _a.onAnswerChange, onAnswerChange = _j === void 0 ? lodash.exports.noop : _j, _k = _a.shouldAutoProgress, shouldAutoProgress = _k === void 0 ? function() {
          return false;
        } : _k;
        var config = question === null || question === void 0 ? void 0 : question.questionConfig;
        switch (question.userQuestionType) {
          case exports2.UserQuestionType.YesNo:
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, defaultValue: "", rules: { required: config === null || config === void 0 ? void 0 : config.mandatory }, render: function(_a2) {
              var _b2 = _a2.field, onChange = _b2.onChange, value = _b2.value;
              return jsxRuntime.exports.jsx(SingleChoiceQuestion, {
                label: question.title,
                options: [
                  {
                    id: "".concat(question.id, "-yes"),
                    value: "1",
                    label: labels.yes_label
                  },
                  {
                    id: "".concat(question.id, "-no"),
                    value: "0",
                    label: labels.no_label
                  }
                ],
                onChange: function(data) {
                  onChange(data);
                  if (value !== data) {
                    onAnswerChange();
                    if (shouldAutoProgress(question)) {
                      setTimeout(function() {
                        return submitAndMoveToNextQuestion();
                      }, AUTO_PROGRESS_DELAY);
                    }
                  }
                },
                questionId: question.id,
                value,
                mandatory: config === null || config === void 0 ? void 0 : config.mandatory,
                showFlickerOnSelected: shouldAutoProgress(question)
              });
            } });
          case exports2.UserQuestionType.MultipleSelect:
            return jsxRuntime.exports.jsx(Controller, {
              name: question.id,
              control,
              defaultValue: [],
              rules: {
                validate: function() {
                  return (config === null || config === void 0 ? void 0 : config.mandatory) ? getValues(question.id).length > 0 : true;
                }
              },
              render: function(_a2) {
                var _b2, _c2, _d2, _e2;
                var _f2 = _a2.field, onChange = _f2.onChange, value = _f2.value;
                if ((config === null || config === void 0 ? void 0 : config.use_select) === true) {
                  return jsxRuntime.exports.jsx(Select, {
                    id: question.id,
                    value,
                    labels: {
                      questionLabel: question.title,
                      placeholder: (_b2 = labels.select) === null || _b2 === void 0 ? void 0 : _b2.search_placeholder,
                      noOptions: (_c2 = labels.select) === null || _c2 === void 0 ? void 0 : _c2.no_options
                    },
                    onChange: function(data) {
                      onChange(data);
                      if (value !== data) {
                        onAnswerChange();
                      }
                    },
                    type: "multiple",
                    options: (_d2 = question.options) !== null && _d2 !== void 0 ? _d2 : [],
                    mandatory: config === null || config === void 0 ? void 0 : config.mandatory,
                    showCount: true,
                    filtering: true
                  });
                }
                return jsxRuntime.exports.jsx(MultipleChoiceQuestion, { label: question.title, options: (_e2 = question.options) !== null && _e2 !== void 0 ? _e2 : [], onChange: function(data) {
                  onChange(data);
                  if (value !== data) {
                    onAnswerChange();
                  }
                }, questionId: question.id, values: value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory });
              }
            });
          case exports2.UserQuestionType.MultipleChoice:
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, rules: { required: config === null || config === void 0 ? void 0 : config.mandatory }, render: function(_a2) {
              var _b2, _c2, _d2;
              var _e2 = _a2.field, onChange = _e2.onChange, value = _e2.value;
              if ((config === null || config === void 0 ? void 0 : config.use_select) === true) {
                return jsxRuntime.exports.jsx(Select, {
                  id: question.id,
                  value,
                  labels: {
                    questionLabel: question.title,
                    placeholder: (_b2 = labels.select) === null || _b2 === void 0 ? void 0 : _b2.search_placeholder,
                    noOptions: (_c2 = labels.select) === null || _c2 === void 0 ? void 0 : _c2.no_options
                  },
                  onChange: function(data) {
                    onChange(data);
                    onAnswerChange();
                  },
                  type: "single",
                  options: (_d2 = question.options) !== null && _d2 !== void 0 ? _d2 : [],
                  mandatory: config === null || config === void 0 ? void 0 : config.mandatory,
                  showCount: true,
                  filtering: true
                });
              }
              return jsxRuntime.exports.jsx(SingleChoiceQuestion, { label: question.title, options: question.options || [], onChange: function(data) {
                onChange(data);
                if (value !== data) {
                  onAnswerChange();
                  if (shouldAutoProgress(question)) {
                    setTimeout(function() {
                      return submitAndMoveToNextQuestion();
                    }, AUTO_PROGRESS_DELAY);
                  }
                }
              }, showFlickerOnSelected: shouldAutoProgress(question), questionId: question.id, value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory });
            } });
          case exports2.UserQuestionType.LongText:
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, defaultValue: "", rules: { required: config === null || config === void 0 ? void 0 : config.mandatory }, render: function(_a2) {
              var _b2 = _a2.field, onChange = _b2.onChange, value = _b2.value;
              return jsxRuntime.exports.jsx(LongTextField, { autoFocus: inputAutoFocus, onChange: function(e) {
                onChange(e.target.value);
                onAnswerChange();
              }, label: question.title, id: question.id, value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory });
            } });
          case exports2.UserQuestionType.Number:
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, defaultValue: "", rules: { required: config === null || config === void 0 ? void 0 : config.mandatory }, render: function(_a2) {
              var _b2 = _a2.field, onChange = _b2.onChange, value = _b2.value;
              return jsxRuntime.exports.jsx(InputField, { autoFocus: inputAutoFocus, type: "number", onChange: function(e) {
                onChange(e.target.value);
                onAnswerChange();
              }, label: question.title, id: question.id, value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory, min: getMinValueForNumberInput(config === null || config === void 0 ? void 0 : config.number), max: getMaxValueForNumberInput(config === null || config === void 0 ? void 0 : config.number) });
            } });
          case exports2.UserQuestionType.ShortText:
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, defaultValue: "", rules: { required: config === null || config === void 0 ? void 0 : config.mandatory }, render: function(_a2) {
              var _b2 = _a2.field, onChange = _b2.onChange, value = _b2.value;
              return jsxRuntime.exports.jsx(InputField, { autoFocus: inputAutoFocus, type: "text", onChange: function(e) {
                onChange(e.target.value);
                onAnswerChange();
              }, label: question.title, id: question.id, value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory });
            } });
          case exports2.UserQuestionType.Telephone:
            var availableCountries_1 = ((_c = (_b = config === null || config === void 0 ? void 0 : config.phone) === null || _b === void 0 ? void 0 : _b.available_countries) !== null && _c !== void 0 ? _c : []).map(function(c) {
              return c === null || c === void 0 ? void 0 : c.toLocaleLowerCase();
            }).filter(function(x) {
              return !lodash.exports.isNil(x);
            });
            var initialCountry_1 = (_f = (_e = (_d = config === null || config === void 0 ? void 0 : config.phone) === null || _d === void 0 ? void 0 : _d.default_country) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase()) !== null && _f !== void 0 ? _f : "gb";
            return jsxRuntime.exports.jsx(Controller, { name: question.id, control, defaultValue: "", render: function(_a2) {
              var _b2;
              var _c2 = _a2.field, onChange = _c2.onChange, value = _c2.value;
              return jsxRuntime.exports.jsx(PhoneInputField, { autoFocus: inputAutoFocus, onChange: function(e) {
                onChange(e.target.value);
                onAnswerChange();
              }, label: question.title, id: question.id, value, mandatory: (_b2 = question.questionConfig) === null || _b2 === void 0 ? void 0 : _b2.mandatory, availableCountries: availableCountries_1, initialCountry: initialCountry_1 });
            } });
          case exports2.UserQuestionType.Slider:
            return jsxRuntime.exports.jsx(Controller, {
              name: question.id,
              control,
              rules: {
                required: config === null || config === void 0 ? void 0 : config.mandatory,
                validate: function(value) {
                  if ((config === null || config === void 0 ? void 0 : config.mandatory) && (value === "" || value === void 0)) {
                    return false;
                  }
                  return true;
                }
              },
              render: function(_a2) {
                var _b2;
                var _c2 = _a2.field, onChange = _c2.onChange, value = _c2.value;
                return jsxRuntime.exports.jsx(RangeInput, { label: question.title, onChange: function(e) {
                  onChange(e.target.value);
                  onAnswerChange();
                }, touchTooltipLabel: (_b2 = labels.slider) === null || _b2 === void 0 ? void 0 : _b2.tooltip_guide, id: question.id, sliderConfig: config === null || config === void 0 ? void 0 : config.slider, value: value === "" ? void 0 : value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory });
              }
            });
          case exports2.UserQuestionType.Date:
            return jsxRuntime.exports.jsx(Controller, {
              name: question.id,
              control,
              rules: {
                required: config === null || config === void 0 ? void 0 : config.mandatory
              },
              render: function(_a2) {
                var _b2 = _a2.field, onChange = _b2.onChange, value = _b2.value;
                return jsxRuntime.exports.jsx(InputField, { autoFocus: inputAutoFocus, type: "date", label: question.title, onChange: function(e) {
                  onChange(e.target.value);
                  onAnswerChange();
                }, id: question.id, value, mandatory: config === null || config === void 0 ? void 0 : config.mandatory, min: getMinValueForDateInput(config === null || config === void 0 ? void 0 : config.date), max: getMaxValueForDateInput(config === null || config === void 0 ? void 0 : config.date) });
              }
            });
          case exports2.UserQuestionType.Description:
            return jsxRuntime.exports.jsx(Description, { content: question.title });
          default:
            return jsxRuntime.exports.jsx("div", { children: "Question Type Not Implemented" });
        }
      };
      var Question = function(_a) {
        var question = _a.question, control = _a.control, getValues = _a.getValues, errors = _a.errors, _b = _a.labels, labels = _b === void 0 ? {
          yes_label: "Yes",
          no_label: "No",
          slider: {
            tooltip_guide: "Touch to select a value"
          }
        } : _b, _c = _a.inputAutoFocus, inputAutoFocus = _c === void 0 ? false : _c, submitAndMoveToNextQuestion = _a.submitAndMoveToNextQuestion, onAnswerChange = _a.onAnswerChange, shouldAutoProgress = _a.shouldAutoProgress;
        var _d = React.useState(0), isVisible = _d[0], setVisible = _d[1];
        var style = { "--awell-question-opacity": isVisible };
        React.useLayoutEffect(function() {
          setTimeout(function() {
            setVisible(1);
          }, 0);
        }, []);
        var currentError = errors.find(function(_a2) {
          var id = _a2.id;
          return id === question.id;
        });
        return jsxRuntime.exports.jsxs("div", __assign({ style, className: classes$a.awell_question }, { children: [jsxRuntime.exports.jsx(QuestionData, { question, control, getValues, labels, inputAutoFocus, submitAndMoveToNextQuestion, onAnswerChange, shouldAutoProgress }), currentError && jsxRuntime.exports.jsx("div", __assign({ className: classes$a.error }, { children: jsxRuntime.exports.jsx(Text, __assign({ variant: "textSmall", color: "var(--awell-signalError100)" }, { children: currentError.error })) }))] }));
      };
      var classes$8 = { "awell_attachment_list": "awell__attachmentList_awell_attachment_list" };
      var AttachmentList = function(_a) {
        var attachments = _a.attachments, labels = _a.labels, icon = _a.icon;
        return jsxRuntime.exports.jsx("div", __assign({ className: classes$8.awell_attachment_list }, { children: attachments.map(function(_a2) {
          var url = _a2.url, name = _a2.name, type = _a2.type;
          var typeLowerCase = type.toLowerCase();
          var label = labels[typeLowerCase] || "";
          return jsxRuntime.exports.jsx(MessageAttachment, __assign({ url, name, label }, { children: icon }), "".concat(url, "-").concat(name));
        }) }));
      };
      var useScrollHint = function() {
        var _a = React.useState(false), showScrollHint = _a[0], setShowScrollHint = _a[1];
        var determineShowScrollHint = function() {
          var mainContentEl = document.getElementById("ahp_main_content_with_scroll_hint");
          if (mainContentEl) {
            var isElementTotalHeightHigherThanElementVisibleHeight = mainContentEl.scrollHeight > mainContentEl.offsetHeight;
            var hasUserScrolledToBottomOfEl = Math.ceil(mainContentEl.scrollTop + mainContentEl.offsetHeight) >= mainContentEl.scrollHeight - 5;
            if (isElementTotalHeightHigherThanElementVisibleHeight && !hasUserScrolledToBottomOfEl) {
              setShowScrollHint(true);
            } else {
              setShowScrollHint(false);
            }
          } else {
            setShowScrollHint(false);
          }
        };
        React.useEffect(function() {
          determineShowScrollHint();
        }, [window.document.body.offsetHeight]);
        React.useEffect(function() {
          determineShowScrollHint();
          var mainContentEl = document.getElementById("ahp_main_content_with_scroll_hint");
          window.addEventListener("resize", determineShowScrollHint);
          if (mainContentEl) {
            mainContentEl.addEventListener("scroll", determineShowScrollHint);
          }
          return function() {
            window.removeEventListener("resize", determineShowScrollHint);
            if (mainContentEl) {
              mainContentEl.removeEventListener("scroll", determineShowScrollHint);
            }
          };
        }, []);
        return {
          showScrollHint,
          determineShowScrollHint
        };
      };
      var classes$7 = { "footer": "awell__hostedPageFooter_footer", "scrollHint": "awell__hostedPageFooter_scrollHint", "visible": "awell__hostedPageFooter_visible", "hidden": "awell__hostedPageFooter_hidden" };
      var HostedPageFooter = function(_a) {
        var children = _a.children, _b = _a.showScrollHint, showScrollHint = _b === void 0 ? false : _b;
        return jsxRuntime.exports.jsxs("footer", __assign({ className: classes$7.footer }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$7.scrollHint, " ").concat(showScrollHint ? classes$7.visible : classes$7.hidden), id: "awell__form_scrollhint" }, { children: jsxRuntime.exports.jsx(ScrollIndicator, {}) })), children] }));
      };
      var classes$6 = { "container": "awell__checklist_container", "awell_checklist": "awell__checklist_awell_checklist", "title": "awell__checklist_title", "checklist": "awell__checklist_checklist", "checkboxListFormControl": "awell__checklist_checkboxListFormControl", "button_wrapper": "awell__checklist_button_wrapper" };
      var layoutClasses = { "layout_container": "awell__hostedPageLayout_layout_container", "withoutLogo": "awell__hostedPageLayout_withoutLogo", "fullViewportHeight": "awell__hostedPageLayout_fullViewportHeight", "flexible": "awell__hostedPageLayout_flexible", "main_content": "awell__hostedPageLayout_main_content" };
      var Checklist = function(_a) {
        var title = _a.title, items = _a.items, onSubmit = _a.onSubmit, _b = _a.readOnly, readOnly = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, submitLabel = _a.submitLabel;
        var _d = React.useState(readOnly ? items : []), checkedItems = _d[0], setCheckedItems = _d[1];
        var showScrollHint = useScrollHint().showScrollHint;
        var handleChange = function(item) {
          return function(checked) {
            if (checked) {
              setCheckedItems(__spreadArray(__spreadArray([], checkedItems, true), [item], false));
            } else {
              setCheckedItems(checkedItems.filter(function(checkedItem) {
                return checkedItem !== item;
              }));
            }
          };
        };
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$6.awell_checklist, " ").concat(classes$6.container) }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$6.title }, { children: jsxRuntime.exports.jsx(QuestionLabel, { label: title }) })), jsxRuntime.exports.jsx("div", __assign({ className: classes$6.checklist }, { children: items.map(function(item) {
          return jsxRuntime.exports.jsx(CheckboxButton, { onChange: function(event) {
            return handleChange(item)(event.target.checked);
          }, label: item.label, id: item.id, disabled: readOnly, name: "checklist-".concat(title) }, item.id);
        }) }))] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint }, { children: jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$6.button_wrapper, " ").concat(classes$6.container) }, { children: jsxRuntime.exports.jsx(Button, __assign({ onClick: onSubmit, disabled: checkedItems.length !== items.length || readOnly || disabled, "data-cy": "submitChecklistButton" }, { children: submitLabel })) })) }))] });
      };
      var classes$5 = { "container": "awell__message_container", "awell_message": "awell__message_awell_message", "slate-MediaEmbedElement-input": "awell__message_slate-MediaEmbedElement-input", "slate-MediaEmbedElement-iframe": "awell__message_slate-MediaEmbedElement-iframe", "content": "awell__message_content", "message_title": "awell__message_message_title", "attachmentList": "awell__message_attachmentList", "button_wrapper": "awell__message_button_wrapper" };
      var Message = function(_a) {
        var onMessageRead = _a.onMessageRead, content = _a.content, subject = _a.subject, children = _a.children, attachmentIcon = _a.attachmentIcon, attachmentLabels = _a.attachmentLabels, attachments = _a.attachments, buttonLabels = _a.buttonLabels;
        var showScrollHint = useScrollHint().showScrollHint;
        var cleanContent = generatePureHtml(content);
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: jsxRuntime.exports.jsxs("article", __assign({ className: "".concat(classes$5.awell_message, " ").concat(classes$5.container) }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$5.message_title }, { children: subject })), jsxRuntime.exports.jsx("div", __assign({ className: classes$5.content }, { children: jsxRuntime.exports.jsx(RichTextViewer, { content: cleanContent }) })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$5.attachmentList }, { children: [jsxRuntime.exports.jsx(AttachmentList, { attachments, icon: attachmentIcon, labels: attachmentLabels }), children] }))] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint }, { children: jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$5.button_wrapper, " ").concat(classes$5.container) }, { children: jsxRuntime.exports.jsx(Button, __assign({ "data-cy": "markMessageAsReadButton", variant: "secondary", onClick: onMessageRead }, { children: buttonLabels.readMessage })) })) }))] });
      };
      var classes$4 = { "container": "awell__form_container", "traditional_container": "awell__form_traditional_container", "awell_wizard_form": "awell__form_awell_wizard_form", "form_progress": "awell__form_form_progress", "loadingContainer": "awell__form_loadingContainer", "title": "awell__form_title", "wizard_form": "awell__form_wizard_form", "conversational_button_wrapper": "awell__form_conversational_button_wrapper", "traditional_button_wrapper": "awell__form_traditional_button_wrapper", "traditional_form": "awell__form_traditional_form", "traditional_form_question": "awell__form_traditional_form_question", "trademark": "awell__form_trademark", "traditional": "awell__form_traditional", "conversational": "awell__form_conversational" };
      var useClickOutsideNotifier = function(_a) {
        var ref = _a.ref, clickOutsideHandler = _a.clickOutsideHandler;
        React.useEffect(function() {
          var handleClickOutside = function(event) {
            if ((ref === null || ref === void 0 ? void 0 : ref.current) && !(ref === null || ref === void 0 ? void 0 : ref.current.contains(event.target))) {
              clickOutsideHandler();
            }
          };
          document.addEventListener("mousedown", handleClickOutside);
          return function() {
            document.removeEventListener("mousedown", handleClickOutside);
          };
        }, [ref, clickOutsideHandler]);
      };
      var getDefaultValue = function(question) {
        switch (question.userQuestionType) {
          case exports2.UserQuestionType.MultipleSelect:
            return [];
          case exports2.UserQuestionType.Slider:
            return "";
          default:
            return "";
        }
      };
      var getInitialValues = function(questions) {
        return questions.reduce(function(obj, item) {
          var _a;
          return __assign(__assign({}, obj), (_a = {}, _a[item.id] = getDefaultValue(item), _a));
        }, {});
      };
      var getValue = function(answer) {
        if (typeof answer === "string") {
          return answer;
        }
        if (typeof answer === "number") {
          return "".concat(answer);
        }
        if (Array.isArray(answer)) {
          return JSON.stringify(answer.map(function(_a) {
            var value = _a.value;
            return value;
          }));
        }
        if (typeof answer.value === "boolean") {
          return answer.value ? "1" : "0";
        }
        if (typeof answer.value === "string") {
          return "".concat(answer.value);
        }
        return JSON.stringify(answer === null || answer === void 0 ? void 0 : answer.value);
      };
      var convertToAwellInput = function(formResponse) {
        return Object.keys(formResponse).map(function(question_id) {
          return {
            question_id,
            value: getValue(formResponse[question_id])
          };
        });
      };
      var convertToFormFormat = function(answersAsString, questions) {
        if (questions == null || answersAsString === void 0 || isEmpty(answersAsString)) {
          return {};
        }
        try {
          return JSON.parse(answersAsString);
        } catch (e) {
          console.warn("Could not parse answers", e);
          return {};
        }
      };
      var updateVisibility = function(questions, evaluation_results) {
        return questions.map(function(question) {
          var result = evaluation_results.find(function(_a) {
            var question_id = _a.question_id;
            return question_id === question.id;
          });
          var visible = !result ? true : result === null || result === void 0 ? void 0 : result.satisfied;
          return __assign(__assign({}, question), { visible });
        });
      };
      var isEmpty = function(value) {
        return typeof Array.isArray(value) && value.length === 0 || typeof value === "string" && value.length === 0 || typeof value === "object" && Object.keys(value).length === 0;
      };
      var calculatePercentageCompleted = function(_a) {
        var currentQuestionId = _a.currentQuestionId, allQuestions = _a.allQuestions;
        var currentQuestionIndex = allQuestions.findIndex(function(q) {
          return q.id === currentQuestionId;
        });
        if (currentQuestionIndex === -1) {
          return 0;
        }
        return Math.round((currentQuestionIndex + 1) / allQuestions.length * 100);
      };
      var getErrorsForQuestion = function(currentQuestion, formMethods, errorLabels, isValidE164Number, validateDateResponse, validateNumberResponse) {
        var _a;
        if ((currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.userQuestionType) === exports2.UserQuestionType.Description) {
          return [];
        }
        var isQuestionMandatory = (_a = currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.questionConfig) === null || _a === void 0 ? void 0 : _a.mandatory;
        var valueOfCurrentQuestion = formMethods.getValues(currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.id);
        if (isQuestionMandatory && isEmpty(valueOfCurrentQuestion)) {
          return [{ id: currentQuestion.id, error: errorLabels.required }];
        }
        if ((currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.userQuestionType) === exports2.UserQuestionType.Telephone) {
          if (valueOfCurrentQuestion !== "") {
            var errorLabel = errorLabels.invalidPhoneNumber;
            try {
              var isValid2 = isValidE164Number(valueOfCurrentQuestion);
              if (!isValid2) {
                return [{ id: currentQuestion.id, error: errorLabel }];
              }
            } catch (error2) {
              return [{ id: currentQuestion.id, error: errorLabel }];
            }
          }
        }
        if ((currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.userQuestionType) === exports2.UserQuestionType.Date) {
          var error = validateDateResponse(currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.questionConfig, valueOfCurrentQuestion);
          if (error.isValid === false) {
            switch (error.errorType) {
              case "DATE_CANNOT_BE_IN_THE_FUTURE":
                return [
                  {
                    id: currentQuestion.id,
                    error: errorLabels.dateCannotBeInTheFuture || "Date cannot be in the future"
                  }
                ];
              case "DATE_CANNOT_BE_IN_THE_PAST":
                return [
                  {
                    id: currentQuestion.id,
                    error: errorLabels.dateCannotBeInThePast || "Date cannot be in the past"
                  }
                ];
              case "DATE_CANNOT_BE_TODAY":
                return [
                  {
                    id: currentQuestion.id,
                    error: errorLabels.dateCannotBeToday || "Date cannot be today"
                  }
                ];
            }
          }
        }
        if ((currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.userQuestionType) === exports2.UserQuestionType.Number) {
          var error = validateNumberResponse(currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.questionConfig, valueOfCurrentQuestion);
          if (error.isValid === false) {
            switch (error.errorType) {
              case "NOT_A_NUMBER":
                return [
                  {
                    id: currentQuestion.id,
                    error: errorLabels.notANumber || "Value must be a valid number"
                  }
                ];
              case "OUT_OF_RANGE":
                return [
                  {
                    id: currentQuestion.id,
                    error: errorLabels.numberOutOfRange || "The number cannot be out of range"
                  }
                ];
            }
          }
        }
        return [];
      };
      var getDirtyFieldValues = function(formMethods) {
        var getValues = formMethods.getValues, getFieldState = formMethods.getFieldState;
        var allValues = getValues();
        var dirtyValues = Object.keys(getValues()).reduce(function(acc, key) {
          if (getFieldState(key).isDirty) {
            acc[key] = allValues[key];
          }
          return acc;
        }, {});
        return dirtyValues;
      };
      var markInitialValuesAsDirty = function(_a) {
        var formMethods = _a.formMethods, defaultValues = _a.defaultValues, initialValues = _a.initialValues;
        formMethods.reset(defaultValues);
        Object.keys(initialValues).forEach(function(key) {
          formMethods.setValue(key, initialValues[key], {
            shouldDirty: true,
            shouldTouch: true
          });
        });
      };
      var useTraditionalForm = function(_a) {
        var questions = _a.questions, evaluateDisplayConditions = _a.evaluateDisplayConditions, onSubmit = _a.onSubmit, errorLabels = _a.errorLabels, storedAnswers = _a.storedAnswers, _b = _a.autosaveAnswers, autosaveAnswers = _b === void 0 ? true : _b, onAnswersChange = _a.onAnswersChange;
        var initialValues = convertToFormFormat(storedAnswers, questions);
        var formMethods = useForm({
          defaultValues: getInitialValues(questions),
          shouldUnregister: false,
          shouldFocusError: true,
          mode: "all"
        });
        var _c = React.useState([]), visibleQuestions = _c[0], setVisibleQuestions = _c[1];
        var _d = React.useState([]), errors = _d[0], setErrors = _d[1];
        var _e = React.useState(false), formHasErrors = _e[0], setFormHasErrors = _e[1];
        var _f = React.useState(false), isSubmittingForm = _f[0], setIsSubmittingForm = _f[1];
        var _g = useValidate(), isValidE164Number = _g.isValidE164Number, validateDateResponse = _g.validateDateResponse, validateNumberResponse = _g.validateNumberResponse;
        var updateQuestionVisibility = React.useCallback(function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var formValuesInput, evaluationResults, updatedQuestions;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  formValuesInput = convertToAwellInput(getDirtyFieldValues(formMethods));
                  return [4, evaluateDisplayConditions(formValuesInput)];
                case 1:
                  evaluationResults = _a2.sent();
                  updatedQuestions = updateVisibility(questions, evaluationResults).filter(function(e) {
                    return e.visible;
                  });
                  setVisibleQuestions(updatedQuestions);
                  return [2, updatedQuestions];
              }
            });
          });
        }, [JSON.stringify(questions)]);
        React.useEffect(function() {
          var _a2;
          if (!formMethods.formState.isDirty || !onAnswersChange || !autosaveAnswers) {
            return;
          }
          onAnswersChange((_a2 = JSON.stringify(formMethods.getValues())) !== null && _a2 !== void 0 ? _a2 : "{}");
        }, [formMethods.watch()]);
        React.useEffect(function() {
          updateQuestionVisibility();
        }, [updateQuestionVisibility]);
        React.useEffect(function() {
          if (autosaveAnswers && !isEmpty(initialValues)) {
            markInitialValuesAsDirty({
              formMethods,
              initialValues,
              defaultValues: getInitialValues(questions)
            });
            formMethods.trigger().then(function() {
              var _a2;
              var allValues = formMethods.getValues();
              if (onAnswersChange) {
                onAnswersChange((_a2 = JSON.stringify(allValues)) !== null && _a2 !== void 0 ? _a2 : "{}");
              }
              updateQuestionVisibility();
            });
          }
        }, []);
        var handleConvertAndSubmitForm = function(formResponse) {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  if (isSubmittingForm) {
                    return [2];
                  }
                  setIsSubmittingForm(true);
                  return [4, onSubmit(convertToAwellInput(formResponse))];
                case 1:
                  _a2.sent();
                  setIsSubmittingForm(false);
                  return [2];
              }
            });
          });
        };
        var submitForm = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var formErrors;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, updateQuestionVisibility()];
                case 1:
                  _a2.sent();
                  formErrors = visibleQuestions.flatMap(function(vq) {
                    return getErrorsForQuestion(vq, formMethods, errorLabels, isValidE164Number, validateDateResponse, validateNumberResponse);
                  });
                  setErrors(formErrors);
                  if (formErrors.length === 0) {
                    setFormHasErrors(false);
                    formMethods.handleSubmit(handleConvertAndSubmitForm)();
                  } else {
                    setFormHasErrors(true);
                  }
                  return [2];
              }
            });
          });
        };
        return {
          updateQuestionVisibility,
          submitForm,
          isSubmittingForm,
          formMethods,
          errors,
          questionWithVisiblity: visibleQuestions,
          formHasErrors
        };
      };
      var useConversationalForm = function(_a) {
        var questions = _a.questions, evaluateDisplayConditions = _a.evaluateDisplayConditions, onSubmit = _a.onSubmit, errorLabels = _a.errorLabels, storedAnswers = _a.storedAnswers, _b = _a.autosaveAnswers, autosaveAnswers = _b === void 0 ? true : _b, onAnswersChange = _a.onAnswersChange;
        var initialValues = convertToFormFormat(storedAnswers, questions);
        var _c = useValidate(), isValidE164Number = _c.isValidE164Number, validateDateResponse = _c.validateDateResponse, validateNumberResponse = _c.validateNumberResponse;
        var formMethods = useForm({
          defaultValues: getInitialValues(questions),
          shouldUnregister: false,
          shouldFocusError: true,
          mode: "all"
        });
        var _d = React.useState([]), visibleQuestions = _d[0], setVisibleQuestions = _d[1];
        var _e = React.useState([]), errors = _e[0], setErrors = _e[1];
        var _f = React.useState(0), current = _f[0], setCurrent = _f[1];
        var _g = React.useState(true), isEvaluatingQuestionVisibility = _g[0], setIsEvaluatingQuestionVisibility = _g[1];
        var _h = React.useState(0), percentageCompleted = _h[0], setPercentageCompleted = _h[1];
        var _j = React.useState(false), isSubmittingForm = _j[0], setIsSubmittingForm = _j[1];
        var updateQuestionVisibility = React.useCallback(function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var formValuesInput, evaluationResults, updatedQuestions;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  setIsEvaluatingQuestionVisibility(true);
                  formValuesInput = convertToAwellInput(getDirtyFieldValues(formMethods));
                  return [4, evaluateDisplayConditions(formValuesInput)];
                case 1:
                  evaluationResults = _a2.sent();
                  updatedQuestions = updateVisibility(questions, evaluationResults).filter(function(e) {
                    return e.visible;
                  });
                  setVisibleQuestions(updatedQuestions);
                  setIsEvaluatingQuestionVisibility(false);
                  return [2, updatedQuestions];
              }
            });
          });
        }, [JSON.stringify(questions)]);
        React.useEffect(function() {
          var _a2;
          if (!formMethods.formState.isDirty || !onAnswersChange || !autosaveAnswers) {
            return;
          }
          onAnswersChange((_a2 = JSON.stringify(formMethods.getValues())) !== null && _a2 !== void 0 ? _a2 : "{}");
        }, [formMethods.watch()]);
        React.useEffect(function() {
          var _a2;
          var percentageCompletedTemp = calculatePercentageCompleted({
            currentQuestionId: ((_a2 = visibleQuestions === null || visibleQuestions === void 0 ? void 0 : visibleQuestions[current]) === null || _a2 === void 0 ? void 0 : _a2.id) || "",
            allQuestions: questions
          });
          setPercentageCompleted(percentageCompletedTemp);
        }, [current, visibleQuestions]);
        React.useEffect(function() {
          updateQuestionVisibility();
        }, [updateQuestionVisibility]);
        React.useEffect(function() {
          if (autosaveAnswers && !isEmpty(initialValues)) {
            markInitialValuesAsDirty({
              formMethods,
              initialValues,
              defaultValues: getInitialValues(questions)
            });
            formMethods.trigger().then(function() {
              var _a2;
              var allValues = formMethods.getValues();
              if (onAnswersChange) {
                onAnswersChange((_a2 = JSON.stringify(allValues)) !== null && _a2 !== void 0 ? _a2 : "{}");
              }
              updateQuestionVisibility();
            });
          }
        }, []);
        var handleCheckForErrors = function(currentQuestion) {
          var errorsWithoutCurrent = errors.filter(function(err) {
            return err.id !== (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.id);
          });
          var existingErrors = getErrorsForQuestion(currentQuestion, formMethods, errorLabels, isValidE164Number, validateDateResponse, validateNumberResponse);
          setErrors(__spreadArray(__spreadArray([], errorsWithoutCurrent, true), existingErrors, true));
          return existingErrors.length > 0;
        };
        var handleGoToNextQuestion = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var hasErrors, updatedQuestions, isLastVisibleQuestion;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  hasErrors = handleCheckForErrors(visibleQuestions === null || visibleQuestions === void 0 ? void 0 : visibleQuestions[current]);
                  if (!!hasErrors) return [3, 4];
                  _a2.label = 1;
                case 1:
                  _a2.trys.push([1, , 3, 4]);
                  return [4, updateQuestionVisibility()];
                case 2:
                  updatedQuestions = _a2.sent();
                  isLastVisibleQuestion = current === updatedQuestions.length - 1;
                  if (isLastVisibleQuestion) {
                    formMethods.handleSubmit(handleConvertAndSubmitForm)();
                    return [2];
                  }
                  return [3, 4];
                case 3:
                  setCurrent(current + 1);
                  return [7];
                case 4:
                  if (current === -1) {
                    setCurrent(current + 1);
                  }
                  return [2];
              }
            });
          });
        };
        var handleGoToPrevQuestion = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            var isFirstVisibleQuestion;
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  isFirstVisibleQuestion = current === 0;
                  _a2.label = 1;
                case 1:
                  _a2.trys.push([1, , 3, 4]);
                  return [4, updateQuestionVisibility()];
                case 2:
                  _a2.sent();
                  if (isFirstVisibleQuestion) {
                    return [2];
                  }
                  return [3, 4];
                case 3:
                  if (!isFirstVisibleQuestion) {
                    setCurrent(current - 1);
                  }
                  return [7];
                case 4:
                  return [2];
              }
            });
          });
        };
        var handleConvertAndSubmitForm = function(formResponse) {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  if (isSubmittingForm) {
                    return [2];
                  }
                  setIsSubmittingForm(true);
                  return [4, onSubmit(convertToAwellInput(formResponse))];
                case 1:
                  _a2.sent();
                  setIsSubmittingForm(false);
                  return [2];
              }
            });
          });
        };
        var submitForm = function() {
          return __awaiter(void 0, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              switch (_a2.label) {
                case 0:
                  return [4, updateQuestionVisibility().then(function(updatedQuestions) {
                    var doNextQuestionExist = current !== updatedQuestions.length - 1;
                    if (doNextQuestionExist) {
                      return handleGoToNextQuestion();
                    }
                    var hasErrors = handleCheckForErrors(visibleQuestions === null || visibleQuestions === void 0 ? void 0 : visibleQuestions[current]);
                    if (!hasErrors) {
                      formMethods.handleSubmit(handleConvertAndSubmitForm)();
                    }
                  })];
                case 1:
                  _a2.sent();
                  return [2];
              }
            });
          });
        };
        return {
          updateQuestionVisibility,
          submitForm,
          isSubmittingForm,
          handleGoToNextQuestion,
          handleGoToPrevQuestion,
          formMethods,
          currentQuestion: visibleQuestions === null || visibleQuestions === void 0 ? void 0 : visibleQuestions[current],
          percentageCompleted,
          errors,
          isFirstQuestion: current === 0,
          isLastQuestion: current === visibleQuestions.length - 1,
          isEvaluatingQuestionVisibility
        };
      };
      var useHtmlScript = function(url) {
        var _a = React.useState(false), isLoaded = _a[0], setIsLoaded = _a[1];
        React.useEffect(function() {
          var script = document.createElement("script");
          script.onload = function() {
            setIsLoaded(true);
          };
          script.src = url;
          script.async = true;
          document.body.appendChild(script);
          return function() {
            document.body.removeChild(script);
            setIsLoaded(false);
          };
        }, [url]);
        return { isLoaded };
      };
      var classes$3 = { "close_button": "awell__CloseButton_close_button", "close_button_svg": "awell__CloseButton_close_button_svg" };
      var CloseButton = function(_a) {
        var onClose = _a.onClose;
        return jsxRuntime.exports.jsx("button", __assign({ type: "button", onClick: onClose, className: classes$3.close_button, id: "awell_close_button" }, { children: jsxRuntime.exports.jsx("svg", __assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 20 20", fill: "currentColor", className: classes$3.close_button_svg }, { children: jsxRuntime.exports.jsx("path", { d: "M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" }) })) }));
      };
      var HostedPageLayout = function(_a) {
        var children = _a.children, onCloseHostedPage = _a.onCloseHostedPage, logo = _a.logo, _b = _a.hideCloseButton, hideCloseButton = _b === void 0 ? false : _b;
        var layoutMode = useTheme().layoutMode;
        return jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(layoutClasses.layout_container, " ").concat(layoutClasses[layoutMode], " ").concat(logo ? "" : layoutClasses.withoutLogo) }, { children: [!hideCloseButton && jsxRuntime.exports.jsx(CloseButton, { onClose: onCloseHostedPage }), logo && jsxRuntime.exports.jsx("header", { children: jsxRuntime.exports.jsx(Navbar, { logo }) }), children] }));
      };
      var classes$2 = { "loading_indicators": "awell__loadActivityPlaceholder_loading_indicators", "loading_indicator": "awell__loadActivityPlaceholder_loading_indicator", "wave": "awell__loadActivityPlaceholder_wave" };
      var LoadActivityPlaceholder = function() {
        return jsxRuntime.exports.jsxs("div", __assign({ className: classes$2.loading_indicators }, { children: [jsxRuntime.exports.jsx("div", { className: classes$2.loading_indicator }), jsxRuntime.exports.jsx("div", { className: classes$2.loading_indicator }), jsxRuntime.exports.jsx("div", { className: classes$2.loading_indicator })] }));
      };
      var ConversationalForm = function(_a) {
        var form = _a.form, onSubmit = _a.onSubmit, buttonLabels = _a.buttonLabels, evaluateDisplayConditions = _a.evaluateDisplayConditions, errorLabels = _a.errorLabels, questionLabels = _a.questionLabels, storedAnswers = _a.storedAnswers, onAnswersChange = _a.onAnswersChange, _b = _a.autoProgress, autoProgress = _b === void 0 ? false : _b, _c = _a.autosaveAnswers, autosaveAnswers = _c === void 0 ? true : _c, _d = _a.showProgressBar, showProgressBar = _d === void 0 ? true : _d;
        var _e = useConversationalForm({
          questions: form.questions,
          onSubmit,
          evaluateDisplayConditions,
          errorLabels,
          storedAnswers,
          autosaveAnswers,
          onAnswersChange
        }), submitForm = _e.submitForm, isSubmittingForm = _e.isSubmittingForm, handleGoToNextQuestion = _e.handleGoToNextQuestion, handleGoToPrevQuestion = _e.handleGoToPrevQuestion, _f = _e.formMethods, control = _f.control, getValues = _f.getValues, currentQuestion = _e.currentQuestion, percentageCompleted = _e.percentageCompleted, errors = _e.errors, isFirstQuestion = _e.isFirstQuestion, isLastQuestion = _e.isLastQuestion, isEvaluatingQuestionVisibility = _e.isEvaluatingQuestionVisibility;
        var _g = useScrollHint(), showScrollHint = _g.showScrollHint, determineShowScrollHint = _g.determineShowScrollHint;
        var submitAndMoveToNextQuestion = function() {
          if (!isLastQuestion) {
            handleGoToNextQuestion();
          }
        };
        React.useEffect(function() {
          determineShowScrollHint();
        }, [currentQuestion]);
        var shouldAutoProgress = function(question) {
          if (autoProgress === false) {
            return false;
          }
          if (question.userQuestionType) {
            return [exports2.UserQuestionType.YesNo, exports2.UserQuestionType.MultipleChoice].includes(question.userQuestionType);
          }
          return false;
        };
        var hideProgressIndicator = isEvaluatingQuestionVisibility && percentageCompleted === 100 || form.questions.length === 1 || showProgressBar === false;
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$4.awell_wizard_form, " ").concat(classes$4.container) }, { children: [!hideProgressIndicator && jsxRuntime.exports.jsx("div", __assign({ className: classes$4.form_progress }, { children: jsxRuntime.exports.jsx(ProgressIndicator, { percentageCompleted }) })), isEvaluatingQuestionVisibility || (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.id) === void 0 ? jsxRuntime.exports.jsx("div", __assign({ className: classes$4.loadingContainer }, { children: jsxRuntime.exports.jsx(LoadActivityPlaceholder, {}) })) : jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, { children: jsxRuntime.exports.jsxs("div", __assign({ className: classes$4.wizard_form }, { children: [jsxRuntime.exports.jsx(Question, { question: currentQuestion, control, getValues, errors, labels: questionLabels, submitAndMoveToNextQuestion, inputAutoFocus: true, shouldAutoProgress }, currentQuestion.id), (form === null || form === void 0 ? void 0 : form.trademark) && jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$4.trademark, " ").concat(classes$4.conversational) }, { children: form.trademark }))] })) })] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint }, { children: !isEvaluatingQuestionVisibility && jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$4.conversational_button_wrapper, " ").concat(classes$4.container) }, { children: [jsxRuntime.exports.jsx("div", { children: !isFirstQuestion && jsxRuntime.exports.jsx(Button, __assign({ variant: "tertiary", onClick: handleGoToPrevQuestion, "data-cy": "navigateToPrevQuestionButton" }, { children: buttonLabels.prev })) }), isLastQuestion ? jsxRuntime.exports.jsx(Button, __assign({ onClick: submitForm, type: "submit", "data-cy": "submitFormButton", disabled: isSubmittingForm }, { children: buttonLabels.submit })) : jsxRuntime.exports.jsx(Button, __assign({ variant: "secondary", onClick: handleGoToNextQuestion, "data-cy": "navigateToNextQuestionButton" }, { children: buttonLabels.next }))] })) }))] });
      };
      var TraditionalForm = function(_a) {
        var form = _a.form, onSubmit = _a.onSubmit, buttonLabels = _a.buttonLabels, evaluateDisplayConditions = _a.evaluateDisplayConditions, errorLabels = _a.errorLabels, storedAnswers = _a.storedAnswers, onAnswersChange = _a.onAnswersChange, _b = _a.autosaveAnswers, autosaveAnswers = _b === void 0 ? true : _b;
        var _c = useTheme(), updateLayoutMode = _c.updateLayoutMode, resetLayoutMode = _c.resetLayoutMode;
        var _d = useTraditionalForm({
          questions: form.questions,
          onSubmit,
          evaluateDisplayConditions,
          errorLabels,
          storedAnswers,
          autosaveAnswers,
          onAnswersChange
        }), updateQuestionVisibility = _d.updateQuestionVisibility, submitForm = _d.submitForm, isSubmittingForm = _d.isSubmittingForm, _e = _d.formMethods, control = _e.control, getValues = _e.getValues, errors = _d.errors, questionWithVisiblity = _d.questionWithVisiblity, formHasErrors = _d.formHasErrors;
        React.useEffect(function() {
          updateLayoutMode("flexible");
          return function() {
            resetLayoutMode();
          };
        }, []);
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: "".concat(layoutClasses.main_content, " ").concat(classes$4.traditional_form) }, { children: jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$4.container, " ").concat(classes$4.traditional_container) }, { children: [!questionWithVisiblity ? jsxRuntime.exports.jsx("div", __assign({ className: classes$4.loadingContainer }, { children: jsxRuntime.exports.jsx(LoadActivityPlaceholder, {}) })) : jsxRuntime.exports.jsx("div", { children: jsxRuntime.exports.jsx("div", { children: questionWithVisiblity.filter(function(vb) {
          return vb.visible;
        }).map(function(visibleQuestion) {
          return jsxRuntime.exports.jsx("div", __assign({ className: classes$4.traditional_form_question }, { children: jsxRuntime.exports.jsx(Question, { question: visibleQuestion, control, getValues, errors, inputAutoFocus: false, onAnswerChange: updateQuestionVisibility }, visibleQuestion.id) }), visibleQuestion.id);
        }) }) }), (form === null || form === void 0 ? void 0 : form.trademark) && jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$4.trademark, " ").concat(classes$4.conversational) }, { children: form.trademark }))] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint: false }, { children: jsxRuntime.exports.jsxs("div", __assign({ className: "".concat(classes$4.traditional_button_wrapper) }, { children: [formHasErrors && jsxRuntime.exports.jsx("div", { children: jsxRuntime.exports.jsx(Text, __assign({ variant: "textSmall", color: "var(--awell-signalError100)" }, { children: errorLabels.formHasErrors })) }), jsxRuntime.exports.jsx("div", {}), jsxRuntime.exports.jsx(Button, __assign({ onClick: submitForm, type: "submit", "data-cy": "submitFormButton", disabled: isSubmittingForm }, { children: buttonLabels.submit }))] })) }))] });
      };
      var WizardForm = ConversationalForm;
      var cloudinaryCore = { exports: {} };
      var _freeGlobal;
      var hasRequired_freeGlobal;
      function require_freeGlobal() {
        if (hasRequired_freeGlobal) return _freeGlobal;
        hasRequired_freeGlobal = 1;
        var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        _freeGlobal = freeGlobal2;
        return _freeGlobal;
      }
      var _root;
      var hasRequired_root;
      function require_root() {
        if (hasRequired_root) return _root;
        hasRequired_root = 1;
        var freeGlobal2 = require_freeGlobal();
        var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
        var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
        _root = root2;
        return _root;
      }
      var _Symbol;
      var hasRequired_Symbol;
      function require_Symbol() {
        if (hasRequired_Symbol) return _Symbol;
        hasRequired_Symbol = 1;
        var root2 = require_root();
        var Symbol2 = root2.Symbol;
        _Symbol = Symbol2;
        return _Symbol;
      }
      var _getRawTag;
      var hasRequired_getRawTag;
      function require_getRawTag() {
        if (hasRequired_getRawTag) return _getRawTag;
        hasRequired_getRawTag = 1;
        var Symbol2 = require_Symbol();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var nativeObjectToString = objectProto2.toString;
        var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = void 0;
            var unmasked = true;
          } catch (e) {
          }
          var result = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result;
        }
        _getRawTag = getRawTag;
        return _getRawTag;
      }
      var _objectToString;
      var hasRequired_objectToString;
      function require_objectToString() {
        if (hasRequired_objectToString) return _objectToString;
        hasRequired_objectToString = 1;
        var objectProto2 = Object.prototype;
        var nativeObjectToString = objectProto2.toString;
        function objectToString2(value) {
          return nativeObjectToString.call(value);
        }
        _objectToString = objectToString2;
        return _objectToString;
      }
      var _baseGetTag;
      var hasRequired_baseGetTag;
      function require_baseGetTag() {
        if (hasRequired_baseGetTag) return _baseGetTag;
        hasRequired_baseGetTag = 1;
        var Symbol2 = require_Symbol(), getRawTag = require_getRawTag(), objectToString2 = require_objectToString();
        var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
        var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
        function baseGetTag(value) {
          if (value == null) {
            return value === void 0 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString2(value);
        }
        _baseGetTag = baseGetTag;
        return _baseGetTag;
      }
      var isObject_1;
      var hasRequiredIsObject;
      function requireIsObject() {
        if (hasRequiredIsObject) return isObject_1;
        hasRequiredIsObject = 1;
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        isObject_1 = isObject2;
        return isObject_1;
      }
      var isFunction_1;
      var hasRequiredIsFunction;
      function requireIsFunction() {
        if (hasRequiredIsFunction) return isFunction_1;
        hasRequiredIsFunction = 1;
        var baseGetTag = require_baseGetTag(), isObject2 = requireIsObject();
        var asyncTag = "[object AsyncFunction]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag2 || tag == genTag2 || tag == asyncTag || tag == proxyTag;
        }
        isFunction_1 = isFunction2;
        return isFunction_1;
      }
      var _coreJsData;
      var hasRequired_coreJsData;
      function require_coreJsData() {
        if (hasRequired_coreJsData) return _coreJsData;
        hasRequired_coreJsData = 1;
        var root2 = require_root();
        var coreJsData2 = root2["__core-js_shared__"];
        _coreJsData = coreJsData2;
        return _coreJsData;
      }
      var _isMasked;
      var hasRequired_isMasked;
      function require_isMasked() {
        if (hasRequired_isMasked) return _isMasked;
        hasRequired_isMasked = 1;
        var coreJsData2 = require_coreJsData();
        var maskSrcKey2 = function() {
          var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        function isMasked2(func) {
          return !!maskSrcKey2 && maskSrcKey2 in func;
        }
        _isMasked = isMasked2;
        return _isMasked;
      }
      var _toSource;
      var hasRequired_toSource;
      function require_toSource() {
        if (hasRequired_toSource) return _toSource;
        hasRequired_toSource = 1;
        var funcProto2 = Function.prototype;
        var funcToString2 = funcProto2.toString;
        function toSource2(func) {
          if (func != null) {
            try {
              return funcToString2.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        _toSource = toSource2;
        return _toSource;
      }
      var _baseIsNative;
      var hasRequired_baseIsNative;
      function require_baseIsNative() {
        if (hasRequired_baseIsNative) return _baseIsNative;
        hasRequired_baseIsNative = 1;
        var isFunction2 = requireIsFunction(), isMasked2 = require_isMasked(), isObject2 = requireIsObject(), toSource2 = require_toSource();
        var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
        var funcProto2 = Function.prototype, objectProto2 = Object.prototype;
        var funcToString2 = funcProto2.toString;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var reIsNative2 = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        function baseIsNative2(value) {
          if (!isObject2(value) || isMasked2(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative2 : reIsHostCtor2;
          return pattern.test(toSource2(value));
        }
        _baseIsNative = baseIsNative2;
        return _baseIsNative;
      }
      var _getValue;
      var hasRequired_getValue;
      function require_getValue() {
        if (hasRequired_getValue) return _getValue;
        hasRequired_getValue = 1;
        function getValue2(object, key) {
          return object == null ? void 0 : object[key];
        }
        _getValue = getValue2;
        return _getValue;
      }
      var _getNative;
      var hasRequired_getNative;
      function require_getNative() {
        if (hasRequired_getNative) return _getNative;
        hasRequired_getNative = 1;
        var baseIsNative2 = require_baseIsNative(), getValue2 = require_getValue();
        function getNative2(object, key) {
          var value = getValue2(object, key);
          return baseIsNative2(value) ? value : void 0;
        }
        _getNative = getNative2;
        return _getNative;
      }
      var _defineProperty;
      var hasRequired_defineProperty;
      function require_defineProperty() {
        if (hasRequired_defineProperty) return _defineProperty;
        hasRequired_defineProperty = 1;
        var getNative2 = require_getNative();
        var defineProperty = function() {
          try {
            var func = getNative2(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        _defineProperty = defineProperty;
        return _defineProperty;
      }
      var _baseAssignValue;
      var hasRequired_baseAssignValue;
      function require_baseAssignValue() {
        if (hasRequired_baseAssignValue) return _baseAssignValue;
        hasRequired_baseAssignValue = 1;
        var defineProperty = require_defineProperty();
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        _baseAssignValue = baseAssignValue;
        return _baseAssignValue;
      }
      var eq_1;
      var hasRequiredEq;
      function requireEq() {
        if (hasRequiredEq) return eq_1;
        hasRequiredEq = 1;
        function eq2(value, other) {
          return value === other || value !== value && other !== other;
        }
        eq_1 = eq2;
        return eq_1;
      }
      var _assignValue;
      var hasRequired_assignValue;
      function require_assignValue() {
        if (hasRequired_assignValue) return _assignValue;
        hasRequired_assignValue = 1;
        var baseAssignValue = require_baseAssignValue(), eq2 = requireEq();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq2(objValue, value)) || value === void 0 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        _assignValue = assignValue;
        return _assignValue;
      }
      var _copyObject;
      var hasRequired_copyObject;
      function require_copyObject() {
        if (hasRequired_copyObject) return _copyObject;
        hasRequired_copyObject = 1;
        var assignValue = require_assignValue(), baseAssignValue = require_baseAssignValue();
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
            if (newValue === void 0) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        _copyObject = copyObject;
        return _copyObject;
      }
      var identity_1;
      var hasRequiredIdentity;
      function requireIdentity() {
        if (hasRequiredIdentity) return identity_1;
        hasRequiredIdentity = 1;
        function identity(value) {
          return value;
        }
        identity_1 = identity;
        return identity_1;
      }
      var _apply;
      var hasRequired_apply;
      function require_apply() {
        if (hasRequired_apply) return _apply;
        hasRequired_apply = 1;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        _apply = apply;
        return _apply;
      }
      var _overRest;
      var hasRequired_overRest;
      function require_overRest() {
        if (hasRequired_overRest) return _overRest;
        hasRequired_overRest = 1;
        var apply = require_apply();
        var nativeMax = Math.max;
        function overRest(func, start, transform) {
          start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
        _overRest = overRest;
        return _overRest;
      }
      var constant_1;
      var hasRequiredConstant;
      function requireConstant() {
        if (hasRequiredConstant) return constant_1;
        hasRequiredConstant = 1;
        function constant(value) {
          return function() {
            return value;
          };
        }
        constant_1 = constant;
        return constant_1;
      }
      var _baseSetToString;
      var hasRequired_baseSetToString;
      function require_baseSetToString() {
        if (hasRequired_baseSetToString) return _baseSetToString;
        hasRequired_baseSetToString = 1;
        var constant = requireConstant(), defineProperty = require_defineProperty(), identity = requireIdentity();
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        _baseSetToString = baseSetToString;
        return _baseSetToString;
      }
      var _shortOut;
      var hasRequired_shortOut;
      function require_shortOut() {
        if (hasRequired_shortOut) return _shortOut;
        hasRequired_shortOut = 1;
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var nativeNow = Date.now;
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(void 0, arguments);
          };
        }
        _shortOut = shortOut;
        return _shortOut;
      }
      var _setToString;
      var hasRequired_setToString;
      function require_setToString() {
        if (hasRequired_setToString) return _setToString;
        hasRequired_setToString = 1;
        var baseSetToString = require_baseSetToString(), shortOut = require_shortOut();
        var setToString = shortOut(baseSetToString);
        _setToString = setToString;
        return _setToString;
      }
      var _baseRest;
      var hasRequired_baseRest;
      function require_baseRest() {
        if (hasRequired_baseRest) return _baseRest;
        hasRequired_baseRest = 1;
        var identity = requireIdentity(), overRest = require_overRest(), setToString = require_setToString();
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        _baseRest = baseRest;
        return _baseRest;
      }
      var isLength_1;
      var hasRequiredIsLength;
      function requireIsLength() {
        if (hasRequiredIsLength) return isLength_1;
        hasRequiredIsLength = 1;
        var MAX_SAFE_INTEGER = 9007199254740991;
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        isLength_1 = isLength;
        return isLength_1;
      }
      var isArrayLike_1;
      var hasRequiredIsArrayLike;
      function requireIsArrayLike() {
        if (hasRequiredIsArrayLike) return isArrayLike_1;
        hasRequiredIsArrayLike = 1;
        var isFunction2 = requireIsFunction(), isLength = requireIsLength();
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        isArrayLike_1 = isArrayLike;
        return isArrayLike_1;
      }
      var _isIndex;
      var hasRequired_isIndex;
      function require_isIndex() {
        if (hasRequired_isIndex) return _isIndex;
        hasRequired_isIndex = 1;
        var MAX_SAFE_INTEGER = 9007199254740991;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        _isIndex = isIndex;
        return _isIndex;
      }
      var _isIterateeCall;
      var hasRequired_isIterateeCall;
      function require_isIterateeCall() {
        if (hasRequired_isIterateeCall) return _isIterateeCall;
        hasRequired_isIterateeCall = 1;
        var eq2 = requireEq(), isArrayLike = requireIsArrayLike(), isIndex = require_isIndex(), isObject2 = requireIsObject();
        function isIterateeCall(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq2(object[index], value);
          }
          return false;
        }
        _isIterateeCall = isIterateeCall;
        return _isIterateeCall;
      }
      var _createAssigner;
      var hasRequired_createAssigner;
      function require_createAssigner() {
        if (hasRequired_createAssigner) return _createAssigner;
        hasRequired_createAssigner = 1;
        var baseRest = require_baseRest(), isIterateeCall = require_isIterateeCall();
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? void 0 : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        _createAssigner = createAssigner;
        return _createAssigner;
      }
      var _isPrototype;
      var hasRequired_isPrototype;
      function require_isPrototype() {
        if (hasRequired_isPrototype) return _isPrototype;
        hasRequired_isPrototype = 1;
        var objectProto2 = Object.prototype;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
          return value === proto;
        }
        _isPrototype = isPrototype;
        return _isPrototype;
      }
      var _baseTimes;
      var hasRequired_baseTimes;
      function require_baseTimes() {
        if (hasRequired_baseTimes) return _baseTimes;
        hasRequired_baseTimes = 1;
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        _baseTimes = baseTimes;
        return _baseTimes;
      }
      var isObjectLike_1;
      var hasRequiredIsObjectLike;
      function requireIsObjectLike() {
        if (hasRequiredIsObjectLike) return isObjectLike_1;
        hasRequiredIsObjectLike = 1;
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        isObjectLike_1 = isObjectLike;
        return isObjectLike_1;
      }
      var _baseIsArguments;
      var hasRequired_baseIsArguments;
      function require_baseIsArguments() {
        if (hasRequired_baseIsArguments) return _baseIsArguments;
        hasRequired_baseIsArguments = 1;
        var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
        var argsTag = "[object Arguments]";
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        _baseIsArguments = baseIsArguments;
        return _baseIsArguments;
      }
      var isArguments_1;
      var hasRequiredIsArguments;
      function requireIsArguments() {
        if (hasRequiredIsArguments) return isArguments_1;
        hasRequiredIsArguments = 1;
        var baseIsArguments = require_baseIsArguments(), isObjectLike = requireIsObjectLike();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        isArguments_1 = isArguments;
        return isArguments_1;
      }
      var isArray_1;
      var hasRequiredIsArray;
      function requireIsArray() {
        if (hasRequiredIsArray) return isArray_1;
        hasRequiredIsArray = 1;
        var isArray = Array.isArray;
        isArray_1 = isArray;
        return isArray_1;
      }
      var isBuffer = { exports: {} };
      var stubFalse_1;
      var hasRequiredStubFalse;
      function requireStubFalse() {
        if (hasRequiredStubFalse) return stubFalse_1;
        hasRequiredStubFalse = 1;
        function stubFalse() {
          return false;
        }
        stubFalse_1 = stubFalse;
        return stubFalse_1;
      }
      var hasRequiredIsBuffer;
      function requireIsBuffer() {
        if (hasRequiredIsBuffer) return isBuffer.exports;
        hasRequiredIsBuffer = 1;
        (function(module2, exports3) {
          var root2 = require_root(), stubFalse = requireStubFalse();
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer2 = moduleExports ? root2.Buffer : void 0;
          var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
          var isBuffer2 = nativeIsBuffer || stubFalse;
          module2.exports = isBuffer2;
        })(isBuffer, isBuffer.exports);
        return isBuffer.exports;
      }
      var _baseIsTypedArray;
      var hasRequired_baseIsTypedArray;
      function require_baseIsTypedArray() {
        if (hasRequired_baseIsTypedArray) return _baseIsTypedArray;
        hasRequired_baseIsTypedArray = 1;
        var baseGetTag = require_baseGetTag(), isLength = requireIsLength(), isObjectLike = requireIsObjectLike();
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        _baseIsTypedArray = baseIsTypedArray;
        return _baseIsTypedArray;
      }
      var _baseUnary;
      var hasRequired_baseUnary;
      function require_baseUnary() {
        if (hasRequired_baseUnary) return _baseUnary;
        hasRequired_baseUnary = 1;
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        _baseUnary = baseUnary;
        return _baseUnary;
      }
      var _nodeUtil = { exports: {} };
      var hasRequired_nodeUtil;
      function require_nodeUtil() {
        if (hasRequired_nodeUtil) return _nodeUtil.exports;
        hasRequired_nodeUtil = 1;
        (function(module2, exports3) {
          var freeGlobal2 = require_freeGlobal();
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var freeProcess = moduleExports && freeGlobal2.process;
          var nodeUtil = function() {
            try {
              var types = freeModule && freeModule.require && freeModule.require("util").types;
              if (types) {
                return types;
              }
              return freeProcess && freeProcess.binding && freeProcess.binding("util");
            } catch (e) {
            }
          }();
          module2.exports = nodeUtil;
        })(_nodeUtil, _nodeUtil.exports);
        return _nodeUtil.exports;
      }
      var isTypedArray_1;
      var hasRequiredIsTypedArray;
      function requireIsTypedArray() {
        if (hasRequiredIsTypedArray) return isTypedArray_1;
        hasRequiredIsTypedArray = 1;
        var baseIsTypedArray = require_baseIsTypedArray(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        isTypedArray_1 = isTypedArray;
        return isTypedArray_1;
      }
      var _arrayLikeKeys;
      var hasRequired_arrayLikeKeys;
      function require_arrayLikeKeys() {
        if (hasRequired_arrayLikeKeys) return _arrayLikeKeys;
        hasRequired_arrayLikeKeys = 1;
        var baseTimes = require_baseTimes(), isArguments = requireIsArguments(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isIndex = require_isIndex(), isTypedArray = requireIsTypedArray();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }
        _arrayLikeKeys = arrayLikeKeys;
        return _arrayLikeKeys;
      }
      var _overArg;
      var hasRequired_overArg;
      function require_overArg() {
        if (hasRequired_overArg) return _overArg;
        hasRequired_overArg = 1;
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        _overArg = overArg;
        return _overArg;
      }
      var _nativeKeys;
      var hasRequired_nativeKeys;
      function require_nativeKeys() {
        if (hasRequired_nativeKeys) return _nativeKeys;
        hasRequired_nativeKeys = 1;
        var overArg = require_overArg();
        var nativeKeys = overArg(Object.keys, Object);
        _nativeKeys = nativeKeys;
        return _nativeKeys;
      }
      var _baseKeys;
      var hasRequired_baseKeys;
      function require_baseKeys() {
        if (hasRequired_baseKeys) return _baseKeys;
        hasRequired_baseKeys = 1;
        var isPrototype = require_isPrototype(), nativeKeys = require_nativeKeys();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }
        _baseKeys = baseKeys;
        return _baseKeys;
      }
      var keys_1;
      var hasRequiredKeys;
      function requireKeys() {
        if (hasRequiredKeys) return keys_1;
        hasRequiredKeys = 1;
        var arrayLikeKeys = require_arrayLikeKeys(), baseKeys = require_baseKeys(), isArrayLike = requireIsArrayLike();
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        keys_1 = keys;
        return keys_1;
      }
      var assign_1;
      var hasRequiredAssign;
      function requireAssign() {
        if (hasRequiredAssign) return assign_1;
        hasRequiredAssign = 1;
        var assignValue = require_assignValue(), copyObject = require_copyObject(), createAssigner = require_createAssigner(), isArrayLike = requireIsArrayLike(), isPrototype = require_isPrototype(), keys = requireKeys();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        assign_1 = assign;
        return assign_1;
      }
      var _listCacheClear;
      var hasRequired_listCacheClear;
      function require_listCacheClear() {
        if (hasRequired_listCacheClear) return _listCacheClear;
        hasRequired_listCacheClear = 1;
        function listCacheClear2() {
          this.__data__ = [];
          this.size = 0;
        }
        _listCacheClear = listCacheClear2;
        return _listCacheClear;
      }
      var _assocIndexOf;
      var hasRequired_assocIndexOf;
      function require_assocIndexOf() {
        if (hasRequired_assocIndexOf) return _assocIndexOf;
        hasRequired_assocIndexOf = 1;
        var eq2 = requireEq();
        function assocIndexOf2(array, key) {
          var length = array.length;
          while (length--) {
            if (eq2(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        _assocIndexOf = assocIndexOf2;
        return _assocIndexOf;
      }
      var _listCacheDelete;
      var hasRequired_listCacheDelete;
      function require_listCacheDelete() {
        if (hasRequired_listCacheDelete) return _listCacheDelete;
        hasRequired_listCacheDelete = 1;
        var assocIndexOf2 = require_assocIndexOf();
        var arrayProto2 = Array.prototype;
        var splice2 = arrayProto2.splice;
        function listCacheDelete2(key) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice2.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        _listCacheDelete = listCacheDelete2;
        return _listCacheDelete;
      }
      var _listCacheGet;
      var hasRequired_listCacheGet;
      function require_listCacheGet() {
        if (hasRequired_listCacheGet) return _listCacheGet;
        hasRequired_listCacheGet = 1;
        var assocIndexOf2 = require_assocIndexOf();
        function listCacheGet2(key) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          return index < 0 ? void 0 : data[index][1];
        }
        _listCacheGet = listCacheGet2;
        return _listCacheGet;
      }
      var _listCacheHas;
      var hasRequired_listCacheHas;
      function require_listCacheHas() {
        if (hasRequired_listCacheHas) return _listCacheHas;
        hasRequired_listCacheHas = 1;
        var assocIndexOf2 = require_assocIndexOf();
        function listCacheHas2(key) {
          return assocIndexOf2(this.__data__, key) > -1;
        }
        _listCacheHas = listCacheHas2;
        return _listCacheHas;
      }
      var _listCacheSet;
      var hasRequired_listCacheSet;
      function require_listCacheSet() {
        if (hasRequired_listCacheSet) return _listCacheSet;
        hasRequired_listCacheSet = 1;
        var assocIndexOf2 = require_assocIndexOf();
        function listCacheSet2(key, value) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        _listCacheSet = listCacheSet2;
        return _listCacheSet;
      }
      var _ListCache;
      var hasRequired_ListCache;
      function require_ListCache() {
        if (hasRequired_ListCache) return _ListCache;
        hasRequired_ListCache = 1;
        var listCacheClear2 = require_listCacheClear(), listCacheDelete2 = require_listCacheDelete(), listCacheGet2 = require_listCacheGet(), listCacheHas2 = require_listCacheHas(), listCacheSet2 = require_listCacheSet();
        function ListCache2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        ListCache2.prototype.clear = listCacheClear2;
        ListCache2.prototype["delete"] = listCacheDelete2;
        ListCache2.prototype.get = listCacheGet2;
        ListCache2.prototype.has = listCacheHas2;
        ListCache2.prototype.set = listCacheSet2;
        _ListCache = ListCache2;
        return _ListCache;
      }
      var _stackClear;
      var hasRequired_stackClear;
      function require_stackClear() {
        if (hasRequired_stackClear) return _stackClear;
        hasRequired_stackClear = 1;
        var ListCache2 = require_ListCache();
        function stackClear() {
          this.__data__ = new ListCache2();
          this.size = 0;
        }
        _stackClear = stackClear;
        return _stackClear;
      }
      var _stackDelete;
      var hasRequired_stackDelete;
      function require_stackDelete() {
        if (hasRequired_stackDelete) return _stackDelete;
        hasRequired_stackDelete = 1;
        function stackDelete(key) {
          var data = this.__data__, result = data["delete"](key);
          this.size = data.size;
          return result;
        }
        _stackDelete = stackDelete;
        return _stackDelete;
      }
      var _stackGet;
      var hasRequired_stackGet;
      function require_stackGet() {
        if (hasRequired_stackGet) return _stackGet;
        hasRequired_stackGet = 1;
        function stackGet(key) {
          return this.__data__.get(key);
        }
        _stackGet = stackGet;
        return _stackGet;
      }
      var _stackHas;
      var hasRequired_stackHas;
      function require_stackHas() {
        if (hasRequired_stackHas) return _stackHas;
        hasRequired_stackHas = 1;
        function stackHas(key) {
          return this.__data__.has(key);
        }
        _stackHas = stackHas;
        return _stackHas;
      }
      var _Map;
      var hasRequired_Map;
      function require_Map() {
        if (hasRequired_Map) return _Map;
        hasRequired_Map = 1;
        var getNative2 = require_getNative(), root2 = require_root();
        var Map2 = getNative2(root2, "Map");
        _Map = Map2;
        return _Map;
      }
      var _nativeCreate;
      var hasRequired_nativeCreate;
      function require_nativeCreate() {
        if (hasRequired_nativeCreate) return _nativeCreate;
        hasRequired_nativeCreate = 1;
        var getNative2 = require_getNative();
        var nativeCreate2 = getNative2(Object, "create");
        _nativeCreate = nativeCreate2;
        return _nativeCreate;
      }
      var _hashClear;
      var hasRequired_hashClear;
      function require_hashClear() {
        if (hasRequired_hashClear) return _hashClear;
        hasRequired_hashClear = 1;
        var nativeCreate2 = require_nativeCreate();
        function hashClear2() {
          this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
          this.size = 0;
        }
        _hashClear = hashClear2;
        return _hashClear;
      }
      var _hashDelete;
      var hasRequired_hashDelete;
      function require_hashDelete() {
        if (hasRequired_hashDelete) return _hashDelete;
        hasRequired_hashDelete = 1;
        function hashDelete2(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }
        _hashDelete = hashDelete2;
        return _hashDelete;
      }
      var _hashGet;
      var hasRequired_hashGet;
      function require_hashGet() {
        if (hasRequired_hashGet) return _hashGet;
        hasRequired_hashGet = 1;
        var nativeCreate2 = require_nativeCreate();
        var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function hashGet2(key) {
          var data = this.__data__;
          if (nativeCreate2) {
            var result = data[key];
            return result === HASH_UNDEFINED2 ? void 0 : result;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : void 0;
        }
        _hashGet = hashGet2;
        return _hashGet;
      }
      var _hashHas;
      var hasRequired_hashHas;
      function require_hashHas() {
        if (hasRequired_hashHas) return _hashHas;
        hasRequired_hashHas = 1;
        var nativeCreate2 = require_nativeCreate();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function hashHas2(key) {
          var data = this.__data__;
          return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
        }
        _hashHas = hashHas2;
        return _hashHas;
      }
      var _hashSet;
      var hasRequired_hashSet;
      function require_hashSet() {
        if (hasRequired_hashSet) return _hashSet;
        hasRequired_hashSet = 1;
        var nativeCreate2 = require_nativeCreate();
        var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
        function hashSet2(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED2 : value;
          return this;
        }
        _hashSet = hashSet2;
        return _hashSet;
      }
      var _Hash;
      var hasRequired_Hash;
      function require_Hash() {
        if (hasRequired_Hash) return _Hash;
        hasRequired_Hash = 1;
        var hashClear2 = require_hashClear(), hashDelete2 = require_hashDelete(), hashGet2 = require_hashGet(), hashHas2 = require_hashHas(), hashSet2 = require_hashSet();
        function Hash2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        Hash2.prototype.clear = hashClear2;
        Hash2.prototype["delete"] = hashDelete2;
        Hash2.prototype.get = hashGet2;
        Hash2.prototype.has = hashHas2;
        Hash2.prototype.set = hashSet2;
        _Hash = Hash2;
        return _Hash;
      }
      var _mapCacheClear;
      var hasRequired_mapCacheClear;
      function require_mapCacheClear() {
        if (hasRequired_mapCacheClear) return _mapCacheClear;
        hasRequired_mapCacheClear = 1;
        var Hash2 = require_Hash(), ListCache2 = require_ListCache(), Map2 = require_Map();
        function mapCacheClear2() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash2(),
            "map": new (Map2 || ListCache2)(),
            "string": new Hash2()
          };
        }
        _mapCacheClear = mapCacheClear2;
        return _mapCacheClear;
      }
      var _isKeyable;
      var hasRequired_isKeyable;
      function require_isKeyable() {
        if (hasRequired_isKeyable) return _isKeyable;
        hasRequired_isKeyable = 1;
        function isKeyable2(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        _isKeyable = isKeyable2;
        return _isKeyable;
      }
      var _getMapData;
      var hasRequired_getMapData;
      function require_getMapData() {
        if (hasRequired_getMapData) return _getMapData;
        hasRequired_getMapData = 1;
        var isKeyable2 = require_isKeyable();
        function getMapData2(map, key) {
          var data = map.__data__;
          return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        _getMapData = getMapData2;
        return _getMapData;
      }
      var _mapCacheDelete;
      var hasRequired_mapCacheDelete;
      function require_mapCacheDelete() {
        if (hasRequired_mapCacheDelete) return _mapCacheDelete;
        hasRequired_mapCacheDelete = 1;
        var getMapData2 = require_getMapData();
        function mapCacheDelete2(key) {
          var result = getMapData2(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }
        _mapCacheDelete = mapCacheDelete2;
        return _mapCacheDelete;
      }
      var _mapCacheGet;
      var hasRequired_mapCacheGet;
      function require_mapCacheGet() {
        if (hasRequired_mapCacheGet) return _mapCacheGet;
        hasRequired_mapCacheGet = 1;
        var getMapData2 = require_getMapData();
        function mapCacheGet2(key) {
          return getMapData2(this, key).get(key);
        }
        _mapCacheGet = mapCacheGet2;
        return _mapCacheGet;
      }
      var _mapCacheHas;
      var hasRequired_mapCacheHas;
      function require_mapCacheHas() {
        if (hasRequired_mapCacheHas) return _mapCacheHas;
        hasRequired_mapCacheHas = 1;
        var getMapData2 = require_getMapData();
        function mapCacheHas2(key) {
          return getMapData2(this, key).has(key);
        }
        _mapCacheHas = mapCacheHas2;
        return _mapCacheHas;
      }
      var _mapCacheSet;
      var hasRequired_mapCacheSet;
      function require_mapCacheSet() {
        if (hasRequired_mapCacheSet) return _mapCacheSet;
        hasRequired_mapCacheSet = 1;
        var getMapData2 = require_getMapData();
        function mapCacheSet2(key, value) {
          var data = getMapData2(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        _mapCacheSet = mapCacheSet2;
        return _mapCacheSet;
      }
      var _MapCache;
      var hasRequired_MapCache;
      function require_MapCache() {
        if (hasRequired_MapCache) return _MapCache;
        hasRequired_MapCache = 1;
        var mapCacheClear2 = require_mapCacheClear(), mapCacheDelete2 = require_mapCacheDelete(), mapCacheGet2 = require_mapCacheGet(), mapCacheHas2 = require_mapCacheHas(), mapCacheSet2 = require_mapCacheSet();
        function MapCache2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        MapCache2.prototype.clear = mapCacheClear2;
        MapCache2.prototype["delete"] = mapCacheDelete2;
        MapCache2.prototype.get = mapCacheGet2;
        MapCache2.prototype.has = mapCacheHas2;
        MapCache2.prototype.set = mapCacheSet2;
        _MapCache = MapCache2;
        return _MapCache;
      }
      var _stackSet;
      var hasRequired_stackSet;
      function require_stackSet() {
        if (hasRequired_stackSet) return _stackSet;
        hasRequired_stackSet = 1;
        var ListCache2 = require_ListCache(), Map2 = require_Map(), MapCache2 = require_MapCache();
        var LARGE_ARRAY_SIZE = 200;
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache2) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache2(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        _stackSet = stackSet;
        return _stackSet;
      }
      var _Stack;
      var hasRequired_Stack;
      function require_Stack() {
        if (hasRequired_Stack) return _Stack;
        hasRequired_Stack = 1;
        var ListCache2 = require_ListCache(), stackClear = require_stackClear(), stackDelete = require_stackDelete(), stackGet = require_stackGet(), stackHas = require_stackHas(), stackSet = require_stackSet();
        function Stack(entries) {
          var data = this.__data__ = new ListCache2(entries);
          this.size = data.size;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        _Stack = Stack;
        return _Stack;
      }
      var _arrayEach;
      var hasRequired_arrayEach;
      function require_arrayEach() {
        if (hasRequired_arrayEach) return _arrayEach;
        hasRequired_arrayEach = 1;
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        _arrayEach = arrayEach;
        return _arrayEach;
      }
      var _baseAssign;
      var hasRequired_baseAssign;
      function require_baseAssign() {
        if (hasRequired_baseAssign) return _baseAssign;
        hasRequired_baseAssign = 1;
        var copyObject = require_copyObject(), keys = requireKeys();
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        _baseAssign = baseAssign;
        return _baseAssign;
      }
      var _nativeKeysIn;
      var hasRequired_nativeKeysIn;
      function require_nativeKeysIn() {
        if (hasRequired_nativeKeysIn) return _nativeKeysIn;
        hasRequired_nativeKeysIn = 1;
        function nativeKeysIn(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }
        _nativeKeysIn = nativeKeysIn;
        return _nativeKeysIn;
      }
      var _baseKeysIn;
      var hasRequired_baseKeysIn;
      function require_baseKeysIn() {
        if (hasRequired_baseKeysIn) return _baseKeysIn;
        hasRequired_baseKeysIn = 1;
        var isObject2 = requireIsObject(), isPrototype = require_isPrototype(), nativeKeysIn = require_nativeKeysIn();
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }
        _baseKeysIn = baseKeysIn;
        return _baseKeysIn;
      }
      var keysIn_1;
      var hasRequiredKeysIn;
      function requireKeysIn() {
        if (hasRequiredKeysIn) return keysIn_1;
        hasRequiredKeysIn = 1;
        var arrayLikeKeys = require_arrayLikeKeys(), baseKeysIn = require_baseKeysIn(), isArrayLike = requireIsArrayLike();
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        keysIn_1 = keysIn;
        return keysIn_1;
      }
      var _baseAssignIn;
      var hasRequired_baseAssignIn;
      function require_baseAssignIn() {
        if (hasRequired_baseAssignIn) return _baseAssignIn;
        hasRequired_baseAssignIn = 1;
        var copyObject = require_copyObject(), keysIn = requireKeysIn();
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        _baseAssignIn = baseAssignIn;
        return _baseAssignIn;
      }
      var _cloneBuffer = { exports: {} };
      var hasRequired_cloneBuffer;
      function require_cloneBuffer() {
        if (hasRequired_cloneBuffer) return _cloneBuffer.exports;
        hasRequired_cloneBuffer = 1;
        (function(module2, exports3) {
          var root2 = require_root();
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
          }
          module2.exports = cloneBuffer;
        })(_cloneBuffer, _cloneBuffer.exports);
        return _cloneBuffer.exports;
      }
      var _copyArray;
      var hasRequired_copyArray;
      function require_copyArray() {
        if (hasRequired_copyArray) return _copyArray;
        hasRequired_copyArray = 1;
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        _copyArray = copyArray;
        return _copyArray;
      }
      var _arrayFilter;
      var hasRequired_arrayFilter;
      function require_arrayFilter() {
        if (hasRequired_arrayFilter) return _arrayFilter;
        hasRequired_arrayFilter = 1;
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        _arrayFilter = arrayFilter;
        return _arrayFilter;
      }
      var stubArray_1;
      var hasRequiredStubArray;
      function requireStubArray() {
        if (hasRequiredStubArray) return stubArray_1;
        hasRequiredStubArray = 1;
        function stubArray() {
          return [];
        }
        stubArray_1 = stubArray;
        return stubArray_1;
      }
      var _getSymbols;
      var hasRequired_getSymbols;
      function require_getSymbols() {
        if (hasRequired_getSymbols) return _getSymbols;
        hasRequired_getSymbols = 1;
        var arrayFilter = require_arrayFilter(), stubArray = requireStubArray();
        var objectProto2 = Object.prototype;
        var propertyIsEnumerable = objectProto2.propertyIsEnumerable;
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        _getSymbols = getSymbols;
        return _getSymbols;
      }
      var _copySymbols;
      var hasRequired_copySymbols;
      function require_copySymbols() {
        if (hasRequired_copySymbols) return _copySymbols;
        hasRequired_copySymbols = 1;
        var copyObject = require_copyObject(), getSymbols = require_getSymbols();
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        _copySymbols = copySymbols;
        return _copySymbols;
      }
      var _arrayPush;
      var hasRequired_arrayPush;
      function require_arrayPush() {
        if (hasRequired_arrayPush) return _arrayPush;
        hasRequired_arrayPush = 1;
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        _arrayPush = arrayPush;
        return _arrayPush;
      }
      var _getPrototype;
      var hasRequired_getPrototype;
      function require_getPrototype() {
        if (hasRequired_getPrototype) return _getPrototype;
        hasRequired_getPrototype = 1;
        var overArg = require_overArg();
        var getPrototype = overArg(Object.getPrototypeOf, Object);
        _getPrototype = getPrototype;
        return _getPrototype;
      }
      var _getSymbolsIn;
      var hasRequired_getSymbolsIn;
      function require_getSymbolsIn() {
        if (hasRequired_getSymbolsIn) return _getSymbolsIn;
        hasRequired_getSymbolsIn = 1;
        var arrayPush = require_arrayPush(), getPrototype = require_getPrototype(), getSymbols = require_getSymbols(), stubArray = requireStubArray();
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush(result, getSymbols(object));
            object = getPrototype(object);
          }
          return result;
        };
        _getSymbolsIn = getSymbolsIn;
        return _getSymbolsIn;
      }
      var _copySymbolsIn;
      var hasRequired_copySymbolsIn;
      function require_copySymbolsIn() {
        if (hasRequired_copySymbolsIn) return _copySymbolsIn;
        hasRequired_copySymbolsIn = 1;
        var copyObject = require_copyObject(), getSymbolsIn = require_getSymbolsIn();
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        _copySymbolsIn = copySymbolsIn;
        return _copySymbolsIn;
      }
      var _baseGetAllKeys;
      var hasRequired_baseGetAllKeys;
      function require_baseGetAllKeys() {
        if (hasRequired_baseGetAllKeys) return _baseGetAllKeys;
        hasRequired_baseGetAllKeys = 1;
        var arrayPush = require_arrayPush(), isArray = requireIsArray();
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        _baseGetAllKeys = baseGetAllKeys;
        return _baseGetAllKeys;
      }
      var _getAllKeys;
      var hasRequired_getAllKeys;
      function require_getAllKeys() {
        if (hasRequired_getAllKeys) return _getAllKeys;
        hasRequired_getAllKeys = 1;
        var baseGetAllKeys = require_baseGetAllKeys(), getSymbols = require_getSymbols(), keys = requireKeys();
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        _getAllKeys = getAllKeys;
        return _getAllKeys;
      }
      var _getAllKeysIn;
      var hasRequired_getAllKeysIn;
      function require_getAllKeysIn() {
        if (hasRequired_getAllKeysIn) return _getAllKeysIn;
        hasRequired_getAllKeysIn = 1;
        var baseGetAllKeys = require_baseGetAllKeys(), getSymbolsIn = require_getSymbolsIn(), keysIn = requireKeysIn();
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        _getAllKeysIn = getAllKeysIn;
        return _getAllKeysIn;
      }
      var _DataView;
      var hasRequired_DataView;
      function require_DataView() {
        if (hasRequired_DataView) return _DataView;
        hasRequired_DataView = 1;
        var getNative2 = require_getNative(), root2 = require_root();
        var DataView = getNative2(root2, "DataView");
        _DataView = DataView;
        return _DataView;
      }
      var _Promise;
      var hasRequired_Promise;
      function require_Promise() {
        if (hasRequired_Promise) return _Promise;
        hasRequired_Promise = 1;
        var getNative2 = require_getNative(), root2 = require_root();
        var Promise2 = getNative2(root2, "Promise");
        _Promise = Promise2;
        return _Promise;
      }
      var _Set;
      var hasRequired_Set;
      function require_Set() {
        if (hasRequired_Set) return _Set;
        hasRequired_Set = 1;
        var getNative2 = require_getNative(), root2 = require_root();
        var Set2 = getNative2(root2, "Set");
        _Set = Set2;
        return _Set;
      }
      var _WeakMap;
      var hasRequired_WeakMap;
      function require_WeakMap() {
        if (hasRequired_WeakMap) return _WeakMap;
        hasRequired_WeakMap = 1;
        var getNative2 = require_getNative(), root2 = require_root();
        var WeakMap2 = getNative2(root2, "WeakMap");
        _WeakMap = WeakMap2;
        return _WeakMap;
      }
      var _getTag;
      var hasRequired_getTag;
      function require_getTag() {
        if (hasRequired_getTag) return _getTag;
        hasRequired_getTag = 1;
        var DataView = require_DataView(), Map2 = require_Map(), Promise2 = require_Promise(), Set2 = require_Set(), WeakMap2 = require_WeakMap(), baseGetTag = require_baseGetTag(), toSource2 = require_toSource();
        var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
        var dataViewTag = "[object DataView]";
        var dataViewCtorString = toSource2(DataView), mapCtorString = toSource2(Map2), promiseCtorString = toSource2(Promise2), setCtorString = toSource2(Set2), weakMapCtorString = toSource2(WeakMap2);
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result;
          };
        }
        _getTag = getTag;
        return _getTag;
      }
      var _initCloneArray;
      var hasRequired_initCloneArray;
      function require_initCloneArray() {
        if (hasRequired_initCloneArray) return _initCloneArray;
        hasRequired_initCloneArray = 1;
        var objectProto2 = Object.prototype;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        function initCloneArray(array) {
          var length = array.length, result = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }
        _initCloneArray = initCloneArray;
        return _initCloneArray;
      }
      var _Uint8Array;
      var hasRequired_Uint8Array;
      function require_Uint8Array() {
        if (hasRequired_Uint8Array) return _Uint8Array;
        hasRequired_Uint8Array = 1;
        var root2 = require_root();
        var Uint8Array = root2.Uint8Array;
        _Uint8Array = Uint8Array;
        return _Uint8Array;
      }
      var _cloneArrayBuffer;
      var hasRequired_cloneArrayBuffer;
      function require_cloneArrayBuffer() {
        if (hasRequired_cloneArrayBuffer) return _cloneArrayBuffer;
        hasRequired_cloneArrayBuffer = 1;
        var Uint8Array = require_Uint8Array();
        function cloneArrayBuffer(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result).set(new Uint8Array(arrayBuffer));
          return result;
        }
        _cloneArrayBuffer = cloneArrayBuffer;
        return _cloneArrayBuffer;
      }
      var _cloneDataView;
      var hasRequired_cloneDataView;
      function require_cloneDataView() {
        if (hasRequired_cloneDataView) return _cloneDataView;
        hasRequired_cloneDataView = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer();
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        _cloneDataView = cloneDataView;
        return _cloneDataView;
      }
      var _cloneRegExp;
      var hasRequired_cloneRegExp;
      function require_cloneRegExp() {
        if (hasRequired_cloneRegExp) return _cloneRegExp;
        hasRequired_cloneRegExp = 1;
        var reFlags = /\w*$/;
        function cloneRegExp(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }
        _cloneRegExp = cloneRegExp;
        return _cloneRegExp;
      }
      var _cloneSymbol;
      var hasRequired_cloneSymbol;
      function require_cloneSymbol() {
        if (hasRequired_cloneSymbol) return _cloneSymbol;
        hasRequired_cloneSymbol = 1;
        var Symbol2 = require_Symbol();
        var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        _cloneSymbol = cloneSymbol;
        return _cloneSymbol;
      }
      var _cloneTypedArray;
      var hasRequired_cloneTypedArray;
      function require_cloneTypedArray() {
        if (hasRequired_cloneTypedArray) return _cloneTypedArray;
        hasRequired_cloneTypedArray = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer();
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        _cloneTypedArray = cloneTypedArray;
        return _cloneTypedArray;
      }
      var _initCloneByTag;
      var hasRequired_initCloneByTag;
      function require_initCloneByTag() {
        if (hasRequired_initCloneByTag) return _initCloneByTag;
        hasRequired_initCloneByTag = 1;
        var cloneArrayBuffer = require_cloneArrayBuffer(), cloneDataView = require_cloneDataView(), cloneRegExp = require_cloneRegExp(), cloneSymbol = require_cloneSymbol(), cloneTypedArray = require_cloneTypedArray();
        var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        _initCloneByTag = initCloneByTag;
        return _initCloneByTag;
      }
      var _baseCreate;
      var hasRequired_baseCreate;
      function require_baseCreate() {
        if (hasRequired_baseCreate) return _baseCreate;
        hasRequired_baseCreate = 1;
        var isObject2 = requireIsObject();
        var objectCreate = Object.create;
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = void 0;
            return result;
          };
        }();
        _baseCreate = baseCreate;
        return _baseCreate;
      }
      var _initCloneObject;
      var hasRequired_initCloneObject;
      function require_initCloneObject() {
        if (hasRequired_initCloneObject) return _initCloneObject;
        hasRequired_initCloneObject = 1;
        var baseCreate = require_baseCreate(), getPrototype = require_getPrototype(), isPrototype = require_isPrototype();
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        _initCloneObject = initCloneObject;
        return _initCloneObject;
      }
      var _baseIsMap;
      var hasRequired_baseIsMap;
      function require_baseIsMap() {
        if (hasRequired_baseIsMap) return _baseIsMap;
        hasRequired_baseIsMap = 1;
        var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
        var mapTag = "[object Map]";
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        _baseIsMap = baseIsMap;
        return _baseIsMap;
      }
      var isMap_1;
      var hasRequiredIsMap;
      function requireIsMap() {
        if (hasRequiredIsMap) return isMap_1;
        hasRequiredIsMap = 1;
        var baseIsMap = require_baseIsMap(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsMap = nodeUtil && nodeUtil.isMap;
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        isMap_1 = isMap;
        return isMap_1;
      }
      var _baseIsSet;
      var hasRequired_baseIsSet;
      function require_baseIsSet() {
        if (hasRequired_baseIsSet) return _baseIsSet;
        hasRequired_baseIsSet = 1;
        var getTag = require_getTag(), isObjectLike = requireIsObjectLike();
        var setTag = "[object Set]";
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        _baseIsSet = baseIsSet;
        return _baseIsSet;
      }
      var isSet_1;
      var hasRequiredIsSet;
      function requireIsSet() {
        if (hasRequiredIsSet) return isSet_1;
        hasRequiredIsSet = 1;
        var baseIsSet = require_baseIsSet(), baseUnary = require_baseUnary(), nodeUtil = require_nodeUtil();
        var nodeIsSet = nodeUtil && nodeUtil.isSet;
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        isSet_1 = isSet;
        return isSet_1;
      }
      var _baseClone;
      var hasRequired_baseClone;
      function require_baseClone() {
        if (hasRequired_baseClone) return _baseClone;
        hasRequired_baseClone = 1;
        var Stack = require_Stack(), arrayEach = require_arrayEach(), assignValue = require_assignValue(), baseAssign = require_baseAssign(), baseAssignIn = require_baseAssignIn(), cloneBuffer = require_cloneBuffer(), copyArray = require_copyArray(), copySymbols = require_copySymbols(), copySymbolsIn = require_copySymbolsIn(), getAllKeys = require_getAllKeys(), getAllKeysIn = require_getAllKeysIn(), getTag = require_getTag(), initCloneArray = require_initCloneArray(), initCloneByTag = require_initCloneByTag(), initCloneObject = require_initCloneObject(), isArray = requireIsArray(), isBuffer2 = requireIsBuffer(), isMap = requireIsMap(), isObject2 = requireIsObject(), isSet = requireIsSet(), keys = requireKeys(), keysIn = requireKeysIn();
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag2] = cloneableTags[weakMapTag] = false;
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== void 0) {
            return result;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag2 || tag == genTag2;
            if (isBuffer2(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? void 0 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result;
        }
        _baseClone = baseClone;
        return _baseClone;
      }
      var cloneDeep_1;
      var hasRequiredCloneDeep;
      function requireCloneDeep() {
        if (hasRequiredCloneDeep) return cloneDeep_1;
        hasRequiredCloneDeep = 1;
        var baseClone = require_baseClone();
        var CLONE_DEEP_FLAG = 1, CLONE_SYMBOLS_FLAG = 4;
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        cloneDeep_1 = cloneDeep;
        return cloneDeep_1;
      }
      var compact_1;
      var hasRequiredCompact;
      function requireCompact() {
        if (hasRequiredCompact) return compact_1;
        hasRequiredCompact = 1;
        function compact2(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        compact_1 = compact2;
        return compact_1;
      }
      var _setCacheAdd;
      var hasRequired_setCacheAdd;
      function require_setCacheAdd() {
        if (hasRequired_setCacheAdd) return _setCacheAdd;
        hasRequired_setCacheAdd = 1;
        var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED2);
          return this;
        }
        _setCacheAdd = setCacheAdd;
        return _setCacheAdd;
      }
      var _setCacheHas;
      var hasRequired_setCacheHas;
      function require_setCacheHas() {
        if (hasRequired_setCacheHas) return _setCacheHas;
        hasRequired_setCacheHas = 1;
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        _setCacheHas = setCacheHas;
        return _setCacheHas;
      }
      var _SetCache;
      var hasRequired_SetCache;
      function require_SetCache() {
        if (hasRequired_SetCache) return _SetCache;
        hasRequired_SetCache = 1;
        var MapCache2 = require_MapCache(), setCacheAdd = require_setCacheAdd(), setCacheHas = require_setCacheHas();
        function SetCache(values) {
          var index = -1, length = values == null ? 0 : values.length;
          this.__data__ = new MapCache2();
          while (++index < length) {
            this.add(values[index]);
          }
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        _SetCache = SetCache;
        return _SetCache;
      }
      var _baseFindIndex;
      var hasRequired_baseFindIndex;
      function require_baseFindIndex() {
        if (hasRequired_baseFindIndex) return _baseFindIndex;
        hasRequired_baseFindIndex = 1;
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        _baseFindIndex = baseFindIndex;
        return _baseFindIndex;
      }
      var _baseIsNaN;
      var hasRequired_baseIsNaN;
      function require_baseIsNaN() {
        if (hasRequired_baseIsNaN) return _baseIsNaN;
        hasRequired_baseIsNaN = 1;
        function baseIsNaN(value) {
          return value !== value;
        }
        _baseIsNaN = baseIsNaN;
        return _baseIsNaN;
      }
      var _strictIndexOf;
      var hasRequired_strictIndexOf;
      function require_strictIndexOf() {
        if (hasRequired_strictIndexOf) return _strictIndexOf;
        hasRequired_strictIndexOf = 1;
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        _strictIndexOf = strictIndexOf;
        return _strictIndexOf;
      }
      var _baseIndexOf;
      var hasRequired_baseIndexOf;
      function require_baseIndexOf() {
        if (hasRequired_baseIndexOf) return _baseIndexOf;
        hasRequired_baseIndexOf = 1;
        var baseFindIndex = require_baseFindIndex(), baseIsNaN = require_baseIsNaN(), strictIndexOf = require_strictIndexOf();
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        _baseIndexOf = baseIndexOf;
        return _baseIndexOf;
      }
      var _arrayIncludes;
      var hasRequired_arrayIncludes;
      function require_arrayIncludes() {
        if (hasRequired_arrayIncludes) return _arrayIncludes;
        hasRequired_arrayIncludes = 1;
        var baseIndexOf = require_baseIndexOf();
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        _arrayIncludes = arrayIncludes;
        return _arrayIncludes;
      }
      var _arrayIncludesWith;
      var hasRequired_arrayIncludesWith;
      function require_arrayIncludesWith() {
        if (hasRequired_arrayIncludesWith) return _arrayIncludesWith;
        hasRequired_arrayIncludesWith = 1;
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        _arrayIncludesWith = arrayIncludesWith;
        return _arrayIncludesWith;
      }
      var _arrayMap;
      var hasRequired_arrayMap;
      function require_arrayMap() {
        if (hasRequired_arrayMap) return _arrayMap;
        hasRequired_arrayMap = 1;
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        _arrayMap = arrayMap;
        return _arrayMap;
      }
      var _cacheHas;
      var hasRequired_cacheHas;
      function require_cacheHas() {
        if (hasRequired_cacheHas) return _cacheHas;
        hasRequired_cacheHas = 1;
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        _cacheHas = cacheHas;
        return _cacheHas;
      }
      var _baseDifference;
      var hasRequired_baseDifference;
      function require_baseDifference() {
        if (hasRequired_baseDifference) return _baseDifference;
        hasRequired_baseDifference = 1;
        var SetCache = require_SetCache(), arrayIncludes = require_arrayIncludes(), arrayIncludesWith = require_arrayIncludesWith(), arrayMap = require_arrayMap(), baseUnary = require_baseUnary(), cacheHas = require_cacheHas();
        var LARGE_ARRAY_SIZE = 200;
        function baseDifference(array, values, iteratee, comparator) {
          var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          } else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee == null ? value : iteratee(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result.push(value);
              } else if (!includes(values, computed, comparator)) {
                result.push(value);
              }
            }
          return result;
        }
        _baseDifference = baseDifference;
        return _baseDifference;
      }
      var _isFlattenable;
      var hasRequired_isFlattenable;
      function require_isFlattenable() {
        if (hasRequired_isFlattenable) return _isFlattenable;
        hasRequired_isFlattenable = 1;
        var Symbol2 = require_Symbol(), isArguments = requireIsArguments(), isArray = requireIsArray();
        var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
        function isFlattenable(value) {
          return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        _isFlattenable = isFlattenable;
        return _isFlattenable;
      }
      var _baseFlatten;
      var hasRequired_baseFlatten;
      function require_baseFlatten() {
        if (hasRequired_baseFlatten) return _baseFlatten;
        hasRequired_baseFlatten = 1;
        var arrayPush = require_arrayPush(), isFlattenable = require_isFlattenable();
        function baseFlatten(array, depth, predicate, isStrict, result) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result || (result = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }
        _baseFlatten = baseFlatten;
        return _baseFlatten;
      }
      var isArrayLikeObject_1;
      var hasRequiredIsArrayLikeObject;
      function requireIsArrayLikeObject() {
        if (hasRequiredIsArrayLikeObject) return isArrayLikeObject_1;
        hasRequiredIsArrayLikeObject = 1;
        var isArrayLike = requireIsArrayLike(), isObjectLike = requireIsObjectLike();
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        isArrayLikeObject_1 = isArrayLikeObject;
        return isArrayLikeObject_1;
      }
      var difference_1;
      var hasRequiredDifference;
      function requireDifference() {
        if (hasRequiredDifference) return difference_1;
        hasRequiredDifference = 1;
        var baseDifference = require_baseDifference(), baseFlatten = require_baseFlatten(), baseRest = require_baseRest(), isArrayLikeObject = requireIsArrayLikeObject();
        var difference = baseRest(function(array, values) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        difference_1 = difference;
        return difference_1;
      }
      var _baseFunctions;
      var hasRequired_baseFunctions;
      function require_baseFunctions() {
        if (hasRequired_baseFunctions) return _baseFunctions;
        hasRequired_baseFunctions = 1;
        var arrayFilter = require_arrayFilter(), isFunction2 = requireIsFunction();
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        _baseFunctions = baseFunctions;
        return _baseFunctions;
      }
      var functions_1;
      var hasRequiredFunctions;
      function requireFunctions() {
        if (hasRequiredFunctions) return functions_1;
        hasRequiredFunctions = 1;
        var baseFunctions = require_baseFunctions(), keys = requireKeys();
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        functions_1 = functions;
        return functions_1;
      }
      var isString_1;
      var hasRequiredIsString;
      function requireIsString() {
        if (hasRequiredIsString) return isString_1;
        hasRequiredIsString = 1;
        var baseGetTag = require_baseGetTag(), isArray = requireIsArray(), isObjectLike = requireIsObjectLike();
        var stringTag = "[object String]";
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        isString_1 = isString2;
        return isString_1;
      }
      var _trimmedEndIndex;
      var hasRequired_trimmedEndIndex;
      function require_trimmedEndIndex() {
        if (hasRequired_trimmedEndIndex) return _trimmedEndIndex;
        hasRequired_trimmedEndIndex = 1;
        var reWhitespace = /\s/;
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        _trimmedEndIndex = trimmedEndIndex;
        return _trimmedEndIndex;
      }
      var _baseTrim;
      var hasRequired_baseTrim;
      function require_baseTrim() {
        if (hasRequired_baseTrim) return _baseTrim;
        hasRequired_baseTrim = 1;
        var trimmedEndIndex = require_trimmedEndIndex();
        var reTrimStart = /^\s+/;
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        _baseTrim = baseTrim;
        return _baseTrim;
      }
      var isSymbol_1;
      var hasRequiredIsSymbol;
      function requireIsSymbol() {
        if (hasRequiredIsSymbol) return isSymbol_1;
        hasRequiredIsSymbol = 1;
        var baseGetTag = require_baseGetTag(), isObjectLike = requireIsObjectLike();
        var symbolTag = "[object Symbol]";
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        isSymbol_1 = isSymbol;
        return isSymbol_1;
      }
      var toNumber_1;
      var hasRequiredToNumber;
      function requireToNumber() {
        if (hasRequiredToNumber) return toNumber_1;
        hasRequiredToNumber = 1;
        var baseTrim = require_baseTrim(), isObject2 = requireIsObject(), isSymbol = requireIsSymbol();
        var NAN = 0 / 0;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        toNumber_1 = toNumber;
        return toNumber_1;
      }
      var toFinite_1;
      var hasRequiredToFinite;
      function requireToFinite() {
        if (hasRequiredToFinite) return toFinite_1;
        hasRequiredToFinite = 1;
        var toNumber = requireToNumber();
        var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        toFinite_1 = toFinite;
        return toFinite_1;
      }
      var toInteger_1;
      var hasRequiredToInteger;
      function requireToInteger() {
        if (hasRequiredToInteger) return toInteger_1;
        hasRequiredToInteger = 1;
        var toFinite = requireToFinite();
        function toInteger2(value) {
          var result = toFinite(value), remainder = result % 1;
          return result === result ? remainder ? result - remainder : result : 0;
        }
        toInteger_1 = toInteger2;
        return toInteger_1;
      }
      var _baseValues;
      var hasRequired_baseValues;
      function require_baseValues() {
        if (hasRequired_baseValues) return _baseValues;
        hasRequired_baseValues = 1;
        var arrayMap = require_arrayMap();
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        _baseValues = baseValues;
        return _baseValues;
      }
      var values_1;
      var hasRequiredValues;
      function requireValues() {
        if (hasRequiredValues) return values_1;
        hasRequiredValues = 1;
        var baseValues = require_baseValues(), keys = requireKeys();
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        values_1 = values;
        return values_1;
      }
      var includes_1;
      var hasRequiredIncludes;
      function requireIncludes() {
        if (hasRequiredIncludes) return includes_1;
        hasRequiredIncludes = 1;
        var baseIndexOf = require_baseIndexOf(), isArrayLike = requireIsArrayLike(), isString2 = requireIsString(), toInteger2 = requireToInteger(), values = requireValues();
        var nativeMax = Math.max;
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        includes_1 = includes;
        return includes_1;
      }
      var isPlainObject_1;
      var hasRequiredIsPlainObject;
      function requireIsPlainObject() {
        if (hasRequiredIsPlainObject) return isPlainObject_1;
        hasRequiredIsPlainObject = 1;
        var baseGetTag = require_baseGetTag(), getPrototype = require_getPrototype(), isObjectLike = requireIsObjectLike();
        var objectTag = "[object Object]";
        var funcProto2 = Function.prototype, objectProto2 = Object.prototype;
        var funcToString2 = funcProto2.toString;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var objectCtorString = funcToString2.call(Object);
        function isPlainObject2(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString;
        }
        isPlainObject_1 = isPlainObject2;
        return isPlainObject_1;
      }
      var isElement_1;
      var hasRequiredIsElement;
      function requireIsElement() {
        if (hasRequiredIsElement) return isElement_1;
        hasRequiredIsElement = 1;
        var isObjectLike = requireIsObjectLike(), isPlainObject2 = requireIsPlainObject();
        function isElement2(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
        }
        isElement_1 = isElement2;
        return isElement_1;
      }
      var _assignMergeValue;
      var hasRequired_assignMergeValue;
      function require_assignMergeValue() {
        if (hasRequired_assignMergeValue) return _assignMergeValue;
        hasRequired_assignMergeValue = 1;
        var baseAssignValue = require_baseAssignValue(), eq2 = requireEq();
        function assignMergeValue(object, key, value) {
          if (value !== void 0 && !eq2(object[key], value) || value === void 0 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        _assignMergeValue = assignMergeValue;
        return _assignMergeValue;
      }
      var _createBaseFor;
      var hasRequired_createBaseFor;
      function require_createBaseFor() {
        if (hasRequired_createBaseFor) return _createBaseFor;
        hasRequired_createBaseFor = 1;
        function createBaseFor(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        _createBaseFor = createBaseFor;
        return _createBaseFor;
      }
      var _baseFor;
      var hasRequired_baseFor;
      function require_baseFor() {
        if (hasRequired_baseFor) return _baseFor;
        hasRequired_baseFor = 1;
        var createBaseFor = require_createBaseFor();
        var baseFor = createBaseFor();
        _baseFor = baseFor;
        return _baseFor;
      }
      var _safeGet;
      var hasRequired_safeGet;
      function require_safeGet() {
        if (hasRequired_safeGet) return _safeGet;
        hasRequired_safeGet = 1;
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        _safeGet = safeGet;
        return _safeGet;
      }
      var toPlainObject_1;
      var hasRequiredToPlainObject;
      function requireToPlainObject() {
        if (hasRequiredToPlainObject) return toPlainObject_1;
        hasRequiredToPlainObject = 1;
        var copyObject = require_copyObject(), keysIn = requireKeysIn();
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        toPlainObject_1 = toPlainObject;
        return toPlainObject_1;
      }
      var _baseMergeDeep;
      var hasRequired_baseMergeDeep;
      function require_baseMergeDeep() {
        if (hasRequired_baseMergeDeep) return _baseMergeDeep;
        hasRequired_baseMergeDeep = 1;
        var assignMergeValue = require_assignMergeValue(), cloneBuffer = require_cloneBuffer(), cloneTypedArray = require_cloneTypedArray(), copyArray = require_copyArray(), initCloneObject = require_initCloneObject(), isArguments = requireIsArguments(), isArray = requireIsArray(), isArrayLikeObject = requireIsArrayLikeObject(), isBuffer2 = requireIsBuffer(), isFunction2 = requireIsFunction(), isObject2 = requireIsObject(), isPlainObject2 = requireIsPlainObject(), isTypedArray = requireIsTypedArray(), safeGet = require_safeGet(), toPlainObject = requireToPlainObject();
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
          var isCommon = newValue === void 0;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        _baseMergeDeep = baseMergeDeep;
        return _baseMergeDeep;
      }
      var _baseMerge;
      var hasRequired_baseMerge;
      function require_baseMerge() {
        if (hasRequired_baseMerge) return _baseMerge;
        hasRequired_baseMerge = 1;
        var Stack = require_Stack(), assignMergeValue = require_assignMergeValue(), baseFor = require_baseFor(), baseMergeDeep = require_baseMergeDeep(), isObject2 = requireIsObject(), keysIn = requireKeysIn(), safeGet = require_safeGet();
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
              if (newValue === void 0) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        _baseMerge = baseMerge;
        return _baseMerge;
      }
      var merge_1;
      var hasRequiredMerge;
      function requireMerge() {
        if (hasRequiredMerge) return merge_1;
        hasRequiredMerge = 1;
        var baseMerge = require_baseMerge(), createAssigner = require_createAssigner();
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        merge_1 = merge;
        return merge_1;
      }
      var _baseToString;
      var hasRequired_baseToString;
      function require_baseToString() {
        if (hasRequired_baseToString) return _baseToString;
        hasRequired_baseToString = 1;
        var Symbol2 = require_Symbol(), arrayMap = require_arrayMap(), isArray = requireIsArray(), isSymbol = requireIsSymbol();
        var INFINITY = 1 / 0;
        var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY ? "-0" : result;
        }
        _baseToString = baseToString;
        return _baseToString;
      }
      var _baseSlice;
      var hasRequired_baseSlice;
      function require_baseSlice() {
        if (hasRequired_baseSlice) return _baseSlice;
        hasRequired_baseSlice = 1;
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result = Array(length);
          while (++index < length) {
            result[index] = array[index + start];
          }
          return result;
        }
        _baseSlice = baseSlice;
        return _baseSlice;
      }
      var _castSlice;
      var hasRequired_castSlice;
      function require_castSlice() {
        if (hasRequired_castSlice) return _castSlice;
        hasRequired_castSlice = 1;
        var baseSlice = require_baseSlice();
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === void 0 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        _castSlice = castSlice;
        return _castSlice;
      }
      var _charsEndIndex;
      var hasRequired_charsEndIndex;
      function require_charsEndIndex() {
        if (hasRequired_charsEndIndex) return _charsEndIndex;
        hasRequired_charsEndIndex = 1;
        var baseIndexOf = require_baseIndexOf();
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        _charsEndIndex = charsEndIndex;
        return _charsEndIndex;
      }
      var _charsStartIndex;
      var hasRequired_charsStartIndex;
      function require_charsStartIndex() {
        if (hasRequired_charsStartIndex) return _charsStartIndex;
        hasRequired_charsStartIndex = 1;
        var baseIndexOf = require_baseIndexOf();
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        _charsStartIndex = charsStartIndex;
        return _charsStartIndex;
      }
      var _asciiToArray;
      var hasRequired_asciiToArray;
      function require_asciiToArray() {
        if (hasRequired_asciiToArray) return _asciiToArray;
        hasRequired_asciiToArray = 1;
        function asciiToArray(string) {
          return string.split("");
        }
        _asciiToArray = asciiToArray;
        return _asciiToArray;
      }
      var _hasUnicode;
      var hasRequired_hasUnicode;
      function require_hasUnicode() {
        if (hasRequired_hasUnicode) return _hasUnicode;
        hasRequired_hasUnicode = 1;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
        var rsZWJ = "\\u200d";
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        _hasUnicode = hasUnicode;
        return _hasUnicode;
      }
      var _unicodeToArray;
      var hasRequired_unicodeToArray;
      function require_unicodeToArray() {
        if (hasRequired_unicodeToArray) return _unicodeToArray;
        hasRequired_unicodeToArray = 1;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
        var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ = "\\u200d";
        var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        _unicodeToArray = unicodeToArray;
        return _unicodeToArray;
      }
      var _stringToArray;
      var hasRequired_stringToArray;
      function require_stringToArray() {
        if (hasRequired_stringToArray) return _stringToArray;
        hasRequired_stringToArray = 1;
        var asciiToArray = require_asciiToArray(), hasUnicode = require_hasUnicode(), unicodeToArray = require_unicodeToArray();
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        _stringToArray = stringToArray;
        return _stringToArray;
      }
      var toString_1;
      var hasRequiredToString;
      function requireToString() {
        if (hasRequiredToString) return toString_1;
        hasRequiredToString = 1;
        var baseToString = require_baseToString();
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        toString_1 = toString;
        return toString_1;
      }
      var trim_1;
      var hasRequiredTrim;
      function requireTrim() {
        if (hasRequiredTrim) return trim_1;
        hasRequiredTrim = 1;
        var baseToString = require_baseToString(), baseTrim = require_baseTrim(), castSlice = require_castSlice(), charsEndIndex = require_charsEndIndex(), charsStartIndex = require_charsStartIndex(), stringToArray = require_stringToArray(), toString = requireToString();
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === void 0)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        trim_1 = trim;
        return trim_1;
      }
      (function(module2, exports3) {
        (function webpackUniversalModuleDefinition(root2, factory) {
          module2.exports = factory(requireAssign(), requireCloneDeep(), requireCompact(), requireDifference(), requireFunctions(), requireIdentity(), requireIncludes(), requireIsArray(), requireIsElement(), requireIsFunction(), requireIsPlainObject(), requireIsString(), requireMerge(), requireTrim());
        })(commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_lodash_assign__, __WEBPACK_EXTERNAL_MODULE_lodash_cloneDeep__, __WEBPACK_EXTERNAL_MODULE_lodash_compact__, __WEBPACK_EXTERNAL_MODULE_lodash_difference__, __WEBPACK_EXTERNAL_MODULE_lodash_functions__, __WEBPACK_EXTERNAL_MODULE_lodash_identity__, __WEBPACK_EXTERNAL_MODULE_lodash_includes__, __WEBPACK_EXTERNAL_MODULE_lodash_isArray__, __WEBPACK_EXTERNAL_MODULE_lodash_isElement__, __WEBPACK_EXTERNAL_MODULE_lodash_isFunction__, __WEBPACK_EXTERNAL_MODULE_lodash_isPlainObject__, __WEBPACK_EXTERNAL_MODULE_lodash_isString__, __WEBPACK_EXTERNAL_MODULE_lodash_merge__, __WEBPACK_EXTERNAL_MODULE_lodash_trim__) {
          return (
            /******/
            function(modules) {
              var installedModules = {};
              function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) {
                  return installedModules[moduleId].exports;
                }
                var module3 = installedModules[moduleId] = {
                  /******/
                  i: moduleId,
                  /******/
                  l: false,
                  /******/
                  exports: {}
                  /******/
                };
                modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
                module3.l = true;
                return module3.exports;
              }
              __webpack_require__.m = modules;
              __webpack_require__.c = installedModules;
              __webpack_require__.d = function(exports4, name, getter) {
                if (!__webpack_require__.o(exports4, name)) {
                  Object.defineProperty(exports4, name, { enumerable: true, get: getter });
                }
              };
              __webpack_require__.r = function(exports4) {
                if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                  Object.defineProperty(exports4, Symbol.toStringTag, { value: "Module" });
                }
                Object.defineProperty(exports4, "__esModule", { value: true });
              };
              __webpack_require__.t = function(value, mode) {
                if (mode & 1) value = __webpack_require__(value);
                if (mode & 8) return value;
                if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
                var ns = /* @__PURE__ */ Object.create(null);
                __webpack_require__.r(ns);
                Object.defineProperty(ns, "default", { enumerable: true, value });
                if (mode & 2 && typeof value != "string") for (var key in value) __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
                return ns;
              };
              __webpack_require__.n = function(module3) {
                var getter = module3 && module3.__esModule ? (
                  /******/
                  function getDefault() {
                    return module3["default"];
                  }
                ) : (
                  /******/
                  function getModuleExports() {
                    return module3;
                  }
                );
                __webpack_require__.d(getter, "a", getter);
                return getter;
              };
              __webpack_require__.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
              };
              __webpack_require__.p = "";
              return __webpack_require__(__webpack_require__.s = "./src/namespace/cloudinary-core.js");
            }({
              /***/
              "./src/namespace/cloudinary-core.js": (
                /***/
                function(module3, __webpack_exports__, __webpack_require__) {
                  __webpack_require__.r(__webpack_exports__);
                  __webpack_require__.d(__webpack_exports__, "ClientHintsMetaTag", function() {
                    return (
                      /* reexport */
                      clienthintsmetatag
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Cloudinary", function() {
                    return (
                      /* reexport */
                      cloudinary
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Condition", function() {
                    return (
                      /* reexport */
                      condition
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Configuration", function() {
                    return (
                      /* reexport */
                      src_configuration
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "crc32", function() {
                    return (
                      /* reexport */
                      src_crc32
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Expression", function() {
                    return (
                      /* reexport */
                      expression
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "FetchLayer", function() {
                    return (
                      /* reexport */
                      fetchlayer
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "HtmlTag", function() {
                    return (
                      /* reexport */
                      htmltag
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "ImageTag", function() {
                    return (
                      /* reexport */
                      imagetag
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Layer", function() {
                    return (
                      /* reexport */
                      layer_layer
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "PictureTag", function() {
                    return (
                      /* reexport */
                      picturetag
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "SubtitlesLayer", function() {
                    return (
                      /* reexport */
                      subtitleslayer
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "TextLayer", function() {
                    return (
                      /* reexport */
                      textlayer
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Transformation", function() {
                    return (
                      /* reexport */
                      src_transformation
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "utf8_encode", function() {
                    return (
                      /* reexport */
                      src_utf8_encode
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "Util", function() {
                    return (
                      /* reexport */
                      lodash_namespaceObject
                    );
                  });
                  __webpack_require__.d(__webpack_exports__, "VideoTag", function() {
                    return (
                      /* reexport */
                      videotag
                    );
                  });
                  var constants_namespaceObject = {};
                  __webpack_require__.r(constants_namespaceObject);
                  __webpack_require__.d(constants_namespaceObject, "VERSION", function() {
                    return VERSION;
                  });
                  __webpack_require__.d(constants_namespaceObject, "CF_SHARED_CDN", function() {
                    return CF_SHARED_CDN;
                  });
                  __webpack_require__.d(constants_namespaceObject, "OLD_AKAMAI_SHARED_CDN", function() {
                    return OLD_AKAMAI_SHARED_CDN;
                  });
                  __webpack_require__.d(constants_namespaceObject, "AKAMAI_SHARED_CDN", function() {
                    return AKAMAI_SHARED_CDN;
                  });
                  __webpack_require__.d(constants_namespaceObject, "SHARED_CDN", function() {
                    return SHARED_CDN;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_TIMEOUT_MS", function() {
                    return DEFAULT_TIMEOUT_MS;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_POSTER_OPTIONS", function() {
                    return DEFAULT_POSTER_OPTIONS;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_SOURCE_TYPES", function() {
                    return DEFAULT_VIDEO_SOURCE_TYPES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "SEO_TYPES", function() {
                    return SEO_TYPES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_IMAGE_PARAMS", function() {
                    return DEFAULT_IMAGE_PARAMS;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_PARAMS", function() {
                    return DEFAULT_VIDEO_PARAMS;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_VIDEO_SOURCES", function() {
                    return DEFAULT_VIDEO_SOURCES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "DEFAULT_EXTERNAL_LIBRARIES", function() {
                    return DEFAULT_EXTERNAL_LIBRARIES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "PLACEHOLDER_IMAGE_MODES", function() {
                    return PLACEHOLDER_IMAGE_MODES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "ACCESSIBILITY_MODES", function() {
                    return ACCESSIBILITY_MODES;
                  });
                  __webpack_require__.d(constants_namespaceObject, "URL_KEYS", function() {
                    return URL_KEYS;
                  });
                  var lodash_namespaceObject = {};
                  __webpack_require__.r(lodash_namespaceObject);
                  __webpack_require__.d(lodash_namespaceObject, "getSDKAnalyticsSignature", function() {
                    return getSDKAnalyticsSignature;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "getAnalyticsOptions", function() {
                    return getAnalyticsOptions;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "assign", function() {
                    return assign_root_assign_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "cloneDeep", function() {
                    return cloneDeep_root_cloneDeep_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "compact", function() {
                    return compact_root_compact_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "difference", function() {
                    return difference_root_difference_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "functions", function() {
                    return functions_root_functions_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "identity", function() {
                    return identity_root_identity_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "includes", function() {
                    return includes_root_includes_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isArray", function() {
                    return isArray_root_isArray_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isPlainObject", function() {
                    return isPlainObject_root_isPlainObject_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isString", function() {
                    return isString_root_isString_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "merge", function() {
                    return merge_root_merge_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "contains", function() {
                    return includes_root_includes_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isIntersectionObserverSupported", function() {
                    return isIntersectionObserverSupported;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isNativeLazyLoadSupported", function() {
                    return isNativeLazyLoadSupported;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "detectIntersection", function() {
                    return detectIntersection;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "omit", function() {
                    return omit;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "allStrings", function() {
                    return baseutil_allStrings;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "without", function() {
                    return without;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isNumberLike", function() {
                    return isNumberLike;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "smartEscape", function() {
                    return smartEscape;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "defaults", function() {
                    return defaults;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "objectProto", function() {
                    return objectProto2;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "objToString", function() {
                    return objToString;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isObject", function() {
                    return isObject2;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "funcTag", function() {
                    return funcTag2;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "reWords", function() {
                    return reWords;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "camelCase", function() {
                    return camelCase;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "snakeCase", function() {
                    return snakeCase;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "convertKeys", function() {
                    return convertKeys;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "withCamelCaseKeys", function() {
                    return withCamelCaseKeys;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "withSnakeCaseKeys", function() {
                    return withSnakeCaseKeys;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "base64Encode", function() {
                    return base64Encode;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "base64EncodeURL", function() {
                    return base64EncodeURL;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "extractUrlParams", function() {
                    return extractUrlParams;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "patchFetchFormat", function() {
                    return patchFetchFormat;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "optionConsume", function() {
                    return optionConsume;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isEmpty", function() {
                    return isEmpty2;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isAndroid", function() {
                    return isAndroid;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isEdge", function() {
                    return isEdge;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isChrome", function() {
                    return isChrome;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isSafari", function() {
                    return isSafari;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isElement", function() {
                    return isElement_root_isElement_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "isFunction", function() {
                    return isFunction_root_isFunction_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "trim", function() {
                    return trim_root_trim_default.a;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "getData", function() {
                    return lodash_getData;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "setData", function() {
                    return lodash_setData;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "getAttribute", function() {
                    return lodash_getAttribute;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "setAttribute", function() {
                    return lodash_setAttribute;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "removeAttribute", function() {
                    return lodash_removeAttribute;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "setAttributes", function() {
                    return setAttributes;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "hasClass", function() {
                    return lodash_hasClass;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "addClass", function() {
                    return lodash_addClass;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "getStyles", function() {
                    return getStyles;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "cssExpand", function() {
                    return cssExpand;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "domStyle", function() {
                    return domStyle;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "curCSS", function() {
                    return curCSS;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "cssValue", function() {
                    return cssValue;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "augmentWidthOrHeight", function() {
                    return augmentWidthOrHeight;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "getWidthOrHeight", function() {
                    return getWidthOrHeight;
                  });
                  __webpack_require__.d(lodash_namespaceObject, "width", function() {
                    return lodash_width;
                  });
                  var src_utf8_encode = function utf8_encode(argString) {
                    var c1, enc, end, n, start, string, stringl, utftext;
                    if (argString === null || typeof argString === "undefined") {
                      return "";
                    }
                    string = argString + "";
                    utftext = "";
                    start = void 0;
                    end = void 0;
                    stringl = 0;
                    start = end = 0;
                    stringl = string.length;
                    n = 0;
                    while (n < stringl) {
                      c1 = string.charCodeAt(n);
                      enc = null;
                      if (c1 < 128) {
                        end++;
                      } else if (c1 > 127 && c1 < 2048) {
                        enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);
                      } else {
                        enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);
                      }
                      if (enc !== null) {
                        if (end > start) {
                          utftext += string.slice(start, end);
                        }
                        utftext += enc;
                        start = end = n + 1;
                      }
                      n++;
                    }
                    if (end > start) {
                      utftext += string.slice(start, stringl);
                    }
                    return utftext;
                  };
                  function crc32(str) {
                    var crc, i, iTop, table, x, y;
                    str = src_utf8_encode(str);
                    table = "00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F 63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC 51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E 7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D 806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA 11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F 30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D";
                    crc = 0;
                    x = 0;
                    y = 0;
                    crc = crc ^ -1;
                    i = 0;
                    iTop = str.length;
                    while (i < iTop) {
                      y = (crc ^ str.charCodeAt(i)) & 255;
                      x = "0x" + table.substr(y * 9, 8);
                      crc = crc >>> 8 ^ x;
                      i++;
                    }
                    crc = crc ^ -1;
                    if (crc < 0) {
                      crc += 4294967296;
                    }
                    return crc;
                  }
                  var src_crc32 = crc32;
                  function stringPad(value, targetLength, padString) {
                    targetLength = targetLength >> 0;
                    padString = String(typeof padString !== "undefined" ? padString : " ");
                    if (value.length > targetLength) {
                      return String(value);
                    } else {
                      targetLength = targetLength - value.length;
                      if (targetLength > padString.length) {
                        padString += repeatStringNumTimes(padString, targetLength / padString.length);
                      }
                      return padString.slice(0, targetLength) + String(value);
                    }
                  }
                  function repeatStringNumTimes(string, times) {
                    var repeatedString = "";
                    while (times > 0) {
                      repeatedString += string;
                      times--;
                    }
                    return repeatedString;
                  }
                  function _toConsumableArray2(arr) {
                    return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
                  }
                  function _nonIterableSpread2() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  function _unsupportedIterableToArray2(o, minLen) {
                    if (!o) return;
                    if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) n = o.constructor.name;
                    if (n === "Map" || n === "Set") return Array.from(o);
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
                  }
                  function _iterableToArray2(iter) {
                    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
                  }
                  function _arrayWithoutHoles2(arr) {
                    if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
                  }
                  function _arrayLikeToArray2(arr, len) {
                    if (len == null || len > arr.length) len = arr.length;
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                      arr2[i] = arr[i];
                    }
                    return arr2;
                  }
                  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                  var base64Map_num = 0;
                  var map = {};
                  _toConsumableArray2(chars).forEach(function(_char) {
                    var key = base64Map_num.toString(2);
                    key = stringPad(key, 6, "0");
                    map[key] = _char;
                    base64Map_num++;
                  });
                  var base64Map = map;
                  function reverseVersion(semVer) {
                    if (semVer.split(".").length < 2) {
                      throw new Error("invalid semVer, must have at least two segments");
                    }
                    return semVer.split(".").reverse().map(function(segment) {
                      return stringPad(segment, 2, "0");
                    }).join(".");
                  }
                  function encodeVersion(semVer) {
                    var strResult = "";
                    var parts = semVer.split(".").length;
                    var paddedStringLength = parts * 6;
                    var paddedReversedSemver = reverseVersion(semVer);
                    var num = parseInt(paddedReversedSemver.split(".").join(""));
                    var paddedBinary = num.toString(2);
                    paddedBinary = stringPad(paddedBinary, paddedStringLength, "0");
                    if (paddedBinary.length % 6 !== 0) {
                      throw "Version must be smaller than 43.21.26)";
                    }
                    paddedBinary.match(/.{1,6}/g).forEach(function(bitString) {
                      strResult += base64Map[bitString];
                    });
                    return strResult;
                  }
                  function getSDKAnalyticsSignature() {
                    var analyticsOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    try {
                      var twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);
                      var encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);
                      var encodedTechVersion = encodeVersion(twoPartVersion);
                      var featureCode = analyticsOptions.feature;
                      var SDKCode = analyticsOptions.sdkCode;
                      var algoVersion = "A";
                      return "".concat(algoVersion).concat(SDKCode).concat(encodedSDKVersion).concat(encodedTechVersion).concat(featureCode);
                    } catch (e) {
                      return "E";
                    }
                  }
                  function removePatchFromSemver(semVerStr) {
                    var parts = semVerStr.split(".");
                    return "".concat(parts[0], ".").concat(parts[1]);
                  }
                  function getAnalyticsOptions(options) {
                    var analyticsOptions = {
                      sdkSemver: options.sdkSemver,
                      techVersion: options.techVersion,
                      sdkCode: options.sdkCode,
                      feature: "0"
                    };
                    if (options.urlAnalytics) {
                      if (options.accessibility) {
                        analyticsOptions.feature = "D";
                      }
                      if (options.loading === "lazy") {
                        analyticsOptions.feature = "C";
                      }
                      if (options.responsive) {
                        analyticsOptions.feature = "A";
                      }
                      if (options.placeholder) {
                        analyticsOptions.feature = "B";
                      }
                      return analyticsOptions;
                    } else {
                      return {};
                    }
                  }
                  var assign_root_assign_ = __webpack_require__("lodash/assign");
                  var assign_root_assign_default = __webpack_require__.n(assign_root_assign_);
                  var cloneDeep_root_cloneDeep_ = __webpack_require__("lodash/cloneDeep");
                  var cloneDeep_root_cloneDeep_default = __webpack_require__.n(cloneDeep_root_cloneDeep_);
                  var compact_root_compact_ = __webpack_require__("lodash/compact");
                  var compact_root_compact_default = __webpack_require__.n(compact_root_compact_);
                  var difference_root_difference_ = __webpack_require__("lodash/difference");
                  var difference_root_difference_default = __webpack_require__.n(difference_root_difference_);
                  var functions_root_functions_ = __webpack_require__("lodash/functions");
                  var functions_root_functions_default = __webpack_require__.n(functions_root_functions_);
                  var identity_root_identity_ = __webpack_require__("lodash/identity");
                  var identity_root_identity_default = __webpack_require__.n(identity_root_identity_);
                  var includes_root_includes_ = __webpack_require__("lodash/includes");
                  var includes_root_includes_default = __webpack_require__.n(includes_root_includes_);
                  var isArray_root_isArray_ = __webpack_require__("lodash/isArray");
                  var isArray_root_isArray_default = __webpack_require__.n(isArray_root_isArray_);
                  var isPlainObject_root_isPlainObject_ = __webpack_require__("lodash/isPlainObject");
                  var isPlainObject_root_isPlainObject_default = __webpack_require__.n(isPlainObject_root_isPlainObject_);
                  var isString_root_isString_ = __webpack_require__("lodash/isString");
                  var isString_root_isString_default = __webpack_require__.n(isString_root_isString_);
                  var merge_root_merge_ = __webpack_require__("lodash/merge");
                  var merge_root_merge_default = __webpack_require__.n(merge_root_merge_);
                  var isElement_root_isElement_ = __webpack_require__("lodash/isElement");
                  var isElement_root_isElement_default = __webpack_require__.n(isElement_root_isElement_);
                  var isFunction_root_isFunction_ = __webpack_require__("lodash/isFunction");
                  var isFunction_root_isFunction_default = __webpack_require__.n(isFunction_root_isFunction_);
                  var trim_root_trim_ = __webpack_require__("lodash/trim");
                  var trim_root_trim_default = __webpack_require__.n(trim_root_trim_);
                  function _typeof2(obj) {
                    "@babel/helpers - typeof";
                    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, _typeof2(obj);
                  }
                  function isIntersectionObserverSupported() {
                    return (typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object" && window.IntersectionObserver;
                  }
                  function isNativeLazyLoadSupported() {
                    return (typeof HTMLImageElement === "undefined" ? "undefined" : _typeof2(HTMLImageElement)) === "object" && HTMLImageElement.prototype.loading;
                  }
                  function detectIntersection(el, onIntersect) {
                    try {
                      if (isNativeLazyLoadSupported() || !isIntersectionObserverSupported()) {
                        onIntersect();
                        return;
                      }
                      var observer = new IntersectionObserver(function(entries) {
                        entries.forEach(function(entry) {
                          if (entry.isIntersecting) {
                            onIntersect();
                            observer.unobserve(entry.target);
                          }
                        });
                      }, {
                        threshold: [0, 0.01]
                      });
                      observer.observe(el);
                    } catch (e) {
                      onIntersect();
                    }
                  }
                  var VERSION = "2.5.0";
                  var CF_SHARED_CDN = "d3jpl91pxevbkh.cloudfront.net";
                  var OLD_AKAMAI_SHARED_CDN = "cloudinary-a.akamaihd.net";
                  var AKAMAI_SHARED_CDN = "res.cloudinary.com";
                  var SHARED_CDN = AKAMAI_SHARED_CDN;
                  var DEFAULT_TIMEOUT_MS = 1e4;
                  var DEFAULT_POSTER_OPTIONS = {
                    format: "jpg",
                    resource_type: "video"
                  };
                  var DEFAULT_VIDEO_SOURCE_TYPES = ["webm", "mp4", "ogv"];
                  var SEO_TYPES = {
                    "image/upload": "images",
                    "image/private": "private_images",
                    "image/authenticated": "authenticated_images",
                    "raw/upload": "files",
                    "video/upload": "videos"
                  };
                  var DEFAULT_IMAGE_PARAMS = {
                    resource_type: "image",
                    transformation: [],
                    type: "upload"
                  };
                  var DEFAULT_VIDEO_PARAMS = {
                    fallback_content: "",
                    resource_type: "video",
                    source_transformation: {},
                    source_types: DEFAULT_VIDEO_SOURCE_TYPES,
                    transformation: [],
                    type: "upload"
                  };
                  var DEFAULT_VIDEO_SOURCES = [
                    {
                      type: "mp4",
                      codecs: "hev1",
                      transformations: {
                        video_codec: "h265"
                      }
                    },
                    {
                      type: "webm",
                      codecs: "vp9",
                      transformations: {
                        video_codec: "vp9"
                      }
                    },
                    {
                      type: "mp4",
                      transformations: {
                        video_codec: "auto"
                      }
                    },
                    {
                      type: "webm",
                      transformations: {
                        video_codec: "auto"
                      }
                    }
                  ];
                  var DEFAULT_EXTERNAL_LIBRARIES = {
                    seeThru: "https://unpkg.com/seethru@4/dist/seeThru.min.js"
                  };
                  var PLACEHOLDER_IMAGE_MODES = {
                    "blur": [{
                      effect: "blur:2000",
                      quality: 1,
                      fetch_format: "auto"
                    }],
                    // Default
                    "pixelate": [{
                      effect: "pixelate",
                      quality: 1,
                      fetch_format: "auto"
                    }],
                    // Generates a pixel size image which color is the predominant color of the original image.
                    "predominant-color-pixel": [
                      {
                        width: "iw_div_2",
                        aspect_ratio: 1,
                        crop: "pad",
                        background: "auto"
                      },
                      {
                        crop: "crop",
                        width: 1,
                        height: 1,
                        gravity: "north_east"
                      },
                      {
                        fetch_format: "auto",
                        quality: "auto"
                      }
                    ],
                    // Generates an image which color is the predominant color of the original image.
                    "predominant-color": [
                      {
                        variables: [["$currWidth", "w"], ["$currHeight", "h"]]
                      },
                      {
                        width: "iw_div_2",
                        aspect_ratio: 1,
                        crop: "pad",
                        background: "auto"
                      },
                      {
                        crop: "crop",
                        width: 10,
                        height: 10,
                        gravity: "north_east"
                      },
                      {
                        width: "$currWidth",
                        height: "$currHeight",
                        crop: "fill"
                      },
                      {
                        fetch_format: "auto",
                        quality: "auto"
                      }
                    ],
                    "vectorize": [{
                      effect: "vectorize:3:0.1",
                      fetch_format: "svg"
                    }]
                  };
                  var ACCESSIBILITY_MODES = {
                    darkmode: "tint:75:black",
                    brightmode: "tint:50:white",
                    monochrome: "grayscale",
                    colorblind: "assist_colorblind"
                  };
                  var URL_KEYS = ["accessibility", "api_secret", "auth_token", "cdn_subdomain", "cloud_name", "cname", "format", "placeholder", "private_cdn", "resource_type", "secure", "secure_cdn_subdomain", "secure_distribution", "shorten", "sign_url", "signature", "ssl_detected", "type", "url_suffix", "use_root_path", "version"];
                  function baseutil_typeof(obj) {
                    "@babel/helpers - typeof";
                    return baseutil_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, baseutil_typeof(obj);
                  }
                  function omit(obj, keys) {
                    obj = obj || {};
                    var srcKeys = Object.keys(obj).filter(function(key) {
                      return !includes_root_includes_default()(keys, key);
                    });
                    var filtered = {};
                    srcKeys.forEach(function(key) {
                      return filtered[key] = obj[key];
                    });
                    return filtered;
                  }
                  var baseutil_allStrings = function allStrings(list) {
                    return list.length && list.every(isString_root_isString_default.a);
                  };
                  var without = function without2(array, item) {
                    return array.filter(function(v) {
                      return v !== item;
                    });
                  };
                  var isNumberLike = function isNumberLike2(value) {
                    return value != null && !isNaN(parseFloat(value));
                  };
                  var smartEscape = function smartEscape2(string) {
                    var unsafe = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /([^a-zA-Z0-9_.\-\/:]+)/g;
                    return string.replace(unsafe, function(match2) {
                      return match2.split("").map(function(c) {
                        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
                      }).join("");
                    });
                  };
                  var defaults = function defaults2(destination) {
                    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      sources[_key - 1] = arguments[_key];
                    }
                    return sources.reduce(function(dest, source) {
                      var key, value;
                      for (key in source) {
                        value = source[key];
                        if (dest[key] === void 0) {
                          dest[key] = value;
                        }
                      }
                      return dest;
                    }, destination);
                  };
                  var objectProto2 = Object.prototype;
                  var objToString = objectProto2.toString;
                  var isObject2 = function isObject3(value) {
                    var type;
                    type = baseutil_typeof(value);
                    return !!value && (type === "object" || type === "function");
                  };
                  var funcTag2 = "[object Function]";
                  var isFunction2 = function isFunction3(value) {
                    return isObject2(value) && objToString.call(value) === funcTag2;
                  };
                  var reWords = function() {
                    var lower, upper;
                    upper = "[A-Z]";
                    lower = "[a-z]+";
                    return RegExp(upper + "+(?=" + upper + lower + ")|" + upper + "?" + lower + "|" + upper + "+|[0-9]+", "g");
                  }();
                  var camelCase = function camelCase2(source) {
                    var words = source.match(reWords);
                    words = words.map(function(word) {
                      return word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase();
                    });
                    words[0] = words[0].toLocaleLowerCase();
                    return words.join("");
                  };
                  var snakeCase = function snakeCase2(source) {
                    var words = source.match(reWords);
                    words = words.map(function(word) {
                      return word.toLocaleLowerCase();
                    });
                    return words.join("_");
                  };
                  var convertKeys = function convertKeys2(source, converter) {
                    var result, value;
                    result = {};
                    for (var key in source) {
                      value = source[key];
                      if (converter) {
                        key = converter(key);
                      }
                      if (!isEmpty2(key)) {
                        result[key] = value;
                      }
                    }
                    return result;
                  };
                  var withCamelCaseKeys = function withCamelCaseKeys2(source) {
                    return convertKeys(source, camelCase);
                  };
                  var withSnakeCaseKeys = function withSnakeCaseKeys2(source) {
                    return convertKeys(source, snakeCase);
                  };
                  var base64Encode = typeof btoa !== "undefined" && isFunction2(btoa) ? btoa : typeof Buffer !== "undefined" && isFunction2(Buffer) ? function(input) {
                    if (!(input instanceof Buffer)) {
                      input = new Buffer.from(String(input), "binary");
                    }
                    return input.toString("base64");
                  } : function(input) {
                    throw new Error("No base64 encoding function found");
                  };
                  var base64EncodeURL = function base64EncodeURL2(url) {
                    try {
                      url = decodeURI(url);
                    } finally {
                      url = encodeURI(url);
                    }
                    return base64Encode(url);
                  };
                  function extractUrlParams(options) {
                    return URL_KEYS.reduce(function(obj, key) {
                      if (options[key] != null) {
                        obj[key] = options[key];
                      }
                      return obj;
                    }, {});
                  }
                  function patchFetchFormat(options) {
                    if (options == null) {
                      options = {};
                    }
                    if (options.type === "fetch") {
                      if (options.fetch_format == null) {
                        options.fetch_format = optionConsume(options, "format");
                      }
                    }
                  }
                  function optionConsume(options, option_name, default_value) {
                    var result = options[option_name];
                    delete options[option_name];
                    if (result != null) {
                      return result;
                    } else {
                      return default_value;
                    }
                  }
                  function isEmpty2(value) {
                    if (value == null) {
                      return true;
                    }
                    if (typeof value.length == "number") {
                      return value.length === 0;
                    }
                    if (typeof value.size == "number") {
                      return value.size === 0;
                    }
                    if (baseutil_typeof(value) == "object") {
                      for (var key in value) {
                        if (value.hasOwnProperty(key)) {
                          return false;
                        }
                      }
                      return true;
                    }
                    return true;
                  }
                  function getUserAgent() {
                    return navigator && navigator.userAgent || "";
                  }
                  function isAndroid() {
                    var userAgent = getUserAgent();
                    return /Android/i.test(userAgent);
                  }
                  function isEdge() {
                    var userAgent = getUserAgent();
                    return /Edg/i.test(userAgent);
                  }
                  function isChrome() {
                    var userAgent = getUserAgent();
                    return !isEdge() && (/Chrome/i.test(userAgent) || /CriOS/i.test(userAgent));
                  }
                  function isSafari() {
                    var userAgent = getUserAgent();
                    return /Safari/i.test(userAgent) && !isChrome() && !isAndroid() && !isEdge();
                  }
                  var nodeContains;
                  var lodash_getData = function getData(element, name) {
                    switch (false) {
                      case !(element == null):
                        return void 0;
                      case !isFunction_root_isFunction_default()(element.getAttribute):
                        return element.getAttribute("data-".concat(name));
                      case !isFunction_root_isFunction_default()(element.getAttr):
                        return element.getAttr("data-".concat(name));
                      case !isFunction_root_isFunction_default()(element.data):
                        return element.data(name);
                      case !(isFunction_root_isFunction_default()(typeof jQuery !== "undefined" && jQuery.fn && jQuery.fn.data) && isElement_root_isElement_default()(element)):
                        return jQuery(element).data(name);
                    }
                  };
                  var lodash_setData = function setData(element, name, value) {
                    switch (false) {
                      case !(element == null):
                        return void 0;
                      case !isFunction_root_isFunction_default()(element.setAttribute):
                        return element.setAttribute("data-".concat(name), value);
                      case !isFunction_root_isFunction_default()(element.setAttr):
                        return element.setAttr("data-".concat(name), value);
                      case !isFunction_root_isFunction_default()(element.data):
                        return element.data(name, value);
                      case !(isFunction_root_isFunction_default()(typeof jQuery !== "undefined" && jQuery.fn && jQuery.fn.data) && isElement_root_isElement_default()(element)):
                        return jQuery(element).data(name, value);
                    }
                  };
                  var lodash_getAttribute = function getAttribute(element, name) {
                    switch (false) {
                      case !(element == null):
                        return void 0;
                      case !isFunction_root_isFunction_default()(element.getAttribute):
                        return element.getAttribute(name);
                      case !isFunction_root_isFunction_default()(element.attr):
                        return element.attr(name);
                      case !isFunction_root_isFunction_default()(element.getAttr):
                        return element.getAttr(name);
                    }
                  };
                  var lodash_setAttribute = function setAttribute(element, name, value) {
                    switch (false) {
                      case !(element == null):
                        return void 0;
                      case !isFunction_root_isFunction_default()(element.setAttribute):
                        return element.setAttribute(name, value);
                      case !isFunction_root_isFunction_default()(element.attr):
                        return element.attr(name, value);
                      case !isFunction_root_isFunction_default()(element.setAttr):
                        return element.setAttr(name, value);
                    }
                  };
                  var lodash_removeAttribute = function removeAttribute(element, name) {
                    switch (false) {
                      case !(element == null):
                        return void 0;
                      case !isFunction_root_isFunction_default()(element.removeAttribute):
                        return element.removeAttribute(name);
                      default:
                        return lodash_setAttribute(element, void 0);
                    }
                  };
                  var setAttributes = function setAttributes2(element, attributes) {
                    var name, results, value;
                    results = [];
                    for (name in attributes) {
                      value = attributes[name];
                      if (value != null) {
                        results.push(lodash_setAttribute(element, name, value));
                      } else {
                        results.push(lodash_removeAttribute(element, name));
                      }
                    }
                    return results;
                  };
                  var lodash_hasClass = function hasClass(element, name) {
                    if (isElement_root_isElement_default()(element)) {
                      return element.className.match(new RegExp("\\b".concat(name, "\\b")));
                    }
                  };
                  var lodash_addClass = function addClass(element, name) {
                    if (!element.className.match(new RegExp("\\b".concat(name, "\\b")))) {
                      return element.className = trim_root_trim_default()("".concat(element.className, " ").concat(name));
                    }
                  };
                  var getStyles = function getStyles2(elem) {
                    if (elem.ownerDocument.defaultView.opener) {
                      return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
                    }
                    return window.getComputedStyle(elem, null);
                  };
                  var cssExpand = ["Top", "Right", "Bottom", "Left"];
                  nodeContains = function nodeContains2(a, b) {
                    var adown, bup;
                    adown = a.nodeType === 9 ? a.documentElement : a;
                    bup = b && b.parentNode;
                    return a === bup || !!(bup && bup.nodeType === 1 && adown.contains(bup));
                  };
                  var domStyle = function domStyle2(elem, name) {
                    if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
                      return elem.style[name];
                    }
                  };
                  var curCSS = function curCSS2(elem, name, computed) {
                    var maxWidth, minWidth, ret, rmargin, style, width;
                    rmargin = /^margin/;
                    width = void 0;
                    minWidth = void 0;
                    maxWidth = void 0;
                    ret = void 0;
                    style = elem.style;
                    computed = computed || getStyles(elem);
                    if (computed) {
                      ret = computed.getPropertyValue(name) || computed[name];
                    }
                    if (computed) {
                      if (ret === "" && !nodeContains(elem.ownerDocument, elem)) {
                        ret = domStyle(elem, name);
                      }
                      if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth;
                      }
                    }
                    if (ret !== void 0) {
                      return ret + "";
                    } else {
                      return ret;
                    }
                  };
                  var cssValue = function cssValue2(elem, name, convert, styles) {
                    var val;
                    val = curCSS(elem, name, styles);
                    if (convert) {
                      return parseFloat(val);
                    } else {
                      return val;
                    }
                  };
                  var augmentWidthOrHeight = function augmentWidthOrHeight2(elem, name, extra, isBorderBox, styles) {
                    var i, len, side, sides, val;
                    if (extra === (isBorderBox ? "border" : "content")) {
                      return 0;
                    } else {
                      sides = name === "width" ? ["Right", "Left"] : ["Top", "Bottom"];
                      val = 0;
                      for (i = 0, len = sides.length; i < len; i++) {
                        side = sides[i];
                        if (extra === "margin") {
                          val += cssValue(elem, extra + side, true, styles);
                        }
                        if (isBorderBox) {
                          if (extra === "content") {
                            val -= cssValue(elem, "padding".concat(side), true, styles);
                          }
                          if (extra !== "margin") {
                            val -= cssValue(elem, "border".concat(side, "Width"), true, styles);
                          }
                        } else {
                          val += cssValue(elem, "padding".concat(side), true, styles);
                          if (extra !== "padding") {
                            val += cssValue(elem, "border".concat(side, "Width"), true, styles);
                          }
                        }
                      }
                      return val;
                    }
                  };
                  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
                  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
                  var getWidthOrHeight = function getWidthOrHeight2(elem, name, extra) {
                    var isBorderBox, styles, val, valueIsBorderBox;
                    valueIsBorderBox = true;
                    val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
                    styles = getStyles(elem);
                    isBorderBox = cssValue(elem, "boxSizing", false, styles) === "border-box";
                    if (val <= 0 || val == null) {
                      val = curCSS(elem, name, styles);
                      if (val < 0 || val == null) {
                        val = elem.style[name];
                      }
                      if (rnumnonpx.test(val)) {
                        return val;
                      }
                      valueIsBorderBox = isBorderBox && val === elem.style[name];
                      val = parseFloat(val) || 0;
                    }
                    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles);
                  };
                  var lodash_width = function width(element) {
                    return getWidthOrHeight(element, "width", "content");
                  };
                  function _classCallCheck2(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function _defineProperties2(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function _createClass2(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties2(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties2(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var Expression = function() {
                    function Expression2(expressionStr) {
                      _classCallCheck2(this, Expression2);
                      this.expressions = [];
                      if (expressionStr != null) {
                        this.expressions.push(Expression2.normalize(expressionStr));
                      }
                    }
                    _createClass2(
                      Expression2,
                      [
                        {
                          key: "serialize",
                          value: (
                            /**
                             * Serialize the expression
                             * @return {string} the expression as a string
                             */
                            function serialize() {
                              return Expression2.normalize(this.expressions.join("_"));
                            }
                          )
                        },
                        {
                          key: "toString",
                          value: function toString() {
                            return this.serialize();
                          }
                          /**
                           * Get the parent transformation of this expression
                           * @return Transformation
                           */
                        },
                        {
                          key: "getParent",
                          value: function getParent() {
                            return this.parent;
                          }
                          /**
                           * Set the parent transformation of this expression
                           * @param {Transformation} the parent transformation
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "setParent",
                          value: function setParent(parent) {
                            this.parent = parent;
                            return this;
                          }
                          /**
                           * Add a expression
                           * @function Expression#predicate
                           * @internal
                           */
                        },
                        {
                          key: "predicate",
                          value: function predicate(name, operator, value) {
                            if (Expression2.OPERATORS[operator] != null) {
                              operator = Expression2.OPERATORS[operator];
                            }
                            this.expressions.push("".concat(name, "_").concat(operator, "_").concat(value));
                            return this;
                          }
                          /**
                           * @function Expression#and
                           */
                        },
                        {
                          key: "and",
                          value: function and() {
                            this.expressions.push("and");
                            return this;
                          }
                          /**
                           * @function Expression#or
                           */
                        },
                        {
                          key: "or",
                          value: function or() {
                            this.expressions.push("or");
                            return this;
                          }
                          /**
                           * Conclude expression
                           * @function Expression#then
                           * @return {Transformation} the transformation this expression is defined for
                           */
                        },
                        {
                          key: "then",
                          value: function then() {
                            return this.getParent()["if"](this.toString());
                          }
                          /**
                           * @function Expression#height
                           * @param {string} operator the comparison operator (e.g. "<", "lt")
                           * @param {string|number} value the right hand side value
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "height",
                          value: function height(operator, value) {
                            return this.predicate("h", operator, value);
                          }
                          /**
                           * @function Expression#width
                           * @param {string} operator the comparison operator (e.g. "<", "lt")
                           * @param {string|number} value the right hand side value
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "width",
                          value: function width(operator, value) {
                            return this.predicate("w", operator, value);
                          }
                          /**
                           * @function Expression#aspectRatio
                           * @param {string} operator the comparison operator (e.g. "<", "lt")
                           * @param {string|number} value the right hand side value
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "aspectRatio",
                          value: function aspectRatio(operator, value) {
                            return this.predicate("ar", operator, value);
                          }
                          /**
                           * @function Expression#pages
                           * @param {string} operator the comparison operator (e.g. "<", "lt")
                           * @param {string|number} value the right hand side value
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "pageCount",
                          value: function pageCount(operator, value) {
                            return this.predicate("pc", operator, value);
                          }
                          /**
                           * @function Expression#faces
                           * @param {string} operator the comparison operator (e.g. "<", "lt")
                           * @param {string|number} value the right hand side value
                           * @return {Expression} this expression
                           */
                        },
                        {
                          key: "faceCount",
                          value: function faceCount(operator, value) {
                            return this.predicate("fc", operator, value);
                          }
                        },
                        {
                          key: "value",
                          value: function value(_value) {
                            this.expressions.push(_value);
                            return this;
                          }
                          /**
                           */
                        }
                      ],
                      [
                        {
                          key: "new",
                          value: function _new(expressionStr) {
                            return new this(expressionStr);
                          }
                          /**
                           * Normalize a string expression
                           * @function Cloudinary#normalize
                           * @param {string} expression a expression, e.g. "w gt 100", "width_gt_100", "width > 100"
                           * @return {string} the normalized form of the value expression, e.g. "w_gt_100"
                           */
                        },
                        {
                          key: "normalize",
                          value: function normalize(expression2) {
                            if (expression2 == null) {
                              return expression2;
                            }
                            expression2 = String(expression2);
                            var operators = "\\|\\||>=|<=|&&|!=|>|=|<|/|-|\\+|\\*|\\^";
                            var operatorsPattern = "((" + operators + ")(?=[ _]))";
                            var operatorsReplaceRE = new RegExp(operatorsPattern, "g");
                            expression2 = expression2.replace(operatorsReplaceRE, function(match2) {
                              return Expression2.OPERATORS[match2];
                            });
                            var predefinedVarsPattern = "(" + Object.keys(Expression2.PREDEFINED_VARS).map(function(v) {
                              return ":".concat(v, "|").concat(v);
                            }).join("|") + ")";
                            var userVariablePattern = "(\\$_*[^_ ]+)";
                            var variablesReplaceRE = new RegExp("".concat(userVariablePattern, "|").concat(predefinedVarsPattern), "g");
                            expression2 = expression2.replace(variablesReplaceRE, function(match2) {
                              return Expression2.PREDEFINED_VARS[match2] || match2;
                            });
                            return expression2.replace(/[ _]+/g, "_");
                          }
                        },
                        {
                          key: "variable",
                          value: function variable(name, value) {
                            return new this(name).value(value);
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "width"
                           * @function Expression.width
                           */
                        },
                        {
                          key: "width",
                          value: function width() {
                            return new this("width");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "height"
                           * @function Expression.height
                           */
                        },
                        {
                          key: "height",
                          value: function height() {
                            return new this("height");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "initialWidth"
                           * @function Expression.initialWidth
                           */
                        },
                        {
                          key: "initialWidth",
                          value: function initialWidth() {
                            return new this("initialWidth");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "initialHeight"
                           * @function Expression.initialHeight
                           */
                        },
                        {
                          key: "initialHeight",
                          value: function initialHeight() {
                            return new this("initialHeight");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "aspectRatio"
                           * @function Expression.aspectRatio
                           */
                        },
                        {
                          key: "aspectRatio",
                          value: function aspectRatio() {
                            return new this("aspectRatio");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "initialAspectRatio"
                           * @function Expression.initialAspectRatio
                           */
                        },
                        {
                          key: "initialAspectRatio",
                          value: function initialAspectRatio() {
                            return new this("initialAspectRatio");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "pageCount"
                           * @function Expression.pageCount
                           */
                        },
                        {
                          key: "pageCount",
                          value: function pageCount() {
                            return new this("pageCount");
                          }
                          /**
                           * @returns Expression new expression with the predefined variable "faceCount"
                           * @function Expression.faceCount
                           */
                        },
                        {
                          key: "faceCount",
                          value: function faceCount() {
                            return new this("faceCount");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "currentPage"
                           * @function Expression.currentPage
                           */
                        },
                        {
                          key: "currentPage",
                          value: function currentPage() {
                            return new this("currentPage");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "tags"
                           * @function Expression.tags
                           */
                        },
                        {
                          key: "tags",
                          value: function tags() {
                            return new this("tags");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "pageX"
                           * @function Expression.pageX
                           */
                        },
                        {
                          key: "pageX",
                          value: function pageX() {
                            return new this("pageX");
                          }
                          /**
                           * @returns Expression a new expression with the predefined variable "pageY"
                           * @function Expression.pageY
                           */
                        },
                        {
                          key: "pageY",
                          value: function pageY() {
                            return new this("pageY");
                          }
                        }
                      ]
                    );
                    return Expression2;
                  }();
                  Expression.OPERATORS = {
                    "=": "eq",
                    "!=": "ne",
                    "<": "lt",
                    ">": "gt",
                    "<=": "lte",
                    ">=": "gte",
                    "&&": "and",
                    "||": "or",
                    "*": "mul",
                    "/": "div",
                    "+": "add",
                    "-": "sub",
                    "^": "pow"
                  };
                  Expression.PREDEFINED_VARS = {
                    "aspect_ratio": "ar",
                    "aspectRatio": "ar",
                    "current_page": "cp",
                    "currentPage": "cp",
                    "duration": "du",
                    "face_count": "fc",
                    "faceCount": "fc",
                    "height": "h",
                    "initial_aspect_ratio": "iar",
                    "initial_duration": "idu",
                    "initial_height": "ih",
                    "initial_width": "iw",
                    "initialAspectRatio": "iar",
                    "initialDuration": "idu",
                    "initialHeight": "ih",
                    "initialWidth": "iw",
                    "page_count": "pc",
                    "page_x": "px",
                    "page_y": "py",
                    "pageCount": "pc",
                    "pageX": "px",
                    "pageY": "py",
                    "tags": "tags",
                    "width": "w"
                  };
                  Expression.BOUNDRY = "[ _]+";
                  var expression = Expression;
                  function condition_typeof(obj) {
                    "@babel/helpers - typeof";
                    return condition_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, condition_typeof(obj);
                  }
                  function condition_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function condition_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function condition_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) condition_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) condition_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function _inherits2(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) _setPrototypeOf2(subClass, superClass);
                  }
                  function _setPrototypeOf2(o, p) {
                    _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return _setPrototypeOf2(o, p);
                  }
                  function _createSuper2(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct2();
                    return function _createSuperInternal() {
                      var Super = _getPrototypeOf2(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf2(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return _possibleConstructorReturn2(this, result);
                    };
                  }
                  function _possibleConstructorReturn2(self2, call) {
                    if (call && (condition_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return _assertThisInitialized2(self2);
                  }
                  function _assertThisInitialized2(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function _isNativeReflectConstruct2() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function _getPrototypeOf2(o) {
                    _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return _getPrototypeOf2(o);
                  }
                  var Condition = function(_Expression) {
                    _inherits2(Condition2, _Expression);
                    var _super = _createSuper2(Condition2);
                    function Condition2(conditionStr) {
                      condition_classCallCheck(this, Condition2);
                      return _super.call(this, conditionStr);
                    }
                    condition_createClass(Condition2, [
                      {
                        key: "height",
                        value: function height(operator, value) {
                          return this.predicate("h", operator, value);
                        }
                        /**
                         * @function Condition#width
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "width",
                        value: function width(operator, value) {
                          return this.predicate("w", operator, value);
                        }
                        /**
                         * @function Condition#aspectRatio
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "aspectRatio",
                        value: function aspectRatio(operator, value) {
                          return this.predicate("ar", operator, value);
                        }
                        /**
                         * @function Condition#pages
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "pageCount",
                        value: function pageCount(operator, value) {
                          return this.predicate("pc", operator, value);
                        }
                        /**
                         * @function Condition#faces
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "faceCount",
                        value: function faceCount(operator, value) {
                          return this.predicate("fc", operator, value);
                        }
                        /**
                         * @function Condition#duration
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "duration",
                        value: function duration(operator, value) {
                          return this.predicate("du", operator, value);
                        }
                        /**
                         * @function Condition#initialDuration
                         * @param {string} operator the comparison operator (e.g. "<", "lt")
                         * @param {string|number} value the right hand side value
                         * @return {Condition} this condition
                         */
                      },
                      {
                        key: "initialDuration",
                        value: function initialDuration(operator, value) {
                          return this.predicate("idu", operator, value);
                        }
                      }
                    ]);
                    return Condition2;
                  }(expression);
                  var condition = Condition;
                  function _slicedToArray(arr, i) {
                    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || configuration_unsupportedIterableToArray(arr, i) || _nonIterableRest();
                  }
                  function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  function configuration_unsupportedIterableToArray(o, minLen) {
                    if (!o) return;
                    if (typeof o === "string") return configuration_arrayLikeToArray(o, minLen);
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) n = o.constructor.name;
                    if (n === "Map" || n === "Set") return Array.from(o);
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return configuration_arrayLikeToArray(o, minLen);
                  }
                  function configuration_arrayLikeToArray(arr, len) {
                    if (len == null || len > arr.length) len = arr.length;
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                      arr2[i] = arr[i];
                    }
                    return arr2;
                  }
                  function _iterableToArrayLimit(arr, i) {
                    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                    if (_i == null) return;
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _s, _e;
                    try {
                      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break;
                      }
                    } catch (err) {
                      _d = true;
                      _e = err;
                    } finally {
                      try {
                        if (!_n && _i["return"] != null) _i["return"]();
                      } finally {
                        if (_d) throw _e;
                      }
                    }
                    return _arr;
                  }
                  function _arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                  }
                  function configuration_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function configuration_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function configuration_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) configuration_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) configuration_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var configuration_Configuration = function() {
                    function Configuration(options) {
                      configuration_classCallCheck(this, Configuration);
                      this.configuration = options == null ? {} : cloneDeep_root_cloneDeep_default()(options);
                      defaults(this.configuration, DEFAULT_CONFIGURATION_PARAMS);
                    }
                    configuration_createClass(Configuration, [
                      {
                        key: "init",
                        value: function init() {
                          this.fromEnvironment();
                          this.fromDocument();
                          return this;
                        }
                        /**
                         * Set a new configuration item
                         * @function Configuration#set
                         * @param {string} name - the name of the item to set
                         * @param {*} value - the value to be set
                         * @return {Configuration}
                         *
                         */
                      },
                      {
                        key: "set",
                        value: function set2(name, value) {
                          this.configuration[name] = value;
                          return this;
                        }
                        /**
                         * Get the value of a configuration item
                         * @function Configuration#get
                         * @param {string} name - the name of the item to set
                         * @return {*} the configuration item
                         */
                      },
                      {
                        key: "get",
                        value: function get2(name) {
                          return this.configuration[name];
                        }
                      },
                      {
                        key: "merge",
                        value: function merge(config) {
                          assign_root_assign_default()(this.configuration, cloneDeep_root_cloneDeep_default()(config));
                          return this;
                        }
                        /**
                         * Initialize Cloudinary from HTML meta tags.
                         * @function Configuration#fromDocument
                         * @return {Configuration}
                         * @example <meta name="cloudinary_cloud_name" content="mycloud">
                         *
                         */
                      },
                      {
                        key: "fromDocument",
                        value: function fromDocument() {
                          var el, i, len, meta_elements;
                          meta_elements = typeof document !== "undefined" && document !== null ? document.querySelectorAll('meta[name^="cloudinary_"]') : void 0;
                          if (meta_elements) {
                            for (i = 0, len = meta_elements.length; i < len; i++) {
                              el = meta_elements[i];
                              this.configuration[el.getAttribute("name").replace("cloudinary_", "")] = el.getAttribute("content");
                            }
                          }
                          return this;
                        }
                        /**
                         * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.
                         *
                         * This function will only run under Node.js environment.
                         * @function Configuration#fromEnvironment
                         * @requires Node.js
                         */
                      },
                      {
                        key: "fromEnvironment",
                        value: function fromEnvironment() {
                          var _this = this;
                          var cloudinary_url, query, uri, uriRegex;
                          if (typeof process !== "undefined" && process !== null && process.env && process.env.CLOUDINARY_URL) {
                            cloudinary_url = process.env.CLOUDINARY_URL;
                            uriRegex = /cloudinary:\/\/(?:(\w+)(?:\:([\w-]+))?@)?([\w\.-]+)(?:\/([^?]*))?(?:\?(.+))?/;
                            uri = uriRegex.exec(cloudinary_url);
                            if (uri) {
                              if (uri[3] != null) {
                                this.configuration["cloud_name"] = uri[3];
                              }
                              if (uri[1] != null) {
                                this.configuration["api_key"] = uri[1];
                              }
                              if (uri[2] != null) {
                                this.configuration["api_secret"] = uri[2];
                              }
                              if (uri[4] != null) {
                                this.configuration["private_cdn"] = uri[4] != null;
                              }
                              if (uri[4] != null) {
                                this.configuration["secure_distribution"] = uri[4];
                              }
                              query = uri[5];
                              if (query != null) {
                                query.split("&").forEach(function(value) {
                                  var _value$split = value.split("="), _value$split2 = _slicedToArray(_value$split, 2), k = _value$split2[0], v = _value$split2[1];
                                  if (v == null) {
                                    v = true;
                                  }
                                  _this.configuration[k] = v;
                                });
                              }
                            }
                          }
                          return this;
                        }
                        /**
                         * Create or modify the Cloudinary client configuration
                         *
                         * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.
                         *
                         * This is a backward compatibility method. For new code, use get(), merge() etc.
                         * @function Configuration#config
                         * @param {hash|string|boolean} new_config
                         * @param {string} new_value
                         * @returns {*} configuration, or value
                         *
                         * @see {@link fromEnvironment} for initialization using environment variables
                         * @see {@link fromDocument} for initialization using HTML meta tags
                         */
                      },
                      {
                        key: "config",
                        value: function config(new_config, new_value) {
                          switch (false) {
                            case new_value === void 0:
                              this.set(new_config, new_value);
                              return this.configuration;
                            case !isString_root_isString_default()(new_config):
                              return this.get(new_config);
                            case !isPlainObject_root_isPlainObject_default()(new_config):
                              this.merge(new_config);
                              return this.configuration;
                            default:
                              return this.configuration;
                          }
                        }
                        /**
                         * Returns a copy of the configuration parameters
                         * @function Configuration#toOptions
                         * @returns {Object} a key:value collection of the configuration parameters
                         */
                      },
                      {
                        key: "toOptions",
                        value: function toOptions() {
                          return cloneDeep_root_cloneDeep_default()(this.configuration);
                        }
                      }
                    ]);
                    return Configuration;
                  }();
                  var DEFAULT_CONFIGURATION_PARAMS = {
                    responsive_class: "cld-responsive",
                    responsive_use_breakpoints: true,
                    round_dpr: true,
                    secure: (typeof window !== "undefined" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === "https:"
                  };
                  configuration_Configuration.CONFIG_PARAMS = ["api_key", "api_secret", "callback", "cdn_subdomain", "cloud_name", "cname", "private_cdn", "protocol", "resource_type", "responsive", "responsive_class", "responsive_use_breakpoints", "responsive_width", "round_dpr", "secure", "secure_cdn_subdomain", "secure_distribution", "shorten", "type", "upload_preset", "url_suffix", "use_root_path", "version", "externalLibraries", "max_timeout_ms"];
                  var src_configuration = configuration_Configuration;
                  function layer_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function layer_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function layer_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) layer_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) layer_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var layer_Layer = function() {
                    function Layer2(options) {
                      var _this = this;
                      layer_classCallCheck(this, Layer2);
                      this.options = {};
                      if (options != null) {
                        ["resourceType", "type", "publicId", "format"].forEach(function(key) {
                          var ref;
                          return _this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];
                        });
                      }
                    }
                    layer_createClass(Layer2, [
                      {
                        key: "resourceType",
                        value: function resourceType(value) {
                          this.options.resourceType = value;
                          return this;
                        }
                      },
                      {
                        key: "type",
                        value: function type(value) {
                          this.options.type = value;
                          return this;
                        }
                      },
                      {
                        key: "publicId",
                        value: function publicId(value) {
                          this.options.publicId = value;
                          return this;
                        }
                        /**
                         * Get the public ID, formatted for layer parameter
                         * @function Layer#getPublicId
                         * @return {String} public ID
                         */
                      },
                      {
                        key: "getPublicId",
                        value: function getPublicId() {
                          var ref;
                          return (ref = this.options.publicId) != null ? ref.replace(/\//g, ":") : void 0;
                        }
                        /**
                         * Get the public ID, with format if present
                         * @function Layer#getFullPublicId
                         * @return {String} public ID
                         */
                      },
                      {
                        key: "getFullPublicId",
                        value: function getFullPublicId() {
                          if (this.options.format != null) {
                            return this.getPublicId() + "." + this.options.format;
                          } else {
                            return this.getPublicId();
                          }
                        }
                      },
                      {
                        key: "format",
                        value: function format2(value) {
                          this.options.format = value;
                          return this;
                        }
                        /**
                         * generate the string representation of the layer
                         * @function Layer#toString
                         */
                      },
                      {
                        key: "toString",
                        value: function toString() {
                          var components;
                          components = [];
                          if (this.options.publicId == null) {
                            throw "Must supply publicId";
                          }
                          if (!(this.options.resourceType === "image")) {
                            components.push(this.options.resourceType);
                          }
                          if (!(this.options.type === "upload")) {
                            components.push(this.options.type);
                          }
                          components.push(this.getFullPublicId());
                          return compact_root_compact_default()(components).join(":");
                        }
                      },
                      {
                        key: "clone",
                        value: function clone() {
                          return new this.constructor(this.options);
                        }
                      }
                    ]);
                    return Layer2;
                  }();
                  var layer_layer = layer_Layer;
                  function textlayer_typeof(obj) {
                    "@babel/helpers - typeof";
                    return textlayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, textlayer_typeof(obj);
                  }
                  function textlayer_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function textlayer_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function textlayer_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) textlayer_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) textlayer_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function textlayer_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) textlayer_setPrototypeOf(subClass, superClass);
                  }
                  function textlayer_setPrototypeOf(o, p) {
                    textlayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return textlayer_setPrototypeOf(o, p);
                  }
                  function textlayer_createSuper(Derived) {
                    var hasNativeReflectConstruct = textlayer_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = textlayer_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = textlayer_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return textlayer_possibleConstructorReturn(this, result);
                    };
                  }
                  function textlayer_possibleConstructorReturn(self2, call) {
                    if (call && (textlayer_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return textlayer_assertThisInitialized(self2);
                  }
                  function textlayer_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function textlayer_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function textlayer_getPrototypeOf(o) {
                    textlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return textlayer_getPrototypeOf(o);
                  }
                  var textlayer_TextLayer = function(_Layer) {
                    textlayer_inherits(TextLayer, _Layer);
                    var _super = textlayer_createSuper(TextLayer);
                    function TextLayer(options) {
                      var _this;
                      textlayer_classCallCheck(this, TextLayer);
                      var keys;
                      _this = _super.call(this, options);
                      keys = ["resourceType", "resourceType", "fontFamily", "fontSize", "fontWeight", "fontStyle", "textDecoration", "textAlign", "stroke", "letterSpacing", "lineSpacing", "fontHinting", "fontAntialiasing", "text", "textStyle"];
                      if (options != null) {
                        keys.forEach(function(key) {
                          var ref;
                          return _this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];
                        });
                      }
                      _this.options.resourceType = "text";
                      return _this;
                    }
                    textlayer_createClass(TextLayer, [
                      {
                        key: "resourceType",
                        value: function resourceType(_resourceType) {
                          throw "Cannot modify resourceType for text layers";
                        }
                      },
                      {
                        key: "type",
                        value: function type(_type) {
                          throw "Cannot modify type for text layers";
                        }
                      },
                      {
                        key: "format",
                        value: function format2(_format) {
                          throw "Cannot modify format for text layers";
                        }
                      },
                      {
                        key: "fontFamily",
                        value: function fontFamily(_fontFamily) {
                          this.options.fontFamily = _fontFamily;
                          return this;
                        }
                      },
                      {
                        key: "fontSize",
                        value: function fontSize(_fontSize) {
                          this.options.fontSize = _fontSize;
                          return this;
                        }
                      },
                      {
                        key: "fontWeight",
                        value: function fontWeight(_fontWeight) {
                          this.options.fontWeight = _fontWeight;
                          return this;
                        }
                      },
                      {
                        key: "fontStyle",
                        value: function fontStyle(_fontStyle) {
                          this.options.fontStyle = _fontStyle;
                          return this;
                        }
                      },
                      {
                        key: "textDecoration",
                        value: function textDecoration(_textDecoration) {
                          this.options.textDecoration = _textDecoration;
                          return this;
                        }
                      },
                      {
                        key: "textAlign",
                        value: function textAlign(_textAlign) {
                          this.options.textAlign = _textAlign;
                          return this;
                        }
                      },
                      {
                        key: "stroke",
                        value: function stroke(_stroke) {
                          this.options.stroke = _stroke;
                          return this;
                        }
                      },
                      {
                        key: "letterSpacing",
                        value: function letterSpacing(_letterSpacing) {
                          this.options.letterSpacing = _letterSpacing;
                          return this;
                        }
                      },
                      {
                        key: "lineSpacing",
                        value: function lineSpacing(_lineSpacing) {
                          this.options.lineSpacing = _lineSpacing;
                          return this;
                        }
                      },
                      {
                        key: "fontHinting",
                        value: function fontHinting(_fontHinting) {
                          this.options.fontHinting = _fontHinting;
                          return this;
                        }
                      },
                      {
                        key: "fontAntialiasing",
                        value: function fontAntialiasing(_fontAntialiasing) {
                          this.options.fontAntialiasing = _fontAntialiasing;
                          return this;
                        }
                      },
                      {
                        key: "text",
                        value: function text(_text) {
                          this.options.text = _text;
                          return this;
                        }
                      },
                      {
                        key: "textStyle",
                        value: function textStyle(_textStyle) {
                          this.options.textStyle = _textStyle;
                          return this;
                        }
                        /**
                         * generate the string representation of the layer
                         * @function TextLayer#toString
                         * @return {String}
                         */
                      },
                      {
                        key: "toString",
                        value: function toString() {
                          var components, hasPublicId, hasStyle, publicId, re, res, start, style, text, textSource;
                          style = this.textStyleIdentifier();
                          if (this.options.publicId != null) {
                            publicId = this.getFullPublicId();
                          }
                          if (this.options.text != null) {
                            hasPublicId = !isEmpty2(publicId);
                            hasStyle = !isEmpty2(style);
                            if (hasPublicId && hasStyle || !hasPublicId && !hasStyle) {
                              throw "Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay, but not both!";
                            }
                            re = /\$\([a-zA-Z]\w*\)/g;
                            start = 0;
                            textSource = smartEscape(this.options.text, /[,\/]/g);
                            text = "";
                            while (res = re.exec(textSource)) {
                              text += smartEscape(textSource.slice(start, res.index));
                              text += res[0];
                              start = res.index + res[0].length;
                            }
                            text += smartEscape(textSource.slice(start));
                          }
                          components = [this.options.resourceType, style, publicId, text];
                          return compact_root_compact_default()(components).join(":");
                        }
                      },
                      {
                        key: "textStyleIdentifier",
                        value: function textStyleIdentifier() {
                          if (!isEmpty2(this.options.textStyle)) {
                            return this.options.textStyle;
                          }
                          var components;
                          components = [];
                          if (this.options.fontWeight !== "normal") {
                            components.push(this.options.fontWeight);
                          }
                          if (this.options.fontStyle !== "normal") {
                            components.push(this.options.fontStyle);
                          }
                          if (this.options.textDecoration !== "none") {
                            components.push(this.options.textDecoration);
                          }
                          components.push(this.options.textAlign);
                          if (this.options.stroke !== "none") {
                            components.push(this.options.stroke);
                          }
                          if (!(isEmpty2(this.options.letterSpacing) && !isNumberLike(this.options.letterSpacing))) {
                            components.push("letter_spacing_" + this.options.letterSpacing);
                          }
                          if (!(isEmpty2(this.options.lineSpacing) && !isNumberLike(this.options.lineSpacing))) {
                            components.push("line_spacing_" + this.options.lineSpacing);
                          }
                          if (!isEmpty2(this.options.fontAntialiasing)) {
                            components.push("antialias_" + this.options.fontAntialiasing);
                          }
                          if (!isEmpty2(this.options.fontHinting)) {
                            components.push("hinting_" + this.options.fontHinting);
                          }
                          if (!isEmpty2(compact_root_compact_default()(components))) {
                            if (isEmpty2(this.options.fontFamily)) {
                              throw "Must supply fontFamily. ".concat(components);
                            }
                            if (isEmpty2(this.options.fontSize) && !isNumberLike(this.options.fontSize)) {
                              throw "Must supply fontSize.";
                            }
                          }
                          components.unshift(this.options.fontFamily, this.options.fontSize);
                          components = compact_root_compact_default()(components).join("_");
                          return components;
                        }
                      }
                    ]);
                    return TextLayer;
                  }(layer_layer);
                  var textlayer = textlayer_TextLayer;
                  function subtitleslayer_typeof(obj) {
                    "@babel/helpers - typeof";
                    return subtitleslayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, subtitleslayer_typeof(obj);
                  }
                  function subtitleslayer_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function subtitleslayer_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) subtitleslayer_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) subtitleslayer_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function subtitleslayer_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function subtitleslayer_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) subtitleslayer_setPrototypeOf(subClass, superClass);
                  }
                  function subtitleslayer_setPrototypeOf(o, p) {
                    subtitleslayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return subtitleslayer_setPrototypeOf(o, p);
                  }
                  function subtitleslayer_createSuper(Derived) {
                    var hasNativeReflectConstruct = subtitleslayer_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = subtitleslayer_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = subtitleslayer_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return subtitleslayer_possibleConstructorReturn(this, result);
                    };
                  }
                  function subtitleslayer_possibleConstructorReturn(self2, call) {
                    if (call && (subtitleslayer_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return subtitleslayer_assertThisInitialized(self2);
                  }
                  function subtitleslayer_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function subtitleslayer_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function subtitleslayer_getPrototypeOf(o) {
                    subtitleslayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return subtitleslayer_getPrototypeOf(o);
                  }
                  var SubtitlesLayer = function(_TextLayer) {
                    subtitleslayer_inherits(SubtitlesLayer2, _TextLayer);
                    var _super = subtitleslayer_createSuper(SubtitlesLayer2);
                    function SubtitlesLayer2(options) {
                      var _this;
                      subtitleslayer_classCallCheck(this, SubtitlesLayer2);
                      _this = _super.call(this, options);
                      _this.options.resourceType = "subtitles";
                      return _this;
                    }
                    return subtitleslayer_createClass(SubtitlesLayer2);
                  }(textlayer);
                  var subtitleslayer = SubtitlesLayer;
                  function fetchlayer_typeof(obj) {
                    "@babel/helpers - typeof";
                    return fetchlayer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, fetchlayer_typeof(obj);
                  }
                  function fetchlayer_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function fetchlayer_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function fetchlayer_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) fetchlayer_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) fetchlayer_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function fetchlayer_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) fetchlayer_setPrototypeOf(subClass, superClass);
                  }
                  function fetchlayer_setPrototypeOf(o, p) {
                    fetchlayer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return fetchlayer_setPrototypeOf(o, p);
                  }
                  function fetchlayer_createSuper(Derived) {
                    var hasNativeReflectConstruct = fetchlayer_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = fetchlayer_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = fetchlayer_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return fetchlayer_possibleConstructorReturn(this, result);
                    };
                  }
                  function fetchlayer_possibleConstructorReturn(self2, call) {
                    if (call && (fetchlayer_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return fetchlayer_assertThisInitialized(self2);
                  }
                  function fetchlayer_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function fetchlayer_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function fetchlayer_getPrototypeOf(o) {
                    fetchlayer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return fetchlayer_getPrototypeOf(o);
                  }
                  var fetchlayer_FetchLayer = function(_Layer) {
                    fetchlayer_inherits(FetchLayer, _Layer);
                    var _super = fetchlayer_createSuper(FetchLayer);
                    function FetchLayer(options) {
                      var _this;
                      fetchlayer_classCallCheck(this, FetchLayer);
                      _this = _super.call(this, options);
                      if (isString_root_isString_default()(options)) {
                        _this.options.url = options;
                      } else if (options != null ? options.url : void 0) {
                        _this.options.url = options.url;
                      }
                      return _this;
                    }
                    fetchlayer_createClass(FetchLayer, [
                      {
                        key: "url",
                        value: function url(_url) {
                          this.options.url = _url;
                          return this;
                        }
                        /**
                         * generate the string representation of the layer
                         * @function FetchLayer#toString
                         * @return {String}
                         */
                      },
                      {
                        key: "toString",
                        value: function toString() {
                          return "fetch:".concat(base64EncodeURL(this.options.url));
                        }
                      }
                    ]);
                    return FetchLayer;
                  }(layer_layer);
                  var fetchlayer = fetchlayer_FetchLayer;
                  function parameters_typeof(obj) {
                    "@babel/helpers - typeof";
                    return parameters_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, parameters_typeof(obj);
                  }
                  function _get() {
                    if (typeof Reflect !== "undefined" && Reflect.get) {
                      _get = Reflect.get.bind();
                    } else {
                      _get = function _get2(target, property, receiver) {
                        var base = _superPropBase(target, property);
                        if (!base) return;
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                          return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                      };
                    }
                    return _get.apply(this, arguments);
                  }
                  function _superPropBase(object, property) {
                    while (!Object.prototype.hasOwnProperty.call(object, property)) {
                      object = parameters_getPrototypeOf(object);
                      if (object === null) break;
                    }
                    return object;
                  }
                  function parameters_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) parameters_setPrototypeOf(subClass, superClass);
                  }
                  function parameters_setPrototypeOf(o, p) {
                    parameters_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return parameters_setPrototypeOf(o, p);
                  }
                  function parameters_createSuper(Derived) {
                    var hasNativeReflectConstruct = parameters_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = parameters_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = parameters_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return parameters_possibleConstructorReturn(this, result);
                    };
                  }
                  function parameters_possibleConstructorReturn(self2, call) {
                    if (call && (parameters_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return parameters_assertThisInitialized(self2);
                  }
                  function parameters_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function parameters_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function parameters_getPrototypeOf(o) {
                    parameters_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return parameters_getPrototypeOf(o);
                  }
                  function parameters_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function parameters_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function parameters_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) parameters_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) parameters_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var parameters_Param = function() {
                    function Param(name, shortName) {
                      var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : identity_root_identity_default.a;
                      parameters_classCallCheck(this, Param);
                      this.name = name;
                      this.shortName = shortName;
                      this.process = process2;
                    }
                    parameters_createClass(
                      Param,
                      [
                        {
                          key: "set",
                          value: function set2(origValue) {
                            this.origValue = origValue;
                            return this;
                          }
                          /**
                           * Generate the serialized form of the parameter
                           * @function Param#serialize
                           * @return {string} the serialized form of the parameter
                           */
                        },
                        {
                          key: "serialize",
                          value: function serialize() {
                            var val, valid;
                            val = this.value();
                            valid = isArray_root_isArray_default()(val) || isPlainObject_root_isPlainObject_default()(val) || isString_root_isString_default()(val) ? !isEmpty2(val) : val != null;
                            if (this.shortName != null && valid) {
                              return "".concat(this.shortName, "_").concat(val);
                            } else {
                              return "";
                            }
                          }
                          /**
                           * Return the processed value of the parameter
                           * @function Param#value
                           */
                        },
                        {
                          key: "value",
                          value: function value() {
                            return this.process(this.origValue);
                          }
                        }
                      ],
                      [
                        {
                          key: "norm_color",
                          value: function norm_color(value) {
                            return value != null ? value.replace(/^#/, "rgb:") : void 0;
                          }
                        },
                        {
                          key: "build_array",
                          value: function build_array(arg) {
                            if (arg == null) {
                              return [];
                            } else if (isArray_root_isArray_default()(arg)) {
                              return arg;
                            } else {
                              return [arg];
                            }
                          }
                          /**
                          * Covert value to video codec string.
                          *
                          * If the parameter is an object,
                          * @param {(string|Object)} param - the video codec as either a String or a Hash
                          * @return {string} the video codec string in the format codec:profile:level:b_frames
                          * @example
                          * vc_[ :profile : [level : [b_frames]]]
                          * or
                            { codec: 'h264', profile: 'basic', level: '3.1', b_frames: false }
                          * @ignore
                           */
                        },
                        {
                          key: "process_video_params",
                          value: function process_video_params(param) {
                            var video;
                            switch (param.constructor) {
                              case Object:
                                video = "";
                                if ("codec" in param) {
                                  video = param.codec;
                                  if ("profile" in param) {
                                    video += ":" + param.profile;
                                    if ("level" in param) {
                                      video += ":" + param.level;
                                      if ("b_frames" in param && param.b_frames === false) {
                                        video += ":bframes_no";
                                      }
                                    }
                                  }
                                }
                                return video;
                              case String:
                                return param;
                              default:
                                return null;
                            }
                          }
                        }
                      ]
                    );
                    return Param;
                  }();
                  var parameters_ArrayParam = function(_Param) {
                    parameters_inherits(ArrayParam, _Param);
                    var _super = parameters_createSuper(ArrayParam);
                    function ArrayParam(name, shortName) {
                      var _this;
                      var sep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
                      var process2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
                      parameters_classCallCheck(this, ArrayParam);
                      _this = _super.call(this, name, shortName, process2);
                      _this.sep = sep;
                      return _this;
                    }
                    parameters_createClass(ArrayParam, [
                      {
                        key: "serialize",
                        value: function serialize() {
                          if (this.shortName != null) {
                            var arrayValue = this.value();
                            if (isEmpty2(arrayValue)) {
                              return "";
                            } else if (isString_root_isString_default()(arrayValue)) {
                              return "".concat(this.shortName, "_").concat(arrayValue);
                            } else {
                              var flat = arrayValue.map(function(t) {
                                return isFunction_root_isFunction_default()(t.serialize) ? t.serialize() : t;
                              }).join(this.sep);
                              return "".concat(this.shortName, "_").concat(flat);
                            }
                          } else {
                            return "";
                          }
                        }
                      },
                      {
                        key: "value",
                        value: function value() {
                          var _this2 = this;
                          if (isArray_root_isArray_default()(this.origValue)) {
                            return this.origValue.map(function(v) {
                              return _this2.process(v);
                            });
                          } else {
                            return this.process(this.origValue);
                          }
                        }
                      },
                      {
                        key: "set",
                        value: function set2(origValue) {
                          if (origValue == null || isArray_root_isArray_default()(origValue)) {
                            return _get(parameters_getPrototypeOf(ArrayParam.prototype), "set", this).call(this, origValue);
                          } else {
                            return _get(parameters_getPrototypeOf(ArrayParam.prototype), "set", this).call(this, [origValue]);
                          }
                        }
                      }
                    ]);
                    return ArrayParam;
                  }(parameters_Param);
                  var parameters_TransformationParam = function(_Param2) {
                    parameters_inherits(TransformationParam, _Param2);
                    var _super2 = parameters_createSuper(TransformationParam);
                    function TransformationParam(name) {
                      var _this3;
                      var shortName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "t";
                      var sep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
                      var process2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
                      parameters_classCallCheck(this, TransformationParam);
                      _this3 = _super2.call(this, name, shortName, process2);
                      _this3.sep = sep;
                      return _this3;
                    }
                    parameters_createClass(TransformationParam, [
                      {
                        key: "serialize",
                        value: function serialize() {
                          var _this4 = this;
                          var result = "";
                          var val = this.value();
                          if (isEmpty2(val)) {
                            return result;
                          }
                          if (baseutil_allStrings(val)) {
                            var joined = val.join(this.sep);
                            if (!isEmpty2(joined)) {
                              result = "".concat(this.shortName, "_").concat(joined);
                            }
                          } else {
                            result = val.map(function(t) {
                              if (isString_root_isString_default()(t) && !isEmpty2(t)) {
                                return "".concat(_this4.shortName, "_").concat(t);
                              }
                              if (isFunction_root_isFunction_default()(t.serialize)) {
                                return t.serialize();
                              }
                              if (isPlainObject_root_isPlainObject_default()(t) && !isEmpty2(t)) {
                                return new src_transformation(t).serialize();
                              }
                              return void 0;
                            }).filter(function(t) {
                              return t;
                            });
                          }
                          return result;
                        }
                      },
                      {
                        key: "set",
                        value: function set2(origValue1) {
                          this.origValue = origValue1;
                          if (isArray_root_isArray_default()(this.origValue)) {
                            return _get(parameters_getPrototypeOf(TransformationParam.prototype), "set", this).call(this, this.origValue);
                          } else {
                            return _get(parameters_getPrototypeOf(TransformationParam.prototype), "set", this).call(this, [this.origValue]);
                          }
                        }
                      }
                    ]);
                    return TransformationParam;
                  }(parameters_Param);
                  var number_pattern = "([0-9]*)\\.([0-9]+)|([0-9]+)";
                  var offset_any_pattern = "(" + number_pattern + ")([%pP])?";
                  var parameters_RangeParam = function(_Param3) {
                    parameters_inherits(RangeParam, _Param3);
                    var _super3 = parameters_createSuper(RangeParam);
                    function RangeParam(name, shortName) {
                      var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : RangeParam.norm_range_value;
                      parameters_classCallCheck(this, RangeParam);
                      return _super3.call(this, name, shortName, process2);
                    }
                    parameters_createClass(RangeParam, null, [{
                      key: "norm_range_value",
                      value: function norm_range_value(value) {
                        var offset = String(value).match(new RegExp("^" + offset_any_pattern + "$"));
                        if (offset) {
                          var modifier = offset[5] != null ? "p" : "";
                          value = (offset[1] || offset[4]) + modifier;
                        }
                        return expression.normalize(value);
                      }
                    }]);
                    return RangeParam;
                  }(parameters_Param);
                  var parameters_RawParam = function(_Param4) {
                    parameters_inherits(RawParam, _Param4);
                    var _super4 = parameters_createSuper(RawParam);
                    function RawParam(name, shortName) {
                      var process2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : identity_root_identity_default.a;
                      parameters_classCallCheck(this, RawParam);
                      return _super4.call(this, name, shortName, process2);
                    }
                    parameters_createClass(RawParam, [{
                      key: "serialize",
                      value: function serialize() {
                        return this.value();
                      }
                    }]);
                    return RawParam;
                  }(parameters_Param);
                  var parameters_LayerParam = function(_Param5) {
                    parameters_inherits(LayerParam, _Param5);
                    var _super5 = parameters_createSuper(LayerParam);
                    function LayerParam() {
                      parameters_classCallCheck(this, LayerParam);
                      return _super5.apply(this, arguments);
                    }
                    parameters_createClass(
                      LayerParam,
                      [{
                        key: "value",
                        value: (
                          // Parse layer options
                          // @return [string] layer transformation string
                          // @private
                          function value() {
                            if (this.origValue == null) {
                              return "";
                            }
                            var result;
                            if (this.origValue instanceof layer_layer) {
                              result = this.origValue;
                            } else if (isPlainObject_root_isPlainObject_default()(this.origValue)) {
                              var layerOptions = withCamelCaseKeys(this.origValue);
                              if (layerOptions.resourceType === "text" || layerOptions.text != null) {
                                result = new textlayer(layerOptions);
                              } else if (layerOptions.resourceType === "subtitles") {
                                result = new subtitleslayer(layerOptions);
                              } else if (layerOptions.resourceType === "fetch" || layerOptions.url != null) {
                                result = new fetchlayer(layerOptions);
                              } else {
                                result = new layer_layer(layerOptions);
                              }
                            } else if (isString_root_isString_default()(this.origValue)) {
                              if (/^fetch:.+/.test(this.origValue)) {
                                result = new fetchlayer(this.origValue.substr(6));
                              } else {
                                result = this.origValue;
                              }
                            } else {
                              result = "";
                            }
                            return result.toString();
                          }
                        )
                      }],
                      [{
                        key: "textStyle",
                        value: function textStyle(layer) {
                          return new textlayer(layer).textStyleIdentifier();
                        }
                      }]
                    );
                    return LayerParam;
                  }(parameters_Param);
                  function transformation_typeof(obj) {
                    "@babel/helpers - typeof";
                    return transformation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, transformation_typeof(obj);
                  }
                  function transformation_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) transformation_setPrototypeOf(subClass, superClass);
                  }
                  function transformation_setPrototypeOf(o, p) {
                    transformation_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return transformation_setPrototypeOf(o, p);
                  }
                  function transformation_createSuper(Derived) {
                    var hasNativeReflectConstruct = transformation_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = transformation_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = transformation_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return transformation_possibleConstructorReturn(this, result);
                    };
                  }
                  function transformation_possibleConstructorReturn(self2, call) {
                    if (call && (transformation_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return transformation_assertThisInitialized(self2);
                  }
                  function transformation_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function transformation_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function transformation_getPrototypeOf(o) {
                    transformation_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return transformation_getPrototypeOf(o);
                  }
                  function transformation_slicedToArray(arr, i) {
                    return transformation_arrayWithHoles(arr) || transformation_iterableToArrayLimit(arr, i) || transformation_unsupportedIterableToArray(arr, i) || transformation_nonIterableRest();
                  }
                  function transformation_nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  function transformation_unsupportedIterableToArray(o, minLen) {
                    if (!o) return;
                    if (typeof o === "string") return transformation_arrayLikeToArray(o, minLen);
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) n = o.constructor.name;
                    if (n === "Map" || n === "Set") return Array.from(o);
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return transformation_arrayLikeToArray(o, minLen);
                  }
                  function transformation_arrayLikeToArray(arr, len) {
                    if (len == null || len > arr.length) len = arr.length;
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                      arr2[i] = arr[i];
                    }
                    return arr2;
                  }
                  function transformation_iterableToArrayLimit(arr, i) {
                    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                    if (_i == null) return;
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _s, _e;
                    try {
                      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break;
                      }
                    } catch (err) {
                      _d = true;
                      _e = err;
                    } finally {
                      try {
                        if (!_n && _i["return"] != null) _i["return"]();
                      } finally {
                        if (_d) throw _e;
                      }
                    }
                    return _arr;
                  }
                  function transformation_arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                  }
                  function transformation_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function transformation_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function transformation_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) transformation_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) transformation_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function assignNotNull(target) {
                    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                      sources[_key - 1] = arguments[_key];
                    }
                    sources.forEach(function(source) {
                      Object.keys(source).forEach(function(key) {
                        if (source[key] != null) {
                          target[key] = source[key];
                        }
                      });
                    });
                    return target;
                  }
                  var transformation_TransformationBase = function() {
                    function TransformationBase(options) {
                      transformation_classCallCheck(this, TransformationBase);
                      var parent, trans;
                      parent = void 0;
                      trans = {};
                      this.toOptions = function(withChain) {
                        var opt = {};
                        if (withChain == null) {
                          withChain = true;
                        }
                        Object.keys(trans).forEach(function(key) {
                          return opt[key] = trans[key].origValue;
                        });
                        assignNotNull(opt, this.otherOptions);
                        if (withChain && !isEmpty2(this.chained)) {
                          var list = this.chained.map(function(tr) {
                            return tr.toOptions();
                          });
                          list.push(opt);
                          opt = {};
                          assignNotNull(opt, this.otherOptions);
                          opt.transformation = list;
                        }
                        return opt;
                      };
                      this.setParent = function(object) {
                        parent = object;
                        if (object != null) {
                          this.fromOptions(typeof object.toOptions === "function" ? object.toOptions() : void 0);
                        }
                        return this;
                      };
                      this.getParent = function() {
                        return parent;
                      };
                      this.param = function(value, name, abbr, defaultValue, process2) {
                        if (process2 == null) {
                          if (isFunction_root_isFunction_default()(defaultValue)) {
                            process2 = defaultValue;
                          } else {
                            process2 = identity_root_identity_default.a;
                          }
                        }
                        trans[name] = new parameters_Param(name, abbr, process2).set(value);
                        return this;
                      };
                      this.rawParam = function(value, name, abbr, defaultValue, process2) {
                        process2 = lastArgCallback(arguments);
                        trans[name] = new parameters_RawParam(name, abbr, process2).set(value);
                        return this;
                      };
                      this.rangeParam = function(value, name, abbr, defaultValue, process2) {
                        process2 = lastArgCallback(arguments);
                        trans[name] = new parameters_RangeParam(name, abbr, process2).set(value);
                        return this;
                      };
                      this.arrayParam = function(value, name, abbr) {
                        var sep = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ":";
                        var process2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : void 0;
                        process2 = lastArgCallback(arguments);
                        trans[name] = new parameters_ArrayParam(name, abbr, sep, process2).set(value);
                        return this;
                      };
                      this.transformationParam = function(value, name, abbr) {
                        var sep = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
                        var process2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : void 0;
                        process2 = lastArgCallback(arguments);
                        trans[name] = new parameters_TransformationParam(name, abbr, sep, process2).set(value);
                        return this;
                      };
                      this.layerParam = function(value, name, abbr) {
                        trans[name] = new parameters_LayerParam(name, abbr).set(value);
                        return this;
                      };
                      this.getValue = function(name) {
                        var value = trans[name] && trans[name].value();
                        return value != null ? value : this.otherOptions[name];
                      };
                      this.get = function(name) {
                        return trans[name];
                      };
                      this.remove = function(name) {
                        var temp;
                        switch (false) {
                          case trans[name] == null:
                            temp = trans[name];
                            delete trans[name];
                            return temp.origValue;
                          case this.otherOptions[name] == null:
                            temp = this.otherOptions[name];
                            delete this.otherOptions[name];
                            return temp;
                          default:
                            return null;
                        }
                      };
                      this.keys = function() {
                        var key;
                        return function() {
                          var results;
                          results = [];
                          for (key in trans) {
                            if (key != null) {
                              results.push(key.match(VAR_NAME_RE) ? key : snakeCase(key));
                            }
                          }
                          return results;
                        }().sort();
                      };
                      this.toPlainObject = function() {
                        var hash, key, list;
                        hash = {};
                        for (key in trans) {
                          hash[key] = trans[key].value();
                          if (isPlainObject_root_isPlainObject_default()(hash[key])) {
                            hash[key] = cloneDeep_root_cloneDeep_default()(hash[key]);
                          }
                        }
                        if (!isEmpty2(this.chained)) {
                          list = this.chained.map(function(tr) {
                            return tr.toPlainObject();
                          });
                          list.push(hash);
                          hash = {
                            transformation: list
                          };
                        }
                        return hash;
                      };
                      this.chain = function() {
                        var names, tr;
                        names = Object.getOwnPropertyNames(trans);
                        if (names.length !== 0) {
                          tr = new this.constructor(this.toOptions(false));
                          this.resetTransformations();
                          this.chained.push(tr);
                        }
                        return this;
                      };
                      this.resetTransformations = function() {
                        trans = {};
                        return this;
                      };
                      this.otherOptions = {};
                      this.chained = [];
                      this.fromOptions(options);
                    }
                    transformation_createClass(
                      TransformationBase,
                      [
                        {
                          key: "fromOptions",
                          value: function fromOptions() {
                            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                            if (options instanceof TransformationBase) {
                              this.fromTransformation(options);
                            } else {
                              if (isString_root_isString_default()(options) || isArray_root_isArray_default()(options)) {
                                options = {
                                  transformation: options
                                };
                              }
                              options = cloneDeep_root_cloneDeep_default()(options, function(value) {
                                if (value instanceof TransformationBase || value instanceof Layer) {
                                  return new value.clone();
                                }
                              });
                              if (options["if"]) {
                                this.set("if", options["if"]);
                                delete options["if"];
                              }
                              for (var key in options) {
                                var opt = options[key];
                                if (opt != null) {
                                  if (key.match(VAR_NAME_RE)) {
                                    if (key !== "$attr") {
                                      this.set("variable", key, opt);
                                    }
                                  } else {
                                    this.set(key, opt);
                                  }
                                }
                              }
                            }
                            return this;
                          }
                        },
                        {
                          key: "fromTransformation",
                          value: function fromTransformation(other) {
                            var _this = this;
                            if (other instanceof TransformationBase) {
                              other.keys().forEach(function(key) {
                                return _this.set(key, other.get(key).origValue);
                              });
                            }
                            return this;
                          }
                          /**
                           * Set a parameter.
                           * The parameter name `key` is converted to
                           * @param {string} key - the name of the parameter
                           * @param {*} values - the value of the parameter
                           * @returns {Transformation} Returns this instance for chaining
                           */
                        },
                        {
                          key: "set",
                          value: function set2(key) {
                            var camelKey;
                            camelKey = camelCase(key);
                            for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                              values[_key2 - 1] = arguments[_key2];
                            }
                            if (includes_root_includes_default()(transformation_Transformation.methods, camelKey)) {
                              this[camelKey].apply(this, values);
                            } else {
                              this.otherOptions[key] = values[0];
                            }
                            return this;
                          }
                        },
                        {
                          key: "hasLayer",
                          value: function hasLayer() {
                            return this.getValue("overlay") || this.getValue("underlay");
                          }
                          /**
                           * Generate a string representation of the transformation.
                           * @function Transformation#serialize
                           * @return {string} Returns the transformation as a string
                           */
                        },
                        {
                          key: "serialize",
                          value: function serialize() {
                            var ifParam, j, len, paramList, ref, ref1, ref2, ref3, ref4, resultArray, t, transformationList, transformationString, transformations, value, variables, vars;
                            resultArray = this.chained.map(function(tr) {
                              return tr.serialize();
                            });
                            paramList = this.keys();
                            transformations = (ref = this.get("transformation")) != null ? ref.serialize() : void 0;
                            ifParam = (ref1 = this.get("if")) != null ? ref1.serialize() : void 0;
                            variables = processVar((ref2 = this.get("variables")) != null ? ref2.value() : void 0);
                            paramList = difference_root_difference_default()(paramList, ["transformation", "if", "variables"]);
                            vars = [];
                            transformationList = [];
                            for (j = 0, len = paramList.length; j < len; j++) {
                              t = paramList[j];
                              if (t.match(VAR_NAME_RE)) {
                                vars.push(t + "_" + expression.normalize((ref3 = this.get(t)) != null ? ref3.value() : void 0));
                              } else {
                                transformationList.push((ref4 = this.get(t)) != null ? ref4.serialize() : void 0);
                              }
                            }
                            switch (false) {
                              case !isString_root_isString_default()(transformations):
                                transformationList.push(transformations);
                                break;
                              case !isArray_root_isArray_default()(transformations):
                                resultArray = resultArray.concat(transformations);
                            }
                            transformationList = function() {
                              var k, len1, results;
                              results = [];
                              for (k = 0, len1 = transformationList.length; k < len1; k++) {
                                value = transformationList[k];
                                if (isArray_root_isArray_default()(value) && !isEmpty2(value) || !isArray_root_isArray_default()(value) && value) {
                                  results.push(value);
                                }
                              }
                              return results;
                            }();
                            transformationList = vars.sort().concat(variables).concat(transformationList.sort());
                            if (ifParam === "if_end") {
                              transformationList.push(ifParam);
                            } else if (!isEmpty2(ifParam)) {
                              transformationList.unshift(ifParam);
                            }
                            transformationString = compact_root_compact_default()(transformationList).join(this.param_separator);
                            if (!isEmpty2(transformationString)) {
                              resultArray.push(transformationString);
                            }
                            return compact_root_compact_default()(resultArray).join(this.trans_separator);
                          }
                          /**
                           * Provide a list of all the valid transformation option names
                           * @function Transformation#listNames
                           * @private
                           * @return {Array<string>} a array of all the valid option names
                           */
                        },
                        {
                          key: "toHtmlAttributes",
                          value: (
                            /**
                             * Returns the attributes for an HTML tag.
                             * @function Cloudinary.toHtmlAttributes
                             * @return PlainObject
                             */
                            function toHtmlAttributes() {
                              var _this2 = this;
                              var attrName, height, options, ref2, ref3, value, width;
                              options = {};
                              var snakeCaseKey;
                              Object.keys(this.otherOptions).forEach(function(key) {
                                value = _this2.otherOptions[key];
                                snakeCaseKey = snakeCase(key);
                                if (!includes_root_includes_default()(transformation_Transformation.PARAM_NAMES, snakeCaseKey) && !includes_root_includes_default()(URL_KEYS, snakeCaseKey)) {
                                  attrName = /^html_/.test(key) ? key.slice(5) : key;
                                  options[attrName] = value;
                                }
                              });
                              this.keys().forEach(function(key) {
                                if (/^html_/.test(key)) {
                                  options[camelCase(key.slice(5))] = _this2.getValue(key);
                                }
                              });
                              if (!(this.hasLayer() || this.getValue("angle") || includes_root_includes_default()(["fit", "limit", "lfill"], this.getValue("crop")))) {
                                width = (ref2 = this.get("width")) != null ? ref2.origValue : void 0;
                                height = (ref3 = this.get("height")) != null ? ref3.origValue : void 0;
                                if (parseFloat(width) >= 1) {
                                  if (options.width == null) {
                                    options.width = width;
                                  }
                                }
                                if (parseFloat(height) >= 1) {
                                  if (options.height == null) {
                                    options.height = height;
                                  }
                                }
                              }
                              return options;
                            }
                          )
                        },
                        {
                          key: "toHtml",
                          value: (
                            /**
                             * Delegate to the parent (up the call chain) to produce HTML
                             * @function Transformation#toHtml
                             * @return {string} HTML representation of the parent if possible.
                             * @example
                             * tag = cloudinary.ImageTag.new("sample", {cloud_name: "demo"})
                             * // ImageTag {name: "img", publicId: "sample"}
                             * tag.toHtml()
                             * // <img src="http://res.cloudinary.com/demo/image/upload/sample">
                             * tag.transformation().crop("fit").width(300).toHtml()
                             * // <img src="http://res.cloudinary.com/demo/image/upload/c_fit,w_300/sample">
                             */
                            function toHtml() {
                              var ref;
                              return (ref = this.getParent()) != null ? typeof ref.toHtml === "function" ? ref.toHtml() : void 0 : void 0;
                            }
                          )
                        },
                        {
                          key: "toString",
                          value: function toString() {
                            return this.serialize();
                          }
                        },
                        {
                          key: "clone",
                          value: function clone() {
                            return new this.constructor(this.toOptions(true));
                          }
                        }
                      ],
                      [
                        {
                          key: "listNames",
                          value: function listNames() {
                            return transformation_Transformation.methods;
                          }
                        },
                        {
                          key: "isValidParamName",
                          value: function isValidParamName(name) {
                            return transformation_Transformation.methods.indexOf(camelCase(name)) >= 0;
                          }
                        }
                      ]
                    );
                    return TransformationBase;
                  }();
                  var VAR_NAME_RE = /^\$[a-zA-Z0-9]+$/;
                  transformation_TransformationBase.prototype.trans_separator = "/";
                  transformation_TransformationBase.prototype.param_separator = ",";
                  function lastArgCallback(args) {
                    var callback;
                    callback = args != null ? args[args.length - 1] : void 0;
                    if (isFunction_root_isFunction_default()(callback)) {
                      return callback;
                    } else {
                      return void 0;
                    }
                  }
                  function processVar(varArray) {
                    var j, len, name, results, v;
                    if (isArray_root_isArray_default()(varArray)) {
                      results = [];
                      for (j = 0, len = varArray.length; j < len; j++) {
                        var _varArray$j = transformation_slicedToArray(varArray[j], 2);
                        name = _varArray$j[0];
                        v = _varArray$j[1];
                        results.push("".concat(name, "_").concat(expression.normalize(v)));
                      }
                      return results;
                    } else {
                      return varArray;
                    }
                  }
                  function processCustomFunction(_ref) {
                    var function_type = _ref.function_type, source = _ref.source;
                    if (function_type === "remote") {
                      return [function_type, btoa(source)].join(":");
                    } else if (function_type === "wasm") {
                      return [function_type, source].join(":");
                    }
                  }
                  var transformation_Transformation = function(_TransformationBase) {
                    transformation_inherits(Transformation, _TransformationBase);
                    var _super = transformation_createSuper(Transformation);
                    function Transformation(options) {
                      transformation_classCallCheck(this, Transformation);
                      return _super.call(this, options);
                    }
                    transformation_createClass(
                      Transformation,
                      [
                        {
                          key: "angle",
                          value: (
                            /*
                              Transformation Parameters
                            */
                            function angle(value) {
                              return this.arrayParam(value, "angle", "a", ".", expression.normalize);
                            }
                          )
                        },
                        {
                          key: "audioCodec",
                          value: function audioCodec(value) {
                            return this.param(value, "audio_codec", "ac");
                          }
                        },
                        {
                          key: "audioFrequency",
                          value: function audioFrequency(value) {
                            return this.param(value, "audio_frequency", "af");
                          }
                        },
                        {
                          key: "aspectRatio",
                          value: function aspectRatio(value) {
                            return this.param(value, "aspect_ratio", "ar", expression.normalize);
                          }
                        },
                        {
                          key: "background",
                          value: function background(value) {
                            return this.param(value, "background", "b", parameters_Param.norm_color);
                          }
                        },
                        {
                          key: "bitRate",
                          value: function bitRate(value) {
                            return this.param(value, "bit_rate", "br");
                          }
                        },
                        {
                          key: "border",
                          value: function border(value) {
                            return this.param(value, "border", "bo", function(border2) {
                              if (isPlainObject_root_isPlainObject_default()(border2)) {
                                border2 = assign_root_assign_default()(
                                  {},
                                  {
                                    color: "black",
                                    width: 2
                                  },
                                  border2
                                );
                                return "".concat(border2.width, "px_solid_").concat(parameters_Param.norm_color(border2.color));
                              } else {
                                return border2;
                              }
                            });
                          }
                        },
                        {
                          key: "color",
                          value: function color(value) {
                            return this.param(value, "color", "co", parameters_Param.norm_color);
                          }
                        },
                        {
                          key: "colorSpace",
                          value: function colorSpace(value) {
                            return this.param(value, "color_space", "cs");
                          }
                        },
                        {
                          key: "crop",
                          value: function crop(value) {
                            return this.param(value, "crop", "c");
                          }
                        },
                        {
                          key: "customFunction",
                          value: function customFunction(value) {
                            return this.param(value, "custom_function", "fn", function() {
                              return processCustomFunction(value);
                            });
                          }
                        },
                        {
                          key: "customPreFunction",
                          value: function customPreFunction(value) {
                            if (this.get("custom_function")) {
                              return;
                            }
                            return this.rawParam(value, "custom_function", "", function() {
                              value = processCustomFunction(value);
                              return value ? "fn_pre:".concat(value) : value;
                            });
                          }
                        },
                        {
                          key: "defaultImage",
                          value: function defaultImage(value) {
                            return this.param(value, "default_image", "d");
                          }
                        },
                        {
                          key: "delay",
                          value: function delay(value) {
                            return this.param(value, "delay", "dl");
                          }
                        },
                        {
                          key: "density",
                          value: function density(value) {
                            return this.param(value, "density", "dn");
                          }
                        },
                        {
                          key: "duration",
                          value: function duration(value) {
                            return this.rangeParam(value, "duration", "du");
                          }
                        },
                        {
                          key: "dpr",
                          value: function dpr(value) {
                            return this.param(value, "dpr", "dpr", function(dpr2) {
                              dpr2 = dpr2.toString();
                              if (dpr2 != null ? dpr2.match(/^\d+$/) : void 0) {
                                return dpr2 + ".0";
                              } else {
                                return expression.normalize(dpr2);
                              }
                            });
                          }
                        },
                        {
                          key: "effect",
                          value: function effect(value) {
                            return this.arrayParam(value, "effect", "e", ":", expression.normalize);
                          }
                        },
                        {
                          key: "else",
                          value: function _else() {
                            return this["if"]("else");
                          }
                        },
                        {
                          key: "endIf",
                          value: function endIf() {
                            return this["if"]("end");
                          }
                        },
                        {
                          key: "endOffset",
                          value: function endOffset(value) {
                            return this.rangeParam(value, "end_offset", "eo");
                          }
                        },
                        {
                          key: "fallbackContent",
                          value: function fallbackContent(value) {
                            return this.param(value, "fallback_content");
                          }
                        },
                        {
                          key: "fetchFormat",
                          value: function fetchFormat(value) {
                            return this.param(value, "fetch_format", "f");
                          }
                        },
                        {
                          key: "format",
                          value: function format2(value) {
                            return this.param(value, "format");
                          }
                        },
                        {
                          key: "flags",
                          value: function flags(value) {
                            return this.arrayParam(value, "flags", "fl", ".");
                          }
                        },
                        {
                          key: "gravity",
                          value: function gravity(value) {
                            return this.param(value, "gravity", "g");
                          }
                        },
                        {
                          key: "fps",
                          value: function fps(value) {
                            return this.param(value, "fps", "fps", function(fps2) {
                              if (isString_root_isString_default()(fps2)) {
                                return fps2;
                              } else if (isArray_root_isArray_default()(fps2)) {
                                return fps2.join("-");
                              } else {
                                return fps2;
                              }
                            });
                          }
                        },
                        {
                          key: "height",
                          value: function height(value) {
                            var _this3 = this;
                            return this.param(value, "height", "h", function() {
                              if (_this3.getValue("crop") || _this3.getValue("overlay") || _this3.getValue("underlay")) {
                                return expression.normalize(value);
                              } else {
                                return null;
                              }
                            });
                          }
                        },
                        {
                          key: "htmlHeight",
                          value: function htmlHeight(value) {
                            return this.param(value, "html_height");
                          }
                        },
                        {
                          key: "htmlWidth",
                          value: function htmlWidth(value) {
                            return this.param(value, "html_width");
                          }
                        },
                        {
                          key: "if",
                          value: function _if() {
                            var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
                            var i, ifVal, j, trIf, trRest;
                            switch (value) {
                              case "else":
                                this.chain();
                                return this.param(value, "if", "if");
                              case "end":
                                this.chain();
                                for (i = j = this.chained.length - 1; j >= 0; i = j += -1) {
                                  ifVal = this.chained[i].getValue("if");
                                  if (ifVal === "end") {
                                    break;
                                  } else if (ifVal != null) {
                                    trIf = Transformation["new"]()["if"](ifVal);
                                    this.chained[i].remove("if");
                                    trRest = this.chained[i];
                                    this.chained[i] = Transformation["new"]().transformation([trIf, trRest]);
                                    if (ifVal !== "else") {
                                      break;
                                    }
                                  }
                                }
                                return this.param(value, "if", "if");
                              case "":
                                return condition["new"]().setParent(this);
                              default:
                                return this.param(value, "if", "if", function(value2) {
                                  return condition["new"](value2).toString();
                                });
                            }
                          }
                        },
                        {
                          key: "keyframeInterval",
                          value: function keyframeInterval(value) {
                            return this.param(value, "keyframe_interval", "ki");
                          }
                        },
                        {
                          key: "ocr",
                          value: function ocr(value) {
                            return this.param(value, "ocr", "ocr");
                          }
                        },
                        {
                          key: "offset",
                          value: function offset(value) {
                            var end_o, start_o;
                            var _ref2 = isFunction_root_isFunction_default()(value != null ? value.split : void 0) ? value.split("..") : isArray_root_isArray_default()(value) ? value : [null, null];
                            var _ref3 = transformation_slicedToArray(_ref2, 2);
                            start_o = _ref3[0];
                            end_o = _ref3[1];
                            if (start_o != null) {
                              this.startOffset(start_o);
                            }
                            if (end_o != null) {
                              return this.endOffset(end_o);
                            }
                          }
                        },
                        {
                          key: "opacity",
                          value: function opacity(value) {
                            return this.param(value, "opacity", "o", expression.normalize);
                          }
                        },
                        {
                          key: "overlay",
                          value: function overlay(value) {
                            return this.layerParam(value, "overlay", "l");
                          }
                        },
                        {
                          key: "page",
                          value: function page(value) {
                            return this.param(value, "page", "pg");
                          }
                        },
                        {
                          key: "poster",
                          value: function poster(value) {
                            return this.param(value, "poster");
                          }
                        },
                        {
                          key: "prefix",
                          value: function prefix(value) {
                            return this.param(value, "prefix", "p");
                          }
                        },
                        {
                          key: "quality",
                          value: function quality(value) {
                            return this.param(value, "quality", "q", expression.normalize);
                          }
                        },
                        {
                          key: "radius",
                          value: function radius(value) {
                            return this.arrayParam(value, "radius", "r", ":", expression.normalize);
                          }
                        },
                        {
                          key: "rawTransformation",
                          value: function rawTransformation(value) {
                            return this.rawParam(value, "raw_transformation");
                          }
                        },
                        {
                          key: "size",
                          value: function size2(value) {
                            var height, width;
                            if (isFunction_root_isFunction_default()(value != null ? value.split : void 0)) {
                              var _value$split = value.split("x");
                              var _value$split2 = transformation_slicedToArray(_value$split, 2);
                              width = _value$split2[0];
                              height = _value$split2[1];
                              this.width(width);
                              return this.height(height);
                            }
                          }
                        },
                        {
                          key: "sourceTypes",
                          value: function sourceTypes(value) {
                            return this.param(value, "source_types");
                          }
                        },
                        {
                          key: "sourceTransformation",
                          value: function sourceTransformation(value) {
                            return this.param(value, "source_transformation");
                          }
                        },
                        {
                          key: "startOffset",
                          value: function startOffset(value) {
                            return this.rangeParam(value, "start_offset", "so");
                          }
                        },
                        {
                          key: "streamingProfile",
                          value: function streamingProfile(value) {
                            return this.param(value, "streaming_profile", "sp");
                          }
                        },
                        {
                          key: "transformation",
                          value: function transformation(value) {
                            return this.transformationParam(value, "transformation", "t");
                          }
                        },
                        {
                          key: "underlay",
                          value: function underlay(value) {
                            return this.layerParam(value, "underlay", "u");
                          }
                        },
                        {
                          key: "variable",
                          value: function variable(name, value) {
                            return this.param(value, name, name);
                          }
                        },
                        {
                          key: "variables",
                          value: function variables(values) {
                            return this.arrayParam(values, "variables");
                          }
                        },
                        {
                          key: "videoCodec",
                          value: function videoCodec(value) {
                            return this.param(value, "video_codec", "vc", parameters_Param.process_video_params);
                          }
                        },
                        {
                          key: "videoSampling",
                          value: function videoSampling(value) {
                            return this.param(value, "video_sampling", "vs");
                          }
                        },
                        {
                          key: "width",
                          value: function width(value) {
                            var _this4 = this;
                            return this.param(value, "width", "w", function() {
                              if (_this4.getValue("crop") || _this4.getValue("overlay") || _this4.getValue("underlay")) {
                                return expression.normalize(value);
                              } else {
                                return null;
                              }
                            });
                          }
                        },
                        {
                          key: "x",
                          value: function x(value) {
                            return this.param(value, "x", "x", expression.normalize);
                          }
                        },
                        {
                          key: "y",
                          value: function y(value) {
                            return this.param(value, "y", "y", expression.normalize);
                          }
                        },
                        {
                          key: "zoom",
                          value: function zoom(value) {
                            return this.param(value, "zoom", "z", expression.normalize);
                          }
                        }
                      ],
                      [{
                        key: "new",
                        value: function _new(options) {
                          return new Transformation(options);
                        }
                      }]
                    );
                    return Transformation;
                  }(transformation_TransformationBase);
                  transformation_Transformation.methods = ["angle", "audioCodec", "audioFrequency", "aspectRatio", "background", "bitRate", "border", "color", "colorSpace", "crop", "customFunction", "customPreFunction", "defaultImage", "delay", "density", "duration", "dpr", "effect", "else", "endIf", "endOffset", "fallbackContent", "fetchFormat", "format", "flags", "gravity", "fps", "height", "htmlHeight", "htmlWidth", "if", "keyframeInterval", "ocr", "offset", "opacity", "overlay", "page", "poster", "prefix", "quality", "radius", "rawTransformation", "size", "sourceTypes", "sourceTransformation", "startOffset", "streamingProfile", "transformation", "underlay", "variable", "variables", "videoCodec", "videoSampling", "width", "x", "y", "zoom"];
                  transformation_Transformation.PARAM_NAMES = transformation_Transformation.methods.map(snakeCase).concat(src_configuration.CONFIG_PARAMS);
                  var src_transformation = transformation_Transformation;
                  function htmltag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function htmltag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function htmltag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) htmltag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) htmltag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var htmltag_HtmlTag = function() {
                    function HtmlTag(name, publicId, options) {
                      htmltag_classCallCheck(this, HtmlTag);
                      var transformation;
                      this.name = name;
                      this.publicId = publicId;
                      if (options == null) {
                        if (isPlainObject_root_isPlainObject_default()(publicId)) {
                          options = publicId;
                          this.publicId = void 0;
                        } else {
                          options = {};
                        }
                      }
                      transformation = new src_transformation(options);
                      transformation.setParent(this);
                      this.transformation = function() {
                        return transformation;
                      };
                    }
                    htmltag_createClass(
                      HtmlTag,
                      [
                        {
                          key: "htmlAttrs",
                          value: (
                            /**
                             * combine key and value from the `attr` to generate an HTML tag attributes string.
                             * `Transformation::toHtmlTagOptions` is used to filter out transformation and configuration keys.
                             * @protected
                             * @param {Object} attrs
                             * @return {string} the attributes in the format `'key1="value1" key2="value2"'`
                             * @ignore
                             */
                            function htmlAttrs(attrs) {
                              var key, value;
                              return function() {
                                var results;
                                results = [];
                                for (key in attrs) {
                                  value = escapeQuotes(attrs[key]);
                                  if (value) {
                                    results.push(htmltag_toAttribute(key, value));
                                  }
                                }
                                return results;
                              }().sort().join(" ");
                            }
                          )
                          /**
                           * Get all options related to this tag.
                           * @function HtmlTag#getOptions
                           * @returns {Object} the options
                           *
                           */
                        },
                        {
                          key: "getOptions",
                          value: function getOptions() {
                            return this.transformation().toOptions();
                          }
                          /**
                           * Get the value of option `name`
                           * @function HtmlTag#getOption
                           * @param {string} name - the name of the option
                           * @returns {*} Returns the value of the option
                           *
                           */
                        },
                        {
                          key: "getOption",
                          value: function getOption(name) {
                            return this.transformation().getValue(name);
                          }
                          /**
                           * Get the attributes of the tag.
                           * @function HtmlTag#attributes
                           * @returns {Object} attributes
                           */
                        },
                        {
                          key: "attributes",
                          value: function attributes() {
                            var htmlAttributes = this.transformation().toHtmlAttributes();
                            Object.keys(htmlAttributes).forEach(function(key) {
                              if (isPlainObject_root_isPlainObject_default()(htmlAttributes[key])) {
                                delete htmlAttributes[key];
                              }
                            });
                            if (htmlAttributes.attributes) {
                              merge_root_merge_default()(htmlAttributes, htmlAttributes.attributes);
                              delete htmlAttributes.attributes;
                            }
                            return htmlAttributes;
                          }
                          /**
                           * Set a tag attribute named `name` to `value`
                           * @function HtmlTag#setAttr
                           * @param {string} name - the name of the attribute
                           * @param {string} value - the value of the attribute
                           */
                        },
                        {
                          key: "setAttr",
                          value: function setAttr(name, value) {
                            this.transformation().set("html_".concat(name), value);
                            return this;
                          }
                          /**
                           * Get the value of the tag attribute `name`
                           * @function HtmlTag#getAttr
                           * @param {string} name - the name of the attribute
                           * @returns {*}
                           */
                        },
                        {
                          key: "getAttr",
                          value: function getAttr(name) {
                            return this.attributes()["html_".concat(name)] || this.attributes()[name];
                          }
                          /**
                           * Remove the tag attributed named `name`
                           * @function HtmlTag#removeAttr
                           * @param {string} name - the name of the attribute
                           * @returns {*}
                           */
                        },
                        {
                          key: "removeAttr",
                          value: function removeAttr(name) {
                            var ref;
                            return (ref = this.transformation().remove("html_".concat(name))) != null ? ref : this.transformation().remove(name);
                          }
                          /**
                           * @function HtmlTag#content
                           * @protected
                           * @ignore
                           */
                        },
                        {
                          key: "content",
                          value: function content() {
                            return "";
                          }
                          /**
                           * @function HtmlTag#openTag
                           * @protected
                           * @ignore
                           */
                        },
                        {
                          key: "openTag",
                          value: function openTag() {
                            var tag = "<" + this.name;
                            var htmlAttrs = this.htmlAttrs(this.attributes());
                            if (htmlAttrs && htmlAttrs.length > 0) {
                              tag += " " + htmlAttrs;
                            }
                            return tag + ">";
                          }
                          /**
                           * @function HtmlTag#closeTag
                           * @protected
                           * @ignore
                           */
                        },
                        {
                          key: "closeTag",
                          value: function closeTag() {
                            return "</".concat(this.name, ">");
                          }
                          /**
                           * Generates an HTML representation of the tag.
                           * @function HtmlTag#toHtml
                           * @returns {string} Returns HTML in string format
                           */
                        },
                        {
                          key: "toHtml",
                          value: function toHtml() {
                            return this.openTag() + this.content() + this.closeTag();
                          }
                          /**
                           * Creates a DOM object representing the tag.
                           * @function HtmlTag#toDOM
                           * @returns {Element}
                           */
                        },
                        {
                          key: "toDOM",
                          value: function toDOM() {
                            var element, name, ref, value;
                            if (!isFunction_root_isFunction_default()(typeof document !== "undefined" && document !== null ? document.createElement : void 0)) {
                              throw "Can't create DOM if document is not present!";
                            }
                            element = document.createElement(this.name);
                            ref = this.attributes();
                            for (name in ref) {
                              value = ref[name];
                              element.setAttribute(name, value);
                            }
                            return element;
                          }
                        }
                      ],
                      [
                        {
                          key: "new",
                          value: function _new(name, publicId, options) {
                            return new this(name, publicId, options);
                          }
                        },
                        {
                          key: "isResponsive",
                          value: function isResponsive(tag, responsiveClass) {
                            var dataSrc;
                            dataSrc = lodash_getData(tag, "src-cache") || lodash_getData(tag, "src");
                            return lodash_hasClass(tag, responsiveClass) && /\bw_auto\b/.exec(dataSrc);
                          }
                        }
                      ]
                    );
                    return HtmlTag;
                  }();
                  function htmltag_toAttribute(key, value) {
                    if (!value) {
                      return void 0;
                    } else if (value === true) {
                      return key;
                    } else {
                      return "".concat(key, '="').concat(value, '"');
                    }
                  }
                  function escapeQuotes(value) {
                    return isString_root_isString_default()(value) ? value.replace('"', "&#34;").replace("'", "&#39;") : value;
                  }
                  var htmltag = htmltag_HtmlTag;
                  var _excluded2 = ["placeholder", "accessibility"];
                  function _objectWithoutProperties2(source, excluded) {
                    if (source == null) return {};
                    var target = _objectWithoutPropertiesLoose2(source, excluded);
                    var key, i;
                    if (Object.getOwnPropertySymbols) {
                      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
                      for (i = 0; i < sourceSymbolKeys.length; i++) {
                        key = sourceSymbolKeys[i];
                        if (excluded.indexOf(key) >= 0) continue;
                        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                        target[key] = source[key];
                      }
                    }
                    return target;
                  }
                  function _objectWithoutPropertiesLoose2(source, excluded) {
                    if (source == null) return {};
                    var target = {};
                    var sourceKeys = Object.keys(source);
                    var key, i;
                    for (i = 0; i < sourceKeys.length; i++) {
                      key = sourceKeys[i];
                      if (excluded.indexOf(key) >= 0) continue;
                      target[key] = source[key];
                    }
                    return target;
                  }
                  function makeUrl(str) {
                    var prefix = document.location.protocol + "//" + document.location.host;
                    if (str[0] === "?") {
                      prefix += document.location.pathname;
                    } else if (str[0] !== "/") {
                      prefix += document.location.pathname.replace(/\/[^\/]*$/, "/");
                    }
                    return prefix + str;
                  }
                  function isUrl(str) {
                    return str ? !!str.match(/^https?:\//) : false;
                  }
                  function cdnSubdomainNumber(publicId) {
                    return src_crc32(publicId) % 5 + 1;
                  }
                  function handleSignature(options) {
                    var signature = options.signature;
                    var isFormatted = !signature || signature.indexOf("s--") === 0 && signature.substr(-2) === "--";
                    delete options.signature;
                    return isFormatted ? signature : "s--".concat(signature, "--");
                  }
                  function handlePrefix(publicId, options) {
                    if (options.cloud_name && options.cloud_name[0] === "/") {
                      return "/res" + options.cloud_name;
                    }
                    var protocol = "http://";
                    var cdnPart = "";
                    var subdomain = "res";
                    var host = ".cloudinary.com";
                    var path = "/" + options.cloud_name;
                    if (options.protocol) {
                      protocol = options.protocol + "//";
                    }
                    if (options.private_cdn) {
                      cdnPart = options.cloud_name + "-";
                      path = "";
                    }
                    if (options.cdn_subdomain) {
                      subdomain = "res-" + cdnSubdomainNumber(publicId);
                    }
                    if (options.secure) {
                      protocol = "https://";
                      if (options.secure_cdn_subdomain === false) {
                        subdomain = "res";
                      }
                      if (options.secure_distribution != null && options.secure_distribution !== OLD_AKAMAI_SHARED_CDN && options.secure_distribution !== SHARED_CDN) {
                        cdnPart = "";
                        subdomain = "";
                        host = options.secure_distribution;
                      }
                    } else if (options.cname) {
                      protocol = "http://";
                      cdnPart = "";
                      subdomain = options.cdn_subdomain ? "a" + (src_crc32(publicId) % 5 + 1) + "." : "";
                      host = options.cname;
                    }
                    return [protocol, cdnPart, subdomain, host, path].join("");
                  }
                  function handleResourceType(_ref) {
                    var _ref$resource_type = _ref.resource_type, resource_type = _ref$resource_type === void 0 ? "image" : _ref$resource_type, _ref$type = _ref.type, type = _ref$type === void 0 ? "upload" : _ref$type, url_suffix = _ref.url_suffix, use_root_path = _ref.use_root_path, shorten = _ref.shorten;
                    var options, resourceType = resource_type;
                    if (isPlainObject_root_isPlainObject_default()(resourceType)) {
                      options = resourceType;
                      resourceType = options.resource_type;
                      type = options.type;
                      shorten = options.shorten;
                    }
                    if (type == null) {
                      type = "upload";
                    }
                    if (url_suffix != null) {
                      resourceType = SEO_TYPES["".concat(resourceType, "/").concat(type)];
                      type = null;
                      if (resourceType == null) {
                        throw new Error("URL Suffix only supported for ".concat(Object.keys(SEO_TYPES).join(", ")));
                      }
                    }
                    if (use_root_path) {
                      if (resourceType === "image" && type === "upload" || resourceType === "images") {
                        resourceType = null;
                        type = null;
                      } else {
                        throw new Error("Root path only supported for image/upload");
                      }
                    }
                    if (shorten && resourceType === "image" && type === "upload") {
                      resourceType = "iu";
                      type = null;
                    }
                    return [resourceType, type].join("/");
                  }
                  function encodePublicId(publicId) {
                    return encodeURIComponent(publicId).replace(/%3A/g, ":").replace(/%2F/g, "/");
                  }
                  function formatPublicId(publicId, options) {
                    if (isUrl(publicId)) {
                      publicId = encodePublicId(publicId);
                    } else {
                      try {
                        publicId = decodeURIComponent(publicId);
                      } catch (error) {
                      }
                      publicId = encodePublicId(publicId);
                      if (options.url_suffix) {
                        publicId = publicId + "/" + options.url_suffix;
                      }
                      if (options.format) {
                        if (!options.trust_public_id) {
                          publicId = publicId.replace(/\.(jpg|png|gif|webp)$/, "");
                        }
                        publicId = publicId + "." + options.format;
                      }
                    }
                    return publicId;
                  }
                  function validate(options) {
                    var cloud_name = options.cloud_name, url_suffix = options.url_suffix;
                    if (!cloud_name) {
                      return "Unknown cloud_name";
                    }
                    if (url_suffix && url_suffix.match(/[\.\/]/)) {
                      return "url_suffix should not include . or /";
                    }
                  }
                  function handleVersion(publicId, options) {
                    var isForceVersion = options.force_version || typeof options.force_version === "undefined";
                    var isVersionExist = publicId.indexOf("/") < 0 || publicId.match(/^v[0-9]+/) || isUrl(publicId) || options.version;
                    if (isForceVersion && !isVersionExist) {
                      options.version = 1;
                    }
                    return options.version ? "v".concat(options.version) : "";
                  }
                  function handleTransformation(options) {
                    var _ref2 = options || {}, placeholder = _ref2.placeholder, accessibility = _ref2.accessibility, otherOptions = _objectWithoutProperties2(_ref2, _excluded2);
                    var result = new src_transformation(otherOptions);
                    if (accessibility && ACCESSIBILITY_MODES[accessibility]) {
                      result.chain().effect(ACCESSIBILITY_MODES[accessibility]);
                    }
                    if (placeholder) {
                      if (placeholder === "predominant-color" && result.getValue("width") && result.getValue("height")) {
                        placeholder += "-pixel";
                      }
                      var placeholderTransformations = PLACEHOLDER_IMAGE_MODES[placeholder] || PLACEHOLDER_IMAGE_MODES.blur;
                      placeholderTransformations.forEach(function(t) {
                        return result.chain().transformation(t);
                      });
                    }
                    return result.serialize();
                  }
                  function preparePublicId(publicId, _ref3) {
                    var type = _ref3.type;
                    return !isUrl(publicId) && type === "fetch" ? makeUrl(publicId) : publicId;
                  }
                  function urlString(publicId, options) {
                    if (isUrl(publicId) && (options.type === "upload" || options.type === "asset")) {
                      return publicId;
                    }
                    var version = handleVersion(publicId, options);
                    var transformationString = handleTransformation(options);
                    var prefix = handlePrefix(publicId, options);
                    var signature = handleSignature(options);
                    var resourceType = handleResourceType(options);
                    publicId = formatPublicId(publicId, options);
                    return compact_root_compact_default()([prefix, resourceType, signature, transformationString, version, publicId]).join("/").replace(/([^:])\/+/g, "$1/").replace(" ", "%20");
                  }
                  function prepareOptions(options, config) {
                    if (options instanceof src_transformation) {
                      options = options.toOptions();
                    }
                    options = defaults({}, options, config, DEFAULT_IMAGE_PARAMS);
                    if (options.type === "fetch") {
                      options.fetch_format = options.fetch_format || options.format;
                    }
                    return options;
                  }
                  function url_url(publicId) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    var config = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    if (!publicId) {
                      return publicId;
                    }
                    options = prepareOptions(options, config);
                    publicId = preparePublicId(publicId, options);
                    var error = validate(options);
                    if (error) {
                      throw error;
                    }
                    var resultUrl = urlString(publicId, options);
                    if (options.urlAnalytics) {
                      var analyticsOptions = getAnalyticsOptions(options);
                      var sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);
                      var appender = "?";
                      if (resultUrl.indexOf("?") >= 0) {
                        appender = "&";
                      }
                      resultUrl = "".concat(resultUrl).concat(appender, "_a=").concat(sdkAnalyticsSignature);
                    }
                    if (options.auth_token) {
                      var _appender = resultUrl.indexOf("?") >= 0 ? "&" : "?";
                      resultUrl = "".concat(resultUrl).concat(_appender, "__cld_token__=").concat(options.auth_token);
                    }
                    return resultUrl;
                  }
                  function generateBreakpoints_slicedToArray(arr, i) {
                    return generateBreakpoints_arrayWithHoles(arr) || generateBreakpoints_iterableToArrayLimit(arr, i) || generateBreakpoints_unsupportedIterableToArray(arr, i) || generateBreakpoints_nonIterableRest();
                  }
                  function generateBreakpoints_nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  function generateBreakpoints_unsupportedIterableToArray(o, minLen) {
                    if (!o) return;
                    if (typeof o === "string") return generateBreakpoints_arrayLikeToArray(o, minLen);
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) n = o.constructor.name;
                    if (n === "Map" || n === "Set") return Array.from(o);
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return generateBreakpoints_arrayLikeToArray(o, minLen);
                  }
                  function generateBreakpoints_arrayLikeToArray(arr, len) {
                    if (len == null || len > arr.length) len = arr.length;
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                      arr2[i] = arr[i];
                    }
                    return arr2;
                  }
                  function generateBreakpoints_iterableToArrayLimit(arr, i) {
                    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
                    if (_i == null) return;
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _s, _e;
                    try {
                      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break;
                      }
                    } catch (err) {
                      _d = true;
                      _e = err;
                    } finally {
                      try {
                        if (!_n && _i["return"] != null) _i["return"]();
                      } finally {
                        if (_d) throw _e;
                      }
                    }
                    return _arr;
                  }
                  function generateBreakpoints_arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                  }
                  function generateBreakpoints(srcset) {
                    var breakpoints = srcset.breakpoints || [];
                    if (breakpoints.length) {
                      return breakpoints;
                    }
                    var _map = [srcset.min_width, srcset.max_width, srcset.max_images].map(Number), _map2 = generateBreakpoints_slicedToArray(_map, 3), min_width = _map2[0], max_width = _map2[1], max_images = _map2[2];
                    if ([min_width, max_width, max_images].some(isNaN)) {
                      throw "Either (min_width, max_width, max_images) or breakpoints must be provided to the image srcset attribute";
                    }
                    if (min_width > max_width) {
                      throw "min_width must be less than max_width";
                    }
                    if (max_images <= 0) {
                      throw "max_images must be a positive integer";
                    } else if (max_images === 1) {
                      min_width = max_width;
                    }
                    var stepSize = Math.ceil((max_width - min_width) / Math.max(max_images - 1, 1));
                    for (var current = min_width; current < max_width; current += stepSize) {
                      breakpoints.push(current);
                    }
                    breakpoints.push(max_width);
                    return breakpoints;
                  }
                  var srcsetUtils_isEmpty = isEmpty2;
                  function scaledUrl(public_id, width, transformation) {
                    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                    var configParams = extractUrlParams(options);
                    transformation = transformation || options;
                    configParams.raw_transformation = new src_transformation([merge_root_merge_default.a({}, transformation), {
                      crop: "scale",
                      width
                    }]).toString();
                    return url_url(public_id, configParams);
                  }
                  function getOrGenerateBreakpoints(public_id) {
                    var srcset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    return generateBreakpoints(srcset);
                  }
                  function generateSrcsetAttribute(public_id, breakpoints, transformation, options) {
                    options = cloneDeep_root_cloneDeep_default.a(options);
                    patchFetchFormat(options);
                    return breakpoints.map(function(width) {
                      return "".concat(scaledUrl(public_id, width, transformation, options), " ").concat(width, "w");
                    }).join(", ");
                  }
                  function generateSizesAttribute(breakpoints) {
                    if (breakpoints == null) {
                      return "";
                    }
                    return breakpoints.map(function(width) {
                      return "(max-width: ".concat(width, "px) ").concat(width, "px");
                    }).join(", ");
                  }
                  function generateImageResponsiveAttributes(publicId) {
                    var attributes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                    var srcsetData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                    var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
                    var responsiveAttributes = {};
                    if (srcsetUtils_isEmpty(srcsetData)) {
                      return responsiveAttributes;
                    }
                    var generateSizes = !attributes.sizes && srcsetData.sizes === true;
                    var generateSrcset = !attributes.srcset;
                    if (generateSrcset || generateSizes) {
                      var breakpoints = getOrGenerateBreakpoints(publicId, srcsetData, options);
                      if (generateSrcset) {
                        var transformation = srcsetData.transformation;
                        var srcsetAttr = generateSrcsetAttribute(publicId, breakpoints, transformation, options);
                        if (!srcsetUtils_isEmpty(srcsetAttr)) {
                          responsiveAttributes.srcset = srcsetAttr;
                        }
                      }
                      if (generateSizes) {
                        var sizesAttr = generateSizesAttribute(breakpoints);
                        if (!srcsetUtils_isEmpty(sizesAttr)) {
                          responsiveAttributes.sizes = sizesAttr;
                        }
                      }
                    }
                    return responsiveAttributes;
                  }
                  function generateMediaAttr(options) {
                    var mediaQuery = [];
                    if (options != null) {
                      if (options.min_width != null) {
                        mediaQuery.push("(min-width: ".concat(options.min_width, "px)"));
                      }
                      if (options.max_width != null) {
                        mediaQuery.push("(max-width: ".concat(options.max_width, "px)"));
                      }
                    }
                    return mediaQuery.join(" and ");
                  }
                  function imagetag_typeof(obj) {
                    "@babel/helpers - typeof";
                    return imagetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, imagetag_typeof(obj);
                  }
                  function imagetag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function imagetag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function imagetag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) imagetag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) imagetag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function imagetag_get() {
                    if (typeof Reflect !== "undefined" && Reflect.get) {
                      imagetag_get = Reflect.get.bind();
                    } else {
                      imagetag_get = function _get2(target, property, receiver) {
                        var base = imagetag_superPropBase(target, property);
                        if (!base) return;
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                          return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                      };
                    }
                    return imagetag_get.apply(this, arguments);
                  }
                  function imagetag_superPropBase(object, property) {
                    while (!Object.prototype.hasOwnProperty.call(object, property)) {
                      object = imagetag_getPrototypeOf(object);
                      if (object === null) break;
                    }
                    return object;
                  }
                  function imagetag_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) imagetag_setPrototypeOf(subClass, superClass);
                  }
                  function imagetag_setPrototypeOf(o, p) {
                    imagetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return imagetag_setPrototypeOf(o, p);
                  }
                  function imagetag_createSuper(Derived) {
                    var hasNativeReflectConstruct = imagetag_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = imagetag_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = imagetag_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return imagetag_possibleConstructorReturn(this, result);
                    };
                  }
                  function imagetag_possibleConstructorReturn(self2, call) {
                    if (call && (imagetag_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return imagetag_assertThisInitialized(self2);
                  }
                  function imagetag_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function imagetag_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function imagetag_getPrototypeOf(o) {
                    imagetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return imagetag_getPrototypeOf(o);
                  }
                  var imagetag_ImageTag = function(_HtmlTag) {
                    imagetag_inherits(ImageTag, _HtmlTag);
                    var _super = imagetag_createSuper(ImageTag);
                    function ImageTag(publicId) {
                      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                      imagetag_classCallCheck(this, ImageTag);
                      return _super.call(this, "img", publicId, options);
                    }
                    imagetag_createClass(ImageTag, [
                      {
                        key: "closeTag",
                        value: function closeTag() {
                          return "";
                        }
                        /** @override */
                      },
                      {
                        key: "attributes",
                        value: function attributes() {
                          var attr, options, srcAttribute;
                          attr = imagetag_get(imagetag_getPrototypeOf(ImageTag.prototype), "attributes", this).call(this) || {};
                          options = this.getOptions();
                          var attributes2 = this.getOption("attributes") || {};
                          var srcsetParam = this.getOption("srcset") || attributes2.srcset;
                          var responsiveAttributes = {};
                          if (isString_root_isString_default()(srcsetParam)) {
                            responsiveAttributes.srcset = srcsetParam;
                          } else {
                            responsiveAttributes = generateImageResponsiveAttributes(this.publicId, attributes2, srcsetParam, options);
                          }
                          if (!isEmpty2(responsiveAttributes)) {
                            delete attr.width;
                            delete attr.height;
                          }
                          merge_root_merge_default()(attr, responsiveAttributes);
                          srcAttribute = options.responsive && !options.client_hints ? "data-src" : "src";
                          if (attr[srcAttribute] == null) {
                            attr[srcAttribute] = url_url(this.publicId, this.getOptions());
                          }
                          return attr;
                        }
                      }
                    ]);
                    return ImageTag;
                  }(htmltag);
                  var imagetag = imagetag_ImageTag;
                  function sourcetag_typeof(obj) {
                    "@babel/helpers - typeof";
                    return sourcetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, sourcetag_typeof(obj);
                  }
                  function sourcetag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function sourcetag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function sourcetag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) sourcetag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) sourcetag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function sourcetag_get() {
                    if (typeof Reflect !== "undefined" && Reflect.get) {
                      sourcetag_get = Reflect.get.bind();
                    } else {
                      sourcetag_get = function _get2(target, property, receiver) {
                        var base = sourcetag_superPropBase(target, property);
                        if (!base) return;
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                          return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                      };
                    }
                    return sourcetag_get.apply(this, arguments);
                  }
                  function sourcetag_superPropBase(object, property) {
                    while (!Object.prototype.hasOwnProperty.call(object, property)) {
                      object = sourcetag_getPrototypeOf(object);
                      if (object === null) break;
                    }
                    return object;
                  }
                  function sourcetag_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) sourcetag_setPrototypeOf(subClass, superClass);
                  }
                  function sourcetag_setPrototypeOf(o, p) {
                    sourcetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return sourcetag_setPrototypeOf(o, p);
                  }
                  function sourcetag_createSuper(Derived) {
                    var hasNativeReflectConstruct = sourcetag_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = sourcetag_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = sourcetag_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return sourcetag_possibleConstructorReturn(this, result);
                    };
                  }
                  function sourcetag_possibleConstructorReturn(self2, call) {
                    if (call && (sourcetag_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return sourcetag_assertThisInitialized(self2);
                  }
                  function sourcetag_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function sourcetag_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function sourcetag_getPrototypeOf(o) {
                    sourcetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return sourcetag_getPrototypeOf(o);
                  }
                  var sourcetag_SourceTag = function(_HtmlTag) {
                    sourcetag_inherits(SourceTag, _HtmlTag);
                    var _super = sourcetag_createSuper(SourceTag);
                    function SourceTag(publicId) {
                      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                      sourcetag_classCallCheck(this, SourceTag);
                      return _super.call(this, "source", publicId, options);
                    }
                    sourcetag_createClass(SourceTag, [
                      {
                        key: "closeTag",
                        value: function closeTag() {
                          return "";
                        }
                        /** @override */
                      },
                      {
                        key: "attributes",
                        value: function attributes() {
                          var srcsetParam = this.getOption("srcset");
                          var attr = sourcetag_get(sourcetag_getPrototypeOf(SourceTag.prototype), "attributes", this).call(this) || {};
                          var options = this.getOptions();
                          merge_root_merge_default()(attr, generateImageResponsiveAttributes(this.publicId, attr, srcsetParam, options));
                          if (!attr.srcset) {
                            attr.srcset = url_url(this.publicId, options);
                          }
                          if (!attr.media && options.media) {
                            attr.media = generateMediaAttr(options.media);
                          }
                          return attr;
                        }
                      }
                    ]);
                    return SourceTag;
                  }(htmltag);
                  var sourcetag = sourcetag_SourceTag;
                  function picturetag_typeof(obj) {
                    "@babel/helpers - typeof";
                    return picturetag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, picturetag_typeof(obj);
                  }
                  function picturetag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function picturetag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function picturetag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) picturetag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) picturetag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function picturetag_get() {
                    if (typeof Reflect !== "undefined" && Reflect.get) {
                      picturetag_get = Reflect.get.bind();
                    } else {
                      picturetag_get = function _get2(target, property, receiver) {
                        var base = picturetag_superPropBase(target, property);
                        if (!base) return;
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                          return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                      };
                    }
                    return picturetag_get.apply(this, arguments);
                  }
                  function picturetag_superPropBase(object, property) {
                    while (!Object.prototype.hasOwnProperty.call(object, property)) {
                      object = picturetag_getPrototypeOf(object);
                      if (object === null) break;
                    }
                    return object;
                  }
                  function picturetag_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) picturetag_setPrototypeOf(subClass, superClass);
                  }
                  function picturetag_setPrototypeOf(o, p) {
                    picturetag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return picturetag_setPrototypeOf(o, p);
                  }
                  function picturetag_createSuper(Derived) {
                    var hasNativeReflectConstruct = picturetag_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = picturetag_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = picturetag_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return picturetag_possibleConstructorReturn(this, result);
                    };
                  }
                  function picturetag_possibleConstructorReturn(self2, call) {
                    if (call && (picturetag_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return picturetag_assertThisInitialized(self2);
                  }
                  function picturetag_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function picturetag_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function picturetag_getPrototypeOf(o) {
                    picturetag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return picturetag_getPrototypeOf(o);
                  }
                  var picturetag_PictureTag = function(_HtmlTag) {
                    picturetag_inherits(PictureTag, _HtmlTag);
                    var _super = picturetag_createSuper(PictureTag);
                    function PictureTag(publicId) {
                      var _this;
                      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                      var sources = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                      picturetag_classCallCheck(this, PictureTag);
                      _this = _super.call(this, "picture", publicId, options);
                      _this.widthList = sources;
                      return _this;
                    }
                    picturetag_createClass(PictureTag, [
                      {
                        key: "content",
                        value: function content() {
                          var _this2 = this;
                          return this.widthList.map(function(_ref) {
                            var min_width = _ref.min_width, max_width = _ref.max_width, transformation = _ref.transformation;
                            var options = _this2.getOptions();
                            var sourceTransformation = new src_transformation(options);
                            sourceTransformation.chain().fromOptions(typeof transformation === "string" ? {
                              raw_transformation: transformation
                            } : transformation);
                            options = extractUrlParams(options);
                            options.media = {
                              min_width,
                              max_width
                            };
                            options.transformation = sourceTransformation;
                            return new sourcetag(_this2.publicId, options).toHtml();
                          }).join("") + new imagetag(this.publicId, this.getOptions()).toHtml();
                        }
                        /** @override */
                      },
                      {
                        key: "attributes",
                        value: function attributes() {
                          var attr = picturetag_get(picturetag_getPrototypeOf(PictureTag.prototype), "attributes", this).call(this);
                          delete attr.width;
                          delete attr.height;
                          return attr;
                        }
                        /** @override */
                      },
                      {
                        key: "closeTag",
                        value: function closeTag() {
                          return "</" + this.name + ">";
                        }
                      }
                    ]);
                    return PictureTag;
                  }(htmltag);
                  var picturetag = picturetag_PictureTag;
                  function videotag_typeof(obj) {
                    "@babel/helpers - typeof";
                    return videotag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, videotag_typeof(obj);
                  }
                  function videotag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function videotag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function videotag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) videotag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) videotag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function videotag_get() {
                    if (typeof Reflect !== "undefined" && Reflect.get) {
                      videotag_get = Reflect.get.bind();
                    } else {
                      videotag_get = function _get2(target, property, receiver) {
                        var base = videotag_superPropBase(target, property);
                        if (!base) return;
                        var desc = Object.getOwnPropertyDescriptor(base, property);
                        if (desc.get) {
                          return desc.get.call(arguments.length < 3 ? target : receiver);
                        }
                        return desc.value;
                      };
                    }
                    return videotag_get.apply(this, arguments);
                  }
                  function videotag_superPropBase(object, property) {
                    while (!Object.prototype.hasOwnProperty.call(object, property)) {
                      object = videotag_getPrototypeOf(object);
                      if (object === null) break;
                    }
                    return object;
                  }
                  function videotag_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) videotag_setPrototypeOf(subClass, superClass);
                  }
                  function videotag_setPrototypeOf(o, p) {
                    videotag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return videotag_setPrototypeOf(o, p);
                  }
                  function videotag_createSuper(Derived) {
                    var hasNativeReflectConstruct = videotag_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = videotag_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = videotag_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return videotag_possibleConstructorReturn(this, result);
                    };
                  }
                  function videotag_possibleConstructorReturn(self2, call) {
                    if (call && (videotag_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return videotag_assertThisInitialized(self2);
                  }
                  function videotag_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function videotag_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function videotag_getPrototypeOf(o) {
                    videotag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return videotag_getPrototypeOf(o);
                  }
                  var VIDEO_TAG_PARAMS = ["source_types", "source_transformation", "fallback_content", "poster", "sources"];
                  var videotag_DEFAULT_VIDEO_SOURCE_TYPES = ["webm", "mp4", "ogv"];
                  var videotag_DEFAULT_POSTER_OPTIONS = {
                    format: "jpg",
                    resource_type: "video"
                  };
                  var videotag_VideoTag = function(_HtmlTag) {
                    videotag_inherits(VideoTag, _HtmlTag);
                    var _super = videotag_createSuper(VideoTag);
                    function VideoTag(publicId) {
                      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                      videotag_classCallCheck(this, VideoTag);
                      options = defaults({}, options, DEFAULT_VIDEO_PARAMS);
                      return _super.call(this, "video", publicId.replace(/\.(mp4|ogv|webm)$/, ""), options);
                    }
                    videotag_createClass(VideoTag, [
                      {
                        key: "setSourceTransformation",
                        value: function setSourceTransformation(value) {
                          this.transformation().sourceTransformation(value);
                          return this;
                        }
                        /**
                         * Set the source types to include in the video tag
                         * @function VideoTag#setSourceTypes
                         * @param {Array<string>} an array of source types
                         * @returns {VideoTag} Returns this instance for chaining purposes.
                         */
                      },
                      {
                        key: "setSourceTypes",
                        value: function setSourceTypes(value) {
                          this.transformation().sourceTypes(value);
                          return this;
                        }
                        /**
                         * Set the poster to be used in the video tag
                         * @function VideoTag#setPoster
                         * @param {string|Object} value
                         * - string: a URL to use for the poster
                         * - Object: transformation parameters to apply to the poster. May optionally include a public_id to use instead of the video public_id.
                         * @returns {VideoTag} Returns this instance for chaining purposes.
                         */
                      },
                      {
                        key: "setPoster",
                        value: function setPoster(value) {
                          this.transformation().poster(value);
                          return this;
                        }
                        /**
                         * Set the content to use as fallback in the video tag
                         * @function VideoTag#setFallbackContent
                         * @param {string} value - the content to use, in HTML format
                         * @returns {VideoTag} Returns this instance for chaining purposes.
                         */
                      },
                      {
                        key: "setFallbackContent",
                        value: function setFallbackContent(value) {
                          this.transformation().fallbackContent(value);
                          return this;
                        }
                      },
                      {
                        key: "content",
                        value: function content() {
                          var _this = this;
                          var sourceTypes = this.transformation().getValue("source_types");
                          var sourceTransformation = this.transformation().getValue("source_transformation");
                          var fallback = this.transformation().getValue("fallback_content");
                          var sources = this.getOption("sources");
                          var innerTags = [];
                          if (isArray_root_isArray_default()(sources) && !isEmpty2(sources)) {
                            innerTags = sources.map(function(source) {
                              var src = url_url(
                                _this.publicId,
                                defaults({}, source.transformations || {}, {
                                  resource_type: "video",
                                  format: source.type
                                }),
                                _this.getOptions()
                              );
                              return _this.createSourceTag(src, source.type, source.codecs);
                            });
                          } else {
                            if (isEmpty2(sourceTypes)) {
                              sourceTypes = videotag_DEFAULT_VIDEO_SOURCE_TYPES;
                            }
                            if (isArray_root_isArray_default()(sourceTypes)) {
                              innerTags = sourceTypes.map(function(srcType) {
                                var src = url_url(
                                  _this.publicId,
                                  defaults({}, sourceTransformation[srcType] || {}, {
                                    resource_type: "video",
                                    format: srcType
                                  }),
                                  _this.getOptions()
                                );
                                return _this.createSourceTag(src, srcType);
                              });
                            }
                          }
                          return innerTags.join("") + fallback;
                        }
                      },
                      {
                        key: "attributes",
                        value: function attributes() {
                          var sourceTypes = this.getOption("source_types");
                          var poster = this.getOption("poster");
                          if (poster === void 0) {
                            poster = {};
                          }
                          if (isPlainObject_root_isPlainObject_default()(poster)) {
                            var defaultOptions2 = poster.public_id != null ? DEFAULT_IMAGE_PARAMS : videotag_DEFAULT_POSTER_OPTIONS;
                            poster = url_url(poster.public_id || this.publicId, defaults({}, poster, defaultOptions2, this.getOptions()));
                          }
                          var attr = videotag_get(videotag_getPrototypeOf(VideoTag.prototype), "attributes", this).call(this) || {};
                          attr = omit(attr, VIDEO_TAG_PARAMS);
                          var sources = this.getOption("sources");
                          var hasSourceTags = !isEmpty2(sources) || isEmpty2(sourceTypes) || isArray_root_isArray_default()(sourceTypes);
                          if (!hasSourceTags) {
                            attr["src"] = url_url(this.publicId, this.getOptions(), {
                              resource_type: "video",
                              format: sourceTypes
                            });
                          }
                          if (poster != null) {
                            attr["poster"] = poster;
                          }
                          return attr;
                        }
                      },
                      {
                        key: "createSourceTag",
                        value: function createSourceTag(src, sourceType) {
                          var codecs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
                          var mimeType = null;
                          if (!isEmpty2(sourceType)) {
                            var videoType = sourceType === "ogv" ? "ogg" : sourceType;
                            mimeType = "video/" + videoType;
                            if (!isEmpty2(codecs)) {
                              var codecsStr = isArray_root_isArray_default()(codecs) ? codecs.join(", ") : codecs;
                              mimeType += "; codecs=" + codecsStr;
                            }
                          }
                          return "<source " + this.htmlAttrs({
                            src,
                            type: mimeType
                          }) + ">";
                        }
                      }
                    ]);
                    return VideoTag;
                  }(htmltag);
                  var videotag = videotag_VideoTag;
                  function clienthintsmetatag_typeof(obj) {
                    "@babel/helpers - typeof";
                    return clienthintsmetatag_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
                      return typeof obj2;
                    } : function(obj2) {
                      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                    }, clienthintsmetatag_typeof(obj);
                  }
                  function clienthintsmetatag_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function clienthintsmetatag_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function clienthintsmetatag_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) clienthintsmetatag_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) clienthintsmetatag_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  function clienthintsmetatag_inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    Object.defineProperty(subClass, "prototype", { writable: false });
                    if (superClass) clienthintsmetatag_setPrototypeOf(subClass, superClass);
                  }
                  function clienthintsmetatag_setPrototypeOf(o, p) {
                    clienthintsmetatag_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf3(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return clienthintsmetatag_setPrototypeOf(o, p);
                  }
                  function clienthintsmetatag_createSuper(Derived) {
                    var hasNativeReflectConstruct = clienthintsmetatag_isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = clienthintsmetatag_getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = clienthintsmetatag_getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return clienthintsmetatag_possibleConstructorReturn(this, result);
                    };
                  }
                  function clienthintsmetatag_possibleConstructorReturn(self2, call) {
                    if (call && (clienthintsmetatag_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    } else if (call !== void 0) {
                      throw new TypeError("Derived constructors may only return object or undefined");
                    }
                    return clienthintsmetatag_assertThisInitialized(self2);
                  }
                  function clienthintsmetatag_assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function clienthintsmetatag_isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function clienthintsmetatag_getPrototypeOf(o) {
                    clienthintsmetatag_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf3(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return clienthintsmetatag_getPrototypeOf(o);
                  }
                  var clienthintsmetatag_ClientHintsMetaTag = function(_HtmlTag) {
                    clienthintsmetatag_inherits(ClientHintsMetaTag, _HtmlTag);
                    var _super = clienthintsmetatag_createSuper(ClientHintsMetaTag);
                    function ClientHintsMetaTag(options) {
                      clienthintsmetatag_classCallCheck(this, ClientHintsMetaTag);
                      return _super.call(this, "meta", void 0, assign_root_assign_default()(
                        {
                          "http-equiv": "Accept-CH",
                          content: "DPR, Viewport-Width, Width"
                        },
                        options
                      ));
                    }
                    clienthintsmetatag_createClass(ClientHintsMetaTag, [{
                      key: "closeTag",
                      value: function closeTag() {
                        return "";
                      }
                    }]);
                    return ClientHintsMetaTag;
                  }(htmltag);
                  var clienthintsmetatag = clienthintsmetatag_ClientHintsMetaTag;
                  function normalizeToArray_toConsumableArray(arr) {
                    return normalizeToArray_arrayWithoutHoles(arr) || normalizeToArray_iterableToArray(arr) || normalizeToArray_unsupportedIterableToArray(arr) || normalizeToArray_nonIterableSpread();
                  }
                  function normalizeToArray_nonIterableSpread() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  function normalizeToArray_unsupportedIterableToArray(o, minLen) {
                    if (!o) return;
                    if (typeof o === "string") return normalizeToArray_arrayLikeToArray(o, minLen);
                    var n = Object.prototype.toString.call(o).slice(8, -1);
                    if (n === "Object" && o.constructor) n = o.constructor.name;
                    if (n === "Map" || n === "Set") return Array.from(o);
                    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return normalizeToArray_arrayLikeToArray(o, minLen);
                  }
                  function normalizeToArray_iterableToArray(iter) {
                    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
                  }
                  function normalizeToArray_arrayWithoutHoles(arr) {
                    if (Array.isArray(arr)) return normalizeToArray_arrayLikeToArray(arr);
                  }
                  function normalizeToArray_arrayLikeToArray(arr, len) {
                    if (len == null || len > arr.length) len = arr.length;
                    for (var i = 0, arr2 = new Array(len); i < len; i++) {
                      arr2[i] = arr[i];
                    }
                    return arr2;
                  }
                  function normalizeToArray(elements) {
                    if (isArray_root_isArray_default()(elements)) {
                      return elements;
                    } else if (elements.constructor.name === "NodeList") {
                      return normalizeToArray_toConsumableArray(elements);
                    } else if (isString_root_isString_default()(elements)) {
                      return Array.prototype.slice.call(document.querySelectorAll(elements), 0);
                    } else {
                      return [elements];
                    }
                  }
                  function mountCloudinaryVideoTag(htmlElContainer, clInstance, publicId, options) {
                    return new Promise(function(resolve, reject) {
                      htmlElContainer.innerHTML = clInstance.videoTag(publicId, options).toHtml();
                      var cloudinaryVideoElement = htmlElContainer.querySelector(".cld-transparent-video");
                      cloudinaryVideoElement.style.width = "100%";
                      resolve(htmlElContainer);
                    });
                  }
                  var transparentVideo_mountCloudinaryVideoTag = mountCloudinaryVideoTag;
                  function addFlagToOptions(options, flag) {
                    if (options.transformation) {
                      options.transformation.push({
                        flags: [flag]
                      });
                    } else {
                      if (!options.flags) {
                        options.flags = [];
                      }
                      if (typeof options.flags === "string") {
                        options.flags = [options.flags];
                      }
                      options.flags.push(flag);
                    }
                  }
                  var addFlag = addFlagToOptions;
                  function enforceOptionsForTransparentVideo(options) {
                    options.autoplay = true;
                    options.muted = true;
                    options.controls = false;
                    options.max_timeout_ms = options.max_timeout_ms || DEFAULT_TIMEOUT_MS;
                    options["class"] = options["class"] || "";
                    options["class"] += " cld-transparent-video";
                    options.externalLibraries = options.externalLibraries || {};
                    if (!options.externalLibraries.seeThru) {
                      options.externalLibraries.seeThru = DEFAULT_EXTERNAL_LIBRARIES.seeThru;
                    }
                    addFlag(options, "alpha");
                  }
                  var transparentVideo_enforceOptionsForTransparentVideo = enforceOptionsForTransparentVideo;
                  function loadScript(scriptURL, max_timeout_ms, isAlreadyLoaded) {
                    return new Promise(function(resolve, reject) {
                      if (isAlreadyLoaded) {
                        resolve();
                      } else {
                        var scriptTag = document.createElement("script");
                        scriptTag.src = scriptURL;
                        var timerID = setTimeout(function() {
                          reject({
                            status: "error",
                            message: "Timeout loading script ".concat(scriptURL)
                          });
                        }, max_timeout_ms);
                        scriptTag.onerror = function() {
                          clearTimeout(timerID);
                          reject({
                            status: "error",
                            message: "Error loading ".concat(scriptURL)
                          });
                        };
                        scriptTag.onload = function() {
                          clearTimeout(timerID);
                          resolve();
                        };
                        document.head.appendChild(scriptTag);
                      }
                    });
                  }
                  var xhr_loadScript = loadScript;
                  function rejectOnTimeout(maxTimeoutMS, reject) {
                    return setTimeout(function() {
                      reject({
                        status: "error",
                        message: "Timeout loading Blob URL"
                      });
                    }, maxTimeoutMS);
                  }
                  function getBlobFromURL(urlToLoad, maxTimeoutMS) {
                    return new Promise(function(resolve, reject) {
                      var timerID = rejectOnTimeout(maxTimeoutMS, reject);
                      var fetchBlob = typeof fetch !== "undefined" && fetch ? loadUrlUsingFetch : loadUrlUsingXhr;
                      fetchBlob(urlToLoad).then(function(blob) {
                        resolve({
                          status: "success",
                          payload: {
                            blobURL: URL.createObjectURL(blob)
                          }
                        });
                      })["catch"](function() {
                        reject({
                          status: "error",
                          message: "Error loading Blob URL"
                        });
                      })["finally"](function() {
                        clearTimeout(timerID);
                      });
                    });
                  }
                  function loadUrlUsingFetch(urlToLoad) {
                    return new Promise(function(resolve, reject) {
                      fetch(urlToLoad).then(function(response) {
                        response.blob().then(function(blob) {
                          resolve(blob);
                        });
                      })["catch"](function() {
                        reject("error");
                      });
                    });
                  }
                  function loadUrlUsingXhr(urlToLoad) {
                    return new Promise(function(resolve, reject) {
                      var xhr = new XMLHttpRequest();
                      xhr.responseType = "blob";
                      xhr.onload = function(response) {
                        resolve(xhr.response);
                      };
                      xhr.onerror = function() {
                        reject("error");
                      };
                      xhr.open("GET", urlToLoad, true);
                      xhr.send();
                    });
                  }
                  var xhr_getBlobFromURL = getBlobFromURL;
                  function createHiddenVideoTag(videoOptions) {
                    var autoplay = videoOptions.autoplay, playsinline = videoOptions.playsinline, loop = videoOptions.loop, muted = videoOptions.muted, poster = videoOptions.poster, blobURL = videoOptions.blobURL, videoURL = videoOptions.videoURL;
                    var el = document.createElement("video");
                    el.style.visibility = "hidden";
                    el.position = "absolute";
                    el.x = 0;
                    el.y = 0;
                    el.src = blobURL;
                    el.setAttribute("data-video-url", videoURL);
                    autoplay && el.setAttribute("autoplay", autoplay);
                    playsinline && el.setAttribute("playsinline", playsinline);
                    loop && el.setAttribute("loop", loop);
                    muted && el.setAttribute("muted", muted);
                    muted && (el.muted = muted);
                    poster && el.setAttribute("poster", poster);
                    el.onload = function() {
                      URL.revokeObjectURL(blobURL);
                    };
                    return el;
                  }
                  var transparentVideo_createHiddenVideoTag = createHiddenVideoTag;
                  function instantiateSeeThru(videoElement, max_timeout_ms, customClass, autoPlay) {
                    var _window = window, seeThru = _window.seeThru, setTimeout2 = _window.setTimeout, clearTimeout2 = _window.clearTimeout;
                    return new Promise(function(resolve, reject) {
                      var timerID = setTimeout2(function() {
                        reject({
                          status: "error",
                          message: "Timeout instantiating seeThru instance"
                        });
                      }, max_timeout_ms);
                      if (seeThru) {
                        var seeThruInstance = seeThru.create(videoElement).ready(function() {
                          clearTimeout2(timerID);
                          var canvasElement = seeThruInstance.getCanvas();
                          canvasElement.style.width = "100%";
                          canvasElement.className += " " + customClass;
                          if (autoPlay) {
                            seeThruInstance.play();
                          }
                          resolve(seeThruInstance);
                        });
                      } else {
                        reject({
                          status: "error",
                          message: "Error instantiating seeThru instance"
                        });
                      }
                    });
                  }
                  var transparentVideo_instantiateSeeThru = instantiateSeeThru;
                  function mountSeeThruCanvasTag(htmlElContainer, videoURL, options) {
                    var poster = options.poster, autoplay = options.autoplay, playsinline = options.playsinline, loop = options.loop, muted = options.muted;
                    videoURL = videoURL + ".mp4";
                    return new Promise(function(resolve, reject) {
                      xhr_loadScript(options.externalLibraries.seeThru, options.max_timeout_ms, window.seeThru).then(function() {
                        xhr_getBlobFromURL(videoURL, options.max_timeout_ms).then(function(_ref) {
                          var payload = _ref.payload;
                          var videoElement = transparentVideo_createHiddenVideoTag({
                            blobURL: payload.blobURL,
                            videoURL,
                            // for debugging/testing
                            poster,
                            autoplay,
                            playsinline,
                            loop,
                            muted
                          });
                          htmlElContainer.appendChild(videoElement);
                          transparentVideo_instantiateSeeThru(videoElement, options.max_timeout_ms, options["class"], options.autoplay).then(function() {
                            resolve(htmlElContainer);
                          })["catch"](function(err) {
                            reject(err);
                          });
                        })["catch"](function(_ref2) {
                          var status = _ref2.status, message = _ref2.message;
                          reject({
                            status,
                            message
                          });
                        });
                      })["catch"](function(_ref3) {
                        var status = _ref3.status, message = _ref3.message;
                        reject({
                          status,
                          message
                        });
                      });
                    });
                  }
                  var transparentVideo_mountSeeThruCanvasTag = mountSeeThruCanvasTag;
                  function checkSupportForTransparency() {
                    return new Promise(function(resolve, reject) {
                      if (isSafari()) {
                        resolve(false);
                      }
                      var video = document.createElement("video");
                      var canPlay = video.canPlayType && video.canPlayType('video/webm; codecs="vp9"');
                      resolve(canPlay === "maybe" || canPlay === "probably");
                    });
                  }
                  var transparentVideo_checkSupportForTransparency = checkSupportForTransparency;
                  function cloudinary_classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function cloudinary_defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                      var descriptor = props[i];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function cloudinary_createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) cloudinary_defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) cloudinary_defineProperties(Constructor, staticProps);
                    Object.defineProperty(Constructor, "prototype", { writable: false });
                    return Constructor;
                  }
                  var applyBreakpoints, closestAbove, defaultBreakpoints, cloudinary_findContainerWidth, cloudinary_maxWidth, updateDpr;
                  defaultBreakpoints = function defaultBreakpoints2(width) {
                    var steps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;
                    return steps * Math.ceil(width / steps);
                  };
                  closestAbove = function closestAbove2(list, value) {
                    var i;
                    i = list.length - 2;
                    while (i >= 0 && list[i] >= value) {
                      i--;
                    }
                    return list[i + 1];
                  };
                  applyBreakpoints = function applyBreakpoints2(tag, width, steps, options) {
                    var ref, ref1, ref2, responsive_use_breakpoints;
                    responsive_use_breakpoints = (ref = (ref1 = (ref2 = options["responsive_use_breakpoints"]) != null ? ref2 : options["responsive_use_stoppoints"]) != null ? ref1 : this.config("responsive_use_breakpoints")) != null ? ref : this.config("responsive_use_stoppoints");
                    if (!responsive_use_breakpoints || responsive_use_breakpoints === "resize" && !options.resizing) {
                      return width;
                    } else {
                      return this.calc_breakpoint(tag, width, steps);
                    }
                  };
                  cloudinary_findContainerWidth = function findContainerWidth(element) {
                    var containerWidth, style;
                    containerWidth = 0;
                    while ((element = element != null ? element.parentNode : void 0) instanceof Element && !containerWidth) {
                      style = window.getComputedStyle(element);
                      if (!/^inline/.test(style.display)) {
                        containerWidth = lodash_width(element);
                      }
                    }
                    return containerWidth;
                  };
                  updateDpr = function updateDpr2(dataSrc, roundDpr) {
                    return dataSrc.replace(/\bdpr_(1\.0|auto)\b/g, "dpr_" + this.device_pixel_ratio(roundDpr));
                  };
                  cloudinary_maxWidth = function maxWidth(requiredWidth, tag) {
                    var imageWidth;
                    imageWidth = lodash_getData(tag, "width") || 0;
                    if (requiredWidth > imageWidth) {
                      imageWidth = requiredWidth;
                      lodash_setData(tag, "width", requiredWidth);
                    }
                    return imageWidth;
                  };
                  var cloudinary_Cloudinary = function() {
                    function Cloudinary(options) {
                      cloudinary_classCallCheck(this, Cloudinary);
                      var configuration;
                      this.devicePixelRatioCache = {};
                      this.responsiveConfig = {};
                      this.responsiveResizeInitialized = false;
                      configuration = new src_configuration(options);
                      this.config = function(newConfig, newValue) {
                        return configuration.config(newConfig, newValue);
                      };
                      this.fromDocument = function() {
                        configuration.fromDocument();
                        return this;
                      };
                      this.fromEnvironment = function() {
                        configuration.fromEnvironment();
                        return this;
                      };
                      this.init = function() {
                        configuration.init();
                        return this;
                      };
                    }
                    cloudinary_createClass(
                      Cloudinary,
                      [
                        {
                          key: "url",
                          value: (
                            /**
                             * Generates a URL for any asset in your Media library.
                             * @function Cloudinary#url
                             * @param {string} publicId - The public ID of the media asset.
                             * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                             * @param {type} [options.type='upload'] - The asset's storage type.
                             *  For details on all fetch types, see
                             * <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
                             *  target="_blank">Fetch types</a>.
                             * @param {resourceType} [options.resource_type='image'] - The type of asset. Possible values:<br/>
                             *  - `image`<br/>
                             *  - `video`<br/>
                             *  - `raw`
                             * @return {string} The media asset URL.
                             * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                             *  Available image transformations</a>
                             * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                             *  Available video transformations</a>
                             */
                            function url(publicId) {
                              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                              return url_url(publicId, options, this.config());
                            }
                          )
                          /**
                           * Generates a video asset URL.
                           * @function Cloudinary#video_url
                           * @param {string} publicId - The public ID of the video.
                           * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                           * @param {type} [options.type='upload'] - The asset's storage type.
                           *  For details on all fetch types, see
                           *  <a href="https://cloudinary.com/documentation/image_transformations#fetching_images_from_remote_locations"
                           *  target="_blank">Fetch types</a>.
                           * @return {string} The video URL.
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference"
                           *  target="_blank">Available video transformations</a>
                           */
                        },
                        {
                          key: "video_url",
                          value: function video_url(publicId, options) {
                            options = assign_root_assign_default()(
                              {
                                resource_type: "video"
                              },
                              options
                            );
                            return this.url(publicId, options);
                          }
                          /**
                           * Generates a URL for an image intended to be used as a thumbnail for the specified video.
                           *  Identical to {@link Cloudinary#url|url}, except that the `resource_type` is `video`
                           *  and the default `format` is `jpg`.
                           * @function Cloudinary#video_thumbnail_url
                           * @param {string} publicId -  The unique identifier of the video from which you want to generate a thumbnail image.
                           * @param {Object} [options] - The image {@link Transformation} parameters to apply to the thumbnail.
                           * In addition to standard image transformations, you can also use the `start_offset` transformation parameter
                           * to instruct Cloudinary to generate the thumbnail from a frame other than the middle frame of the video.
                           * For details, see
                           * <a href="https://cloudinary.com/documentation/video_manipulation_and_delivery#generating_video_thumbnails"
                           * target="_blank">Generating video thumbnails</a> in the Cloudinary documentation.
                           * @param {type} [options.type='upload'] - The asset's storage type.
                           * @return {string} The URL of the video thumbnail image.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           */
                        },
                        {
                          key: "video_thumbnail_url",
                          value: function video_thumbnail_url(publicId, options) {
                            options = assign_root_assign_default()({}, DEFAULT_POSTER_OPTIONS, options);
                            return this.url(publicId, options);
                          }
                          /**
                           * Generates a string representation of the specified transformation options.
                           * @function Cloudinary#transformation_string
                           * @param {Object} options - The {@link Transformation} options.
                           * @returns {string} The transformation string.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                           *  Available video transformations</a>
                           */
                        },
                        {
                          key: "transformation_string",
                          value: function transformation_string(options) {
                            return new src_transformation(options).serialize();
                          }
                          /**
                           * Generates an image tag.
                           * @function Cloudinary#image
                           * @param {string} publicId - The public ID of the image.
                           * @param {Object} options - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag DOM element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "image",
                          value: function image(publicId) {
                            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                            var client_hints, img, ref;
                            img = this.imageTag(publicId, options);
                            client_hints = (ref = options.client_hints != null ? options.client_hints : this.config("client_hints")) != null ? ref : false;
                            if (options.src == null && !client_hints) {
                              img.setAttr("src", "");
                            }
                            img = img.toDOM();
                            if (!client_hints) {
                              lodash_setData(img, "src-cache", this.url(publicId, options));
                              this.cloudinary_update(img, options);
                            }
                            return img;
                          }
                          /**
                           * Creates a new ImageTag instance using the configuration defined for this `cloudinary` instance.
                           * @function Cloudinary#imageTag
                           * @param {string} publicId - The public ID of the image.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {ImageTag} An ImageTag instance that is attached (chained) to this Cloudinary instance.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "imageTag",
                          value: function imageTag(publicId, options) {
                            var tag;
                            tag = new imagetag(publicId, this.config());
                            tag.transformation().fromOptions(options);
                            return tag;
                          }
                          /**
                           * Creates a new PictureTag instance, configured using this `cloudinary` instance.
                           * @function Cloudinary#PictureTag
                           * @param {string} publicId - the public ID of the resource
                           * @param {Object} options - additional options to pass to the new ImageTag instance
                           * @param {Array<Object>} sources - the sources definitions
                           * @return {PictureTag} A PictureTag that is attached (chained) to this Cloudinary instance
                           */
                        },
                        {
                          key: "pictureTag",
                          value: function pictureTag(publicId, options, sources) {
                            var tag;
                            tag = new picturetag(publicId, this.config(), sources);
                            tag.transformation().fromOptions(options);
                            return tag;
                          }
                          /**
                           * Creates a new SourceTag instance, configured using this `cloudinary` instance.
                           * @function Cloudinary#SourceTag
                           * @param {string} publicId - the public ID of the resource.
                           * @param {Object} options - additional options to pass to the new instance.
                           * @return {SourceTag} A SourceTag that is attached (chained) to this Cloudinary instance
                           */
                        },
                        {
                          key: "sourceTag",
                          value: function sourceTag(publicId, options) {
                            var tag;
                            tag = new sourcetag(publicId, this.config());
                            tag.transformation().fromOptions(options);
                            return tag;
                          }
                          /**
                           * Generates a video thumbnail URL from the specified remote video and includes it in an image tag.
                           * @function Cloudinary#video_thumbnail
                           * @param {string} publicId - The unique identifier of the video from the relevant video site.
                           *  Additionally, either append the image extension type to the identifier value or set
                           *  the image delivery format in the 'options' parameter using the 'format' transformation option.
                           *  For example, a YouTube video might have the identifier: 'o-urnlaJpOA.jpg'.
                           * @param {Object} [options] - The {@link Transformation} parameters to apply.
                           * @return {HTMLImageElement} An HTML image tag element
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                           *  Available video transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "video_thumbnail",
                          value: function video_thumbnail(publicId, options) {
                            return this.image(publicId, merge_root_merge_default()({}, DEFAULT_POSTER_OPTIONS, options));
                          }
                          /**
                           * Fetches a facebook profile image and delivers it in an image tag element.
                           * @function Cloudinary#facebook_profile_image
                           * @param {string} publicId - The Facebook numeric ID. Additionally, either append the image extension type
                           *  to the ID or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "facebook_profile_image",
                          value: function facebook_profile_image(publicId, options) {
                            return this.image(publicId, assign_root_assign_default()(
                              {
                                type: "facebook"
                              },
                              options
                            ));
                          }
                          /**
                           * Fetches a Twitter profile image by ID and delivers it in an image tag element.
                           * @function Cloudinary#twitter_profile_image
                           * @param {string} publicId - The Twitter numeric ID. Additionally, either append the image extension type
                           *  to the ID or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "twitter_profile_image",
                          value: function twitter_profile_image(publicId, options) {
                            return this.image(publicId, assign_root_assign_default()(
                              {
                                type: "twitter"
                              },
                              options
                            ));
                          }
                          /**
                           * Fetches a Twitter profile image by name and delivers it in an image tag element.
                           * @function Cloudinary#twitter_name_profile_image
                           * @param {string} publicId - The Twitter screen name. Additionally, either append the image extension type
                           *  to the screen name or set the image delivery format in the 'options' parameter using the 'format' transformation option.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "twitter_name_profile_image",
                          value: function twitter_name_profile_image(publicId, options) {
                            return this.image(publicId, assign_root_assign_default()(
                              {
                                type: "twitter_name"
                              },
                              options
                            ));
                          }
                          /**
                           * Fetches a Gravatar profile image and delivers it in an image tag element.
                           * @function Cloudinary#gravatar_image
                           * @param {string} publicId - The calculated hash for the Gravatar email address.
                           *  Additionally, either append the image extension type to the screen name or set the image delivery format
                           *  in the 'options' parameter using the 'format' transformation option.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "gravatar_image",
                          value: function gravatar_image(publicId, options) {
                            return this.image(publicId, assign_root_assign_default()(
                              {
                                type: "gravatar"
                              },
                              options
                            ));
                          }
                          /**
                           * Fetches an image from a remote URL and delivers it in an image tag element.
                           * @function Cloudinary#fetch_image
                           * @param {string} publicId - The full URL of the image to fetch, including the extension.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLImageElement} An image tag element.
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "fetch_image",
                          value: function fetch_image(publicId, options) {
                            return this.image(publicId, assign_root_assign_default()(
                              {
                                type: "fetch"
                              },
                              options
                            ));
                          }
                          /**
                           * Generates a video tag.
                           * @function Cloudinary#video
                           * @param {string} publicId - The public ID of the video.
                           * @param {Object} [options] - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {HTMLVideoElement} A video tag DOM element.
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                           *  Available video transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "video",
                          value: function video(publicId) {
                            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                            return this.videoTag(publicId, options).toHtml();
                          }
                          /**
                           * Creates a new VideoTag instance using the configuration defined for this `cloudinary` instance.
                           * @function Cloudinary#videoTag
                           * @param {string} publicId - The public ID of the video.
                           * @param {Object} options - The {@link Transformation} parameters, {@link Configuration} parameters,
                           *  and standard HTML &lt;img&gt; tag attributes to apply to the image tag.
                           * @return {VideoTag} A VideoTag that is attached (chained) to this `cloudinary` instance.
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                           *  Available video transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/solution_overview#configuration_parameters"
                           *  target="_blank">Available configuration options</a>
                           */
                        },
                        {
                          key: "videoTag",
                          value: function videoTag(publicId, options) {
                            options = defaults({}, options, this.config());
                            return new videotag(publicId, options);
                          }
                          /**
                           * Generates a sprite PNG image that contains all images with the specified tag and the corresponding css file.
                           * @function Cloudinary#sprite_css
                           * @param {string} publicId - The tag on which to base the sprite image.
                           * @param {Object} [options] - The {@link Transformation} parameters to include in the URL.
                           * @return {string} The URL of the generated CSS file. The sprite image has the same URL, but with a PNG extension.
                           * @see <a href="https://cloudinary.com/documentation/sprite_generation" target="_blank">
                           *  Sprite generation</a>
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           */
                        },
                        {
                          key: "sprite_css",
                          value: function sprite_css(publicId, options) {
                            options = assign_root_assign_default()(
                              {
                                type: "sprite"
                              },
                              options
                            );
                            if (!publicId.match(/.css$/)) {
                              options.format = "css";
                            }
                            return this.url(publicId, options);
                          }
                          /**
                           * Initializes responsive image behavior for all image tags with the 'cld-responsive'
                           *  (or other defined {@link Cloudinary#responsive|responsive} class).<br/>
                           *  This method should be invoked after the page has loaded.<br/>
                           *  <b>Note</b>: Calls {@link Cloudinary#cloudinary_update|cloudinary_update} to modify image tags.
                           * @function Cloudinary#responsive
                           * @param {Object} options
                           * @param {String} [options.responsive_class='cld-responsive'] - An alternative class
                           *  to locate the relevant &lt;img&gt; tags.
                           * @param {number} [options.responsive_debounce=100] - The debounce interval in milliseconds.
                           * @param {boolean} [bootstrap=true] If true, processes the &lt;img&gt; tags by calling
                           *  {@link Cloudinary#cloudinary_update|cloudinary_update}. When false, the tags are processed
                           *  only after a resize event.
                           * @see {@link Cloudinary#cloudinary_update|cloudinary_update} for additional configuration parameters
                           * @see <a href="https://cloudinary.com/documentation/responsive_images#automating_responsive_images_with_javascript"
                           *  target="_blank">Automating responsive images with JavaScript</a>
                           * @return {function} that when called, removes the resize EventListener added by this function
                           */
                        },
                        {
                          key: "responsive",
                          value: function responsive(options) {
                            var _this = this;
                            var bootstrap = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
                            var ref, ref1, ref2, responsiveClass, responsiveResize, timeout;
                            this.responsiveConfig = merge_root_merge_default()(this.responsiveConfig || {}, options);
                            responsiveClass = (ref = this.responsiveConfig.responsive_class) != null ? ref : this.config("responsive_class");
                            if (bootstrap) {
                              this.cloudinary_update("img.".concat(responsiveClass, ", img.cld-hidpi"), this.responsiveConfig);
                            }
                            responsiveResize = (ref1 = (ref2 = this.responsiveConfig.responsive_resize) != null ? ref2 : this.config("responsive_resize")) != null ? ref1 : true;
                            if (responsiveResize && !this.responsiveResizeInitialized) {
                              this.responsiveConfig.resizing = this.responsiveResizeInitialized = true;
                              timeout = null;
                              var makeResponsive = function makeResponsive2() {
                                var debounce, ref3, ref4, reset, run, wait, waitFunc;
                                debounce = (ref3 = (ref4 = _this.responsiveConfig.responsive_debounce) != null ? ref4 : _this.config("responsive_debounce")) != null ? ref3 : 100;
                                reset = function reset2() {
                                  if (timeout) {
                                    clearTimeout(timeout);
                                    timeout = null;
                                  }
                                };
                                run = function run2() {
                                  return _this.cloudinary_update("img.".concat(responsiveClass), _this.responsiveConfig);
                                };
                                waitFunc = function waitFunc2() {
                                  reset();
                                  return run();
                                };
                                wait = function wait2() {
                                  reset();
                                  timeout = setTimeout(waitFunc, debounce);
                                };
                                if (debounce) {
                                  return wait();
                                } else {
                                  return run();
                                }
                              };
                              window.addEventListener("resize", makeResponsive);
                              return function() {
                                return window.removeEventListener("resize", makeResponsive);
                              };
                            }
                          }
                          /**
                           * @function Cloudinary#calc_breakpoint
                           * @private
                           * @ignore
                           */
                        },
                        {
                          key: "calc_breakpoint",
                          value: function calc_breakpoint(element, width, steps) {
                            var breakpoints = lodash_getData(element, "breakpoints") || lodash_getData(element, "stoppoints") || this.config("breakpoints") || this.config("stoppoints") || defaultBreakpoints;
                            if (isFunction_root_isFunction_default()(breakpoints)) {
                              return breakpoints(width, steps);
                            } else {
                              if (isString_root_isString_default()(breakpoints)) {
                                breakpoints = breakpoints.split(",").map(function(point) {
                                  return parseInt(point);
                                }).sort(function(a, b) {
                                  return a - b;
                                });
                              }
                              return closestAbove(breakpoints, width);
                            }
                          }
                          /**
                           * @function Cloudinary#calc_stoppoint
                           * @deprecated Use {@link calc_breakpoint} instead.
                           * @private
                           * @ignore
                           */
                        },
                        {
                          key: "calc_stoppoint",
                          value: function calc_stoppoint(element, width, steps) {
                            return this.calc_breakpoint(element, width, steps);
                          }
                          /**
                           * @function Cloudinary#device_pixel_ratio
                           * @private
                           */
                        },
                        {
                          key: "device_pixel_ratio",
                          value: function device_pixel_ratio(roundDpr) {
                            roundDpr = roundDpr == null ? true : roundDpr;
                            var dpr = (typeof window !== "undefined" && window !== null ? window.devicePixelRatio : void 0) || 1;
                            if (roundDpr) {
                              dpr = Math.ceil(dpr);
                            }
                            if (dpr <= 0 || dpr === 0 / 0) {
                              dpr = 1;
                            }
                            var dprString = dpr.toString();
                            if (dprString.match(/^\d+$/)) {
                              dprString += ".0";
                            }
                            return dprString;
                          }
                          /**
                          * Applies responsiveness to all <code>&lt;img&gt;</code> tags under each relevant node
                          *  (regardless of whether the tag contains the {@link Cloudinary#responsive|responsive} class).
                          * @param {Element[]} nodes The parent nodes where you want to search for &lt;img&gt; tags.
                          * @param {Object} [options] The {@link Cloudinary#cloudinary_update|cloudinary_update} options to apply.
                          * @see <a href="https://cloudinary.com/documentation/image_transformation_reference"
                          *  target="_blank">Available image transformations</a>
                          * @function Cloudinary#processImageTags
                          */
                        },
                        {
                          key: "processImageTags",
                          value: function processImageTags(nodes, options) {
                            if (isEmpty2(nodes)) {
                              return this;
                            }
                            options = defaults({}, options || {}, this.config());
                            var images = nodes.filter(function(node) {
                              return /^img$/i.test(node.tagName);
                            }).map(function(node) {
                              var imgOptions = assign_root_assign_default()(
                                {
                                  width: node.getAttribute("width"),
                                  height: node.getAttribute("height"),
                                  src: node.getAttribute("src")
                                },
                                options
                              );
                              var publicId = imgOptions["source"] || imgOptions["src"];
                              delete imgOptions["source"];
                              delete imgOptions["src"];
                              var attr = new src_transformation(imgOptions).toHtmlAttributes();
                              lodash_setData(node, "src-cache", url_url(publicId, imgOptions));
                              node.setAttribute("width", attr.width);
                              node.setAttribute("height", attr.height);
                              return node;
                            });
                            this.cloudinary_update(images, options);
                            return this;
                          }
                          /**
                          * Updates the dpr (for `dpr_auto`) and responsive (for `w_auto`) fields according to
                          *  the current container size and the device pixel ratio.<br/>
                          *  <b>Note</b>:`w_auto` is updated only for images marked with the `cld-responsive`
                          *  (or other defined {@link Cloudinary#responsive|responsive}) class.
                          * @function Cloudinary#cloudinary_update
                          * @param {(Array|string|NodeList)} elements - The HTML image elements to modify.
                          * @param {Object} options
                          * @param {boolean|string} [options.responsive_use_breakpoints=true]
                          * Possible values:<br/>
                          *  - `true`: Always use breakpoints for width.<br/>
                          *  - `resize`: Use exact width on first render and breakpoints on resize.<br/>
                          *  - `false`: Always use exact width.
                          * @param {boolean} [options.responsive] - If `true`, enable responsive on all specified elements.
                          *  Alternatively, you can define specific HTML elements to modify by adding the `cld-responsive`
                          *  (or other custom-defined {@link Cloudinary#responsive|responsive_class}) class to those elements.
                          * @param {boolean} [options.responsive_preserve_height] - If `true`, original css height is preserved.
                          *  Should be used only if the transformation supports different aspect ratios.
                          */
                        },
                        {
                          key: "cloudinary_update",
                          value: function cloudinary_update(elements, options) {
                            var _this2 = this;
                            var containerWidth, dataSrc, match2, requiredWidth;
                            if (elements === null) {
                              return this;
                            }
                            if (options == null) {
                              options = {};
                            }
                            var responsive = options.responsive != null ? options.responsive : this.config("responsive");
                            elements = normalizeToArray(elements);
                            var responsiveClass;
                            if (this.responsiveConfig && this.responsiveConfig.responsive_class != null) {
                              responsiveClass = this.responsiveConfig.responsive_class;
                            } else if (options.responsive_class != null) {
                              responsiveClass = options.responsive_class;
                            } else {
                              responsiveClass = this.config("responsive_class");
                            }
                            var roundDpr = options.round_dpr != null ? options.round_dpr : this.config("round_dpr");
                            elements.forEach(function(tag) {
                              if (/img/i.test(tag.tagName)) {
                                var setUrl = true;
                                if (responsive) {
                                  lodash_addClass(tag, responsiveClass);
                                }
                                dataSrc = lodash_getData(tag, "src-cache") || lodash_getData(tag, "src");
                                if (!isEmpty2(dataSrc)) {
                                  dataSrc = updateDpr.call(_this2, dataSrc, roundDpr);
                                  if (htmltag.isResponsive(tag, responsiveClass)) {
                                    containerWidth = cloudinary_findContainerWidth(tag);
                                    if (containerWidth !== 0) {
                                      if (/w_auto:breakpoints/.test(dataSrc)) {
                                        requiredWidth = cloudinary_maxWidth(containerWidth, tag);
                                        if (requiredWidth) {
                                          dataSrc = dataSrc.replace(/w_auto:breakpoints([_0-9]*)(:[0-9]+)?/, "w_auto:breakpoints$1:".concat(requiredWidth));
                                        } else {
                                          setUrl = false;
                                        }
                                      } else {
                                        match2 = /w_auto(:(\d+))?/.exec(dataSrc);
                                        if (match2) {
                                          requiredWidth = applyBreakpoints.call(_this2, tag, containerWidth, match2[2], options);
                                          requiredWidth = cloudinary_maxWidth(requiredWidth, tag);
                                          if (requiredWidth) {
                                            dataSrc = dataSrc.replace(/w_auto[^,\/]*/g, "w_".concat(requiredWidth));
                                          } else {
                                            setUrl = false;
                                          }
                                        }
                                      }
                                      lodash_removeAttribute(tag, "width");
                                      if (!options.responsive_preserve_height) {
                                        lodash_removeAttribute(tag, "height");
                                      }
                                    } else {
                                      setUrl = false;
                                    }
                                  }
                                  var isLazyLoading = options.loading === "lazy" && !_this2.isNativeLazyLoadSupported() && _this2.isLazyLoadSupported() && !elements[0].getAttribute("src");
                                  if (setUrl || isLazyLoading) {
                                    _this2.setAttributeIfExists(elements[0], "width", "data-width");
                                  }
                                  if (setUrl && !isLazyLoading) {
                                    lodash_setAttribute(tag, "src", dataSrc);
                                  }
                                }
                              }
                            });
                            return this;
                          }
                          /**
                           * Sets element[toAttribute] = element[fromAttribute] if element[fromAttribute] is set
                           * @param element
                           * @param toAttribute
                           * @param fromAttribute
                           */
                        },
                        {
                          key: "setAttributeIfExists",
                          value: function setAttributeIfExists(element, toAttribute, fromAttribute) {
                            var attributeValue = element.getAttribute(fromAttribute);
                            if (attributeValue != null) {
                              lodash_setAttribute(element, toAttribute, attributeValue);
                            }
                          }
                          /**
                           * Returns true if Intersection Observer API is supported
                           * @returns {boolean}
                           */
                        },
                        {
                          key: "isLazyLoadSupported",
                          value: function isLazyLoadSupported() {
                            return window && "IntersectionObserver" in window;
                          }
                          /**
                           * Returns true if using Chrome
                           * @returns {boolean}
                           */
                        },
                        {
                          key: "isNativeLazyLoadSupported",
                          value: function isNativeLazyLoadSupported2() {
                            return "loading" in HTMLImageElement.prototype;
                          }
                          /**
                           * Returns a {@link Transformation} object, initialized with the specified options, for chaining purposes.
                           * @function Cloudinary#transformation
                           * @param {Object} options The {@link Transformation} options to apply.
                           * @return {Transformation}
                           * @see Transformation
                           * @see <a href="https://cloudinary.com/documentation/image_transformation_reference" target="_blank">
                           *  Available image transformations</a>
                           * @see <a href="https://cloudinary.com/documentation/video_transformation_reference" target="_blank">
                           *  Available video transformations</a>
                           */
                        },
                        {
                          key: "transformation",
                          value: function transformation(options) {
                            return src_transformation["new"](this.config()).fromOptions(options).setParent(this);
                          }
                          /**
                           * @description This function will append a TransparentVideo element to the htmlElContainer passed to it.
                           *              TransparentVideo can either be an HTML Video tag, or an HTML Canvas Tag.
                           * @param {HTMLElement} htmlElContainer
                           * @param {string} publicId
                           * @param {object} options The {@link TransparentVideoOptions} options to apply - Extends TransformationOptions
                           *                 options.playsinline    - HTML Video Tag's native playsinline - passed to video element.
                           *                 options.poster         - HTML Video Tag's native poster - passed to video element.
                           *                 options.loop           - HTML Video Tag's native loop - passed to video element.
                           *                 options?.externalLibraries = { [key: string]: string} - map of external libraries to be loaded
                           * @return {Promise<HTMLElement | {status:string, message:string}>}
                           */
                        },
                        {
                          key: "injectTransparentVideoElement",
                          value: function injectTransparentVideoElement(htmlElContainer, publicId) {
                            var _this3 = this;
                            var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                            return new Promise(function(resolve, reject) {
                              if (!htmlElContainer) {
                                reject({
                                  status: "error",
                                  message: "Expecting htmlElContainer to be HTMLElement"
                                });
                              }
                              transparentVideo_enforceOptionsForTransparentVideo(options);
                              var videoURL = _this3.video_url(publicId, options);
                              transparentVideo_checkSupportForTransparency().then(function(isNativelyTransparent) {
                                var mountPromise;
                                if (isNativelyTransparent) {
                                  mountPromise = transparentVideo_mountCloudinaryVideoTag(htmlElContainer, _this3, publicId, options);
                                  resolve(htmlElContainer);
                                } else {
                                  mountPromise = transparentVideo_mountSeeThruCanvasTag(htmlElContainer, videoURL, options);
                                }
                                mountPromise.then(function() {
                                  resolve(htmlElContainer);
                                })["catch"](function(_ref) {
                                  var status = _ref.status, message = _ref.message;
                                  reject({
                                    status,
                                    message
                                  });
                                });
                              })["catch"](function(_ref2) {
                                var status = _ref2.status, message = _ref2.message;
                                reject({
                                  status,
                                  message
                                });
                              });
                            });
                          }
                        }
                      ],
                      [{
                        key: "new",
                        value: function _new(options) {
                          return new this(options);
                        }
                      }]
                    );
                    return Cloudinary;
                  }();
                  assign_root_assign_default()(cloudinary_Cloudinary, constants_namespaceObject);
                  var cloudinary = cloudinary_Cloudinary;
                  __webpack_exports__["default"] = {
                    ClientHintsMetaTag: clienthintsmetatag,
                    Cloudinary: cloudinary,
                    Condition: condition,
                    Configuration: src_configuration,
                    crc32: src_crc32,
                    Expression: expression,
                    FetchLayer: fetchlayer,
                    HtmlTag: htmltag,
                    ImageTag: imagetag,
                    Layer: layer_layer,
                    PictureTag: picturetag,
                    SubtitlesLayer: subtitleslayer,
                    TextLayer: textlayer,
                    Transformation: src_transformation,
                    utf8_encode: src_utf8_encode,
                    Util: lodash_namespaceObject,
                    VideoTag: videotag
                  };
                }
              ),
              /***/
              "lodash/assign": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_assign__;
                }
              ),
              /***/
              "lodash/cloneDeep": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_cloneDeep__;
                }
              ),
              /***/
              "lodash/compact": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_compact__;
                }
              ),
              /***/
              "lodash/difference": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_difference__;
                }
              ),
              /***/
              "lodash/functions": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_functions__;
                }
              ),
              /***/
              "lodash/identity": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_identity__;
                }
              ),
              /***/
              "lodash/includes": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_includes__;
                }
              ),
              /***/
              "lodash/isArray": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isArray__;
                }
              ),
              /***/
              "lodash/isElement": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isElement__;
                }
              ),
              /***/
              "lodash/isFunction": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isFunction__;
                }
              ),
              /***/
              "lodash/isPlainObject": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isPlainObject__;
                }
              ),
              /***/
              "lodash/isString": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_isString__;
                }
              ),
              /***/
              "lodash/merge": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_merge__;
                }
              ),
              /***/
              "lodash/trim": (
                /***/
                function(module3, exports4) {
                  module3.exports = __WEBPACK_EXTERNAL_MODULE_lodash_trim__;
                }
              )
              /******/
            })
          );
        });
      })(cloudinaryCore);
      var createUploadWidget = function(options, callback) {
        if ((window === null || window === void 0 ? void 0 : window.cloudinary) === void 0) {
          throw new Error("Cloudinary is not instantiated on window.");
        }
        return window.cloudinary.createUploadWidget(options, callback);
      };
      var CloudinaryUploadWidget = function(_a) {
        var onFileUpload = _a.onFileUpload, text = _a.text, widgetOptions = __rest(_a, ["onFileUpload", "text"]);
        var isLoaded = useHtmlScript("https://widget.cloudinary.com/v2.0/global/all.js").isLoaded;
        var widget = React.useMemo(function() {
          return isLoaded ? createUploadWidget(__assign(__assign({}, widgetOptions), { sources: ["local"] }), function(error, result) {
            var _a2, _b, _c;
            if (!error && (result === null || result === void 0 ? void 0 : result.event) === "success") {
              onFileUpload({
                publicId: (_a2 = result === null || result === void 0 ? void 0 : result.info) === null || _a2 === void 0 ? void 0 : _a2.public_id,
                url: (_b = result === null || result === void 0 ? void 0 : result.info) === null || _b === void 0 ? void 0 : _b.url,
                original_filename: (_c = result === null || result === void 0 ? void 0 : result.info) === null || _c === void 0 ? void 0 : _c.original_filename
              });
            }
          }) : void 0;
        }, [isLoaded, onFileUpload, widgetOptions]);
        var uploadFileWidget = function() {
          widget === null || widget === void 0 ? void 0 : widget.open();
        };
        return jsxRuntime.exports.jsx(Button, __assign({ onClick: uploadFileWidget, disabled: !isLoaded }, { children: text.uploadButton }));
      };
      var classes$1 = { "container": "awell__cloudinary_container", "awell_cloudinary": "awell__cloudinary_awell_cloudinary", "content": "awell__cloudinary_content", "message_title": "awell__cloudinary_message_title", "attachmentList": "awell__cloudinary_attachmentList", "button_wrapper": "awell__cloudinary_button_wrapper" };
      var ActionKey;
      (function(ActionKey2) {
        ActionKey2["UPLOAD_FILES"] = "uploadFiles";
      })(ActionKey || (ActionKey = {}));
      var CloudinaryUpload = function(_a) {
        var cloudName = _a.cloudName, uploadPreset = _a.uploadPreset, folder = _a.folder, tags = _a.tags, context = _a.context, onFinish = _a.onFinish, text = _a.text;
        var showScrollHint = useScrollHint().showScrollHint;
        var _b = React.useState([]), uploadedFilesList = _b[0], setUploadedFilesList = _b[1];
        var attachments = React.useMemo(function() {
          return uploadedFilesList.map(function(_a2, index) {
            var url = _a2.url, original_filename = _a2.original_filename;
            return {
              id: "url-".concat(index),
              url,
              type: exports2.MessageAttachmentType.File,
              name: original_filename
            };
          });
        }, [uploadedFilesList]);
        var onImageUploadHandler = React.useCallback(function(data) {
          setUploadedFilesList(function(prevState) {
            return __spreadArray(__spreadArray([], prevState, true), [data], false);
          });
        }, []);
        var handleOnDone = React.useCallback(function() {
          onFinish(uploadedFilesList);
        }, [onFinish, uploadedFilesList]);
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: jsxRuntime.exports.jsxs("section", __assign({ className: "".concat(classes$1.awell_cloudinary, " ").concat(classes$1.container) }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$1.message_title }, { children: text.subject })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$1.content }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: "files" }, { children: jsxRuntime.exports.jsx("p", { children: text.fileCountHeader(uploadedFilesList === null || uploadedFilesList === void 0 ? void 0 : uploadedFilesList.length) }) })), !!attachments.length && jsxRuntime.exports.jsx("div", __assign({ className: classes$1.attachmentList }, { children: jsxRuntime.exports.jsx(AttachmentList, { attachments, icon: text.attachmentIcon, labels: text.attachmentLabels }) })), jsxRuntime.exports.jsx(CloudinaryUploadWidget, { cloudName, uploadPreset, folder, tags, context, onFileUpload: onImageUploadHandler, text: { uploadButton: text.buttonLabels.upload } })] }))] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint }, { children: jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$1.button_wrapper, " ").concat(classes$1.container) }, { children: jsxRuntime.exports.jsx(Button, __assign({ "data-cy": "finishUpload", variant: "secondary", onClick: handleOnDone }, { children: text.buttonLabels.done })) })) }))] });
      };
      CloudinaryUpload.displayName = "Cloudinary";
      var CloudinarySingleFileUpload = function(_a) {
        var cloudName = _a.cloudName, uploadPreset = _a.uploadPreset, folder = _a.folder, tags = _a.tags, context = _a.context, onFinish = _a.onFinish, text = _a.text;
        var showScrollHint = useScrollHint().showScrollHint;
        var _b = React.useState(void 0), uploadedFile = _b[0], setUploadedFile = _b[1];
        var attachments = React.useMemo(function() {
          return [
            {
              id: "url-".concat(uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.publicId),
              url: (uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.url) || "",
              type: exports2.MessageAttachmentType.File,
              name: (uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.original_filename) || ""
            }
          ];
        }, [uploadedFile]);
        var onImageUploadHandler = React.useCallback(function(data) {
          setUploadedFile(data);
        }, []);
        var handleOnDone = React.useCallback(function() {
          onFinish(uploadedFile);
        }, [onFinish, uploadedFile]);
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: jsxRuntime.exports.jsxs("section", __assign({ className: "".concat(classes$1.awell_cloudinary, " ").concat(classes$1.container) }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: classes$1.message_title }, { children: text.subject })), jsxRuntime.exports.jsxs("div", __assign({ className: classes$1.content }, { children: [jsxRuntime.exports.jsx("div", __assign({ className: "files" }, { children: jsxRuntime.exports.jsx("p", { children: text.fileCountHeader(uploadedFile !== void 0) }) })), uploadedFile && jsxRuntime.exports.jsx("div", __assign({ className: classes$1.attachmentList }, { children: jsxRuntime.exports.jsx(AttachmentList, { attachments, icon: text.attachmentIcon, labels: text.attachmentLabels }) })), !uploadedFile && jsxRuntime.exports.jsx(CloudinaryUploadWidget, { cloudName, uploadPreset, multiple: false, folder, tags, context, onFileUpload: onImageUploadHandler, text: { uploadButton: text.buttonLabels.upload } })] }))] })) })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint }, { children: jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes$1.button_wrapper, " ").concat(classes$1.container) }, { children: jsxRuntime.exports.jsx(Button, __assign({ "data-cy": "finishUpload", variant: "secondary", onClick: handleOnDone }, { children: text.buttonLabels.done })) })) }))] });
      };
      CloudinarySingleFileUpload.displayName = "CloudinarySingleFileUpload";
      var classes = { "container": "awell__collectMedication_container", "label": "awell__collectMedication_label", "groupMedsListContainer": "awell__collectMedication_groupMedsListContainer", "singleMedsListContainer": "awell__collectMedication_singleMedsListContainer", "addMedsButton": "awell__collectMedication_addMedsButton", "deleteMedsButton": "awell__collectMedication_deleteMedsButton", "icon": "awell__collectMedication_icon", "button_wrapper": "awell__collectMedication_button_wrapper" };
      var CollectMedication = function(_a) {
        var label = _a.label, text = _a.text, onSubmit = _a.onSubmit;
        var _b = React.useState([]), medications = _b[0], setMedications = _b[1];
        var _c = useTheme(), updateLayoutMode = _c.updateLayoutMode, resetLayoutMode = _c.resetLayoutMode;
        React.useEffect(function() {
          updateLayoutMode("flexible");
          return function() {
            resetLayoutMode();
          };
        }, []);
        var handleSubmit = React.useCallback(function() {
          var filteredMedications = medications.filter(function(medication) {
            return !lodash.exports.isEmpty(medication.name) || !lodash.exports.isEmpty(medication.dose) || !lodash.exports.isEmpty(medication.instructions);
          });
          onSubmit(filteredMedications);
        }, [medications, onsubmit]);
        var addMedication = function() {
          setMedications(__spreadArray(__spreadArray([], medications, true), [{ name: "", dose: "", instructions: "" }], false));
        };
        var updateMedication = function(index, field, value) {
          var _a2;
          var newMedications = __spreadArray([], medications, true);
          newMedications[index] = __assign(__assign({}, newMedications[index]), (_a2 = {}, _a2[field] = value, _a2));
          setMedications(newMedications);
        };
        var removeMedication = function(index) {
          setMedications(medications.filter(function(_, i) {
            return i !== index;
          }));
        };
        return jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsxs("main", __assign({ id: "ahp_main_content_with_scroll_hint", className: layoutClasses.main_content }, { children: [!lodash.exports.isEmpty(label) && jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes.container, " ").concat(classes.label) }, { children: jsxRuntime.exports.jsx(QuestionLabel, { label: label !== null && label !== void 0 ? label : "" }) })), jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes.container, " ").concat(classes.groupMedsListContainer) }, { children: medications.map(function(medication, index) {
          return jsxRuntime.exports.jsxs("div", __assign({ className: classes.singleMedsListContainer }, { children: [jsxRuntime.exports.jsx(InputField, { id: "name", label: text.medication_name, type: "text", value: medication.name, onChange: function(e) {
            return updateMedication(index, "name", e.target.value);
          }, placeholder: text.medication_name }), jsxRuntime.exports.jsx(InputField, { id: "dose", label: text.medication_dose, type: "text", value: medication.dose, onChange: function(e) {
            return updateMedication(index, "dose", e.target.value);
          }, placeholder: text.medication_dose }), jsxRuntime.exports.jsx(InputField, { id: "instructions", label: text.medication_instructions, type: "text", value: medication.instructions || "", onChange: function(e) {
            return updateMedication(index, "instructions", e.target.value);
          }, placeholder: text.medication_instructions }), jsxRuntime.exports.jsx("button", __assign({ onClick: function() {
            return removeMedication(index);
          }, type: "button", className: classes.deleteMedsButton }, { children: jsxRuntime.exports.jsx(ForwardRef$1, { className: classes.icon, "aria-hidden": "true" }) }))] }), index);
        }) })), jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes.container, " ").concat(classes.addMedsButton) }, { children: jsxRuntime.exports.jsx(Button, __assign({ onClick: addMedication, variant: "secondary" }, { children: text.add_medication_button })) }))] })), jsxRuntime.exports.jsx(HostedPageFooter, __assign({ showScrollHint: false }, { children: jsxRuntime.exports.jsx("div", __assign({ className: "".concat(classes.button_wrapper, " ").concat(classes.container) }, { children: jsxRuntime.exports.jsx(Button, __assign({ "data-cy": "submitMedication", variant: "primary", onClick: handleSubmit }, { children: text.submit_medication })) })) }))] });
      };
      CollectMedication.displayName = "CollectMedication";
      exports2.AttachmentList = AttachmentList;
      exports2.Button = Button;
      exports2.CalDotComScheduling = CalDotComScheduling;
      exports2.CheckboxButton = CheckboxButton;
      exports2.Checklist = Checklist;
      exports2.CircularSpinner = CircularSpinner;
      exports2.CloseButton = CloseButton;
      exports2.CloudinarySingleFileUpload = CloudinarySingleFileUpload;
      exports2.CloudinaryUpload = CloudinaryUpload;
      exports2.CollectMedication = CollectMedication;
      exports2.ConversationalForm = ConversationalForm;
      exports2.DatePicker = DatePicker;
      exports2.Description = Description;
      exports2.ExternalLink = ExternalLink;
      exports2.Heading5 = Heading5;
      exports2.Heading6 = Heading6;
      exports2.HeadingMain = HeadingMain;
      exports2.HeadingSecondary = HeadingSecondary;
      exports2.HeadingTertiary = HeadingTertiary;
      exports2.HorizontalSpinner = HorizontalSpinner;
      exports2.HostedPageFooter = HostedPageFooter;
      exports2.HostedPageLayout = HostedPageLayout;
      exports2.InlineText = InlineText;
      exports2.InnerText = InnerText;
      exports2.InputField = InputField;
      exports2.LoadActivityPlaceholder = LoadActivityPlaceholder;
      exports2.Logo = Logo;
      exports2.LongTextField = LongTextField;
      exports2.Message = Message;
      exports2.Modal = Modal;
      exports2.MultipleChoiceQuestion = MultipleChoiceQuestion;
      exports2.Navbar = Navbar;
      exports2.ProgressIndicator = ProgressIndicator;
      exports2.Question = Question;
      exports2.QuestionLabel = QuestionLabel;
      exports2.RadioButton = RadioButton;
      exports2.RangeInput = RangeInput;
      exports2.RichTextViewer = RichTextViewer;
      exports2.ScrollIndicator = ScrollIndicator;
      exports2.Select = Select;
      exports2.SingleChoiceQuestion = SingleChoiceQuestion;
      exports2.SubHeading = SubHeading;
      exports2.Text = Text;
      exports2.ThemeProvider = ThemeProvider;
      exports2.TraditionalForm = TraditionalForm;
      exports2.TypingCaret = TypingCaret;
      exports2.WithTypingCaret = WithTypingCaret;
      exports2.WizardForm = WizardForm;
      exports2.isElement = isElement;
      exports2.isText = isText;
      exports2.useClickOutsideNotifier = useClickOutsideNotifier;
      exports2.useConversationalForm = useConversationalForm;
      exports2.useScrollHint = useScrollHint;
      exports2.useTheme = useTheme;
      exports2.useTraditionalForm = useTraditionalForm;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});
export default require_dist();
/*! Bundled license information:

@awell-health/ui-library/dist/index.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*!  Copying ends here. *)
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (*! @license DOMPurify 2.4.0 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.0/LICENSE *)
  (*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   *)
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=@awell-health_ui-library.js.map
